{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to iEDA Standard Develop Codebase \u00b6 star && fork us at PCNL-EDA/iEDA-standard-develop-codebase .","title":"\u4e3b\u9875"},{"location":"#welcome-to-ieda-standard-develop-codebase","text":"star && fork us at PCNL-EDA/iEDA-standard-develop-codebase .","title":"Welcome to iEDA Standard Develop Codebase"},{"location":"algorithm/dynamic_programing/%E5%8C%BA%E9%97%B4DP/","text":"\u533a\u95f4DP \u00b6 \u533a\u95f4DP\u7684\u7279\u5f81 : \u53ef\u4ee5\u4e24\u4e2a\u6216\u591a\u4e2a\u90e8\u5206\u8fdb\u884c\u6574\u5408, \u6216\u8005\u53cd\u8fc7\u6765\uff1b\u80fd\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u80fd\u4e24\u4e24\u5408\u5e76\u7684\u5f62\u5f0f. \u533a\u95f4DP\u7684\u6c42\u89e3 : \u5bf9**\u6574\u4e2a\u95ee\u9898\u8bbe\u6700\u4f18\u503c**\uff0c\u679a\u4e3e**\u5408\u5e76\u70b9**\uff0c\u5c06\u95ee\u9898\u5206\u89e3\u4e3a**\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206**\uff0c\u6700\u540e\u5408\u5e76\u4e24\u4e2a\u90e8\u5206\u7684\u6700\u4f18\u503c\u5f97\u5230\u539f\u95ee\u9898\u7684\u6700\u4f18\u503c\u3002 \u4e00\u822c\u7684\u65b9\u6cd5\u662f\u679a\u4e3e\u957f\u5ea6(\u6700\u5916\u5c42 L , 0 < L < N ), \u679a\u4e3e\u5de6\u7aef\u70b9(\u7b2c\u4e8c\u5c42 i , 0 < i < N-L ), \u4ee5\u6b64\u53ef\u786e\u5b9a\u53f3\u7aef\u70b9( j = i + L ), \u679a\u4e3e\u5408\u5e76\u70b9 ( i <= t < j ). \u4ec0\u4e48\u662f\u679a\u4e3e\u5408\u5e76\u70b9? \u597d\u6bd4\u6211\u8981\u5728\u4e00\u5757\u86cb\u7cd5\u7684\u7b2c i \u5398\u7c73\u5230\u7b2c j \u5398\u7c73\u76f4\u63a5\u5207\u4e00\u5200, \u53ef\u4ee5\u5207\u5728\u54ea\u91cc? \u5728 i~j \u4e4b\u95f4\u4e0b\u7684\u90a3\u4e00\u5200\u5c31\u662f\u5408\u5e76\u70b9, \u9700\u8981\u4e00\u4e2aloop\u6765\u679a\u4e3e. \u77f3\u5b50\u5408\u5e76 \u00b6 \u8bbe\u6709N\u5806\u77f3\u5b50\u6392\u6210\u4e00\u6392\uff0c\u5176\u7f16\u53f7\u4e3a1\uff0c2\uff0c3\uff0c\u2026\uff0cN\u3002 \u6bcf\u5806\u77f3\u5b50\u6709\u4e00\u5b9a\u7684\u8d28\u91cf\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6574\u6570\u6765\u63cf\u8ff0\uff0c\u73b0\u5728\u8981\u5c06\u8fd9N\u5806\u77f3\u5b50\u5408\u5e76\u6210\u4e3a\u4e00\u5806\u3002 \u6bcf\u6b21\u53ea\u80fd\u5408\u5e76\u76f8\u90bb\u7684**\u4e24\u5806**\uff0c\u5408\u5e76\u7684\u4ee3\u4ef7\u4e3a\u8fd9\u4e24\u5806\u77f3\u5b50\u7684\u8d28\u91cf\u4e4b\u548c\uff0c\u5408\u5e76\u540e\u4e0e\u8fd9\u4e24\u5806\u77f3\u5b50\u76f8\u90bb\u7684\u77f3\u5b50\u5c06\u548c\u65b0\u5806\u76f8\u90bb\uff0c\u5408\u5e76\u65f6\u7531\u4e8e\u9009\u62e9\u7684\u987a\u5e8f\u4e0d\u540c\uff0c\u5408\u5e76\u7684\u603b\u4ee3\u4ef7\u4e5f\u4e0d\u76f8\u540c\u3002 \u4f8b\u5982\u67094\u5806\u77f3\u5b50\u5206\u522b\u4e3a 1 3 5 2\uff0c \u6211\u4eec\u53ef\u4ee5\u5148\u5408\u5e761\u30012\u5806\uff0c\u4ee3\u4ef7\u4e3a4\uff0c\u5f97\u52304 5 2\uff0c \u53c8\u5408\u5e76 1\uff0c2\u5806\uff0c\u4ee3\u4ef7\u4e3a9\uff0c\u5f97\u52309 2 \uff0c\u518d\u5408\u5e76\u5f97\u523011\uff0c\u603b\u4ee3\u4ef7\u4e3a4+9+11=24\uff1b \u5982\u679c\u7b2c\u4e8c\u6b65\u662f\u5148\u5408\u5e762\uff0c3\u5806\uff0c\u5219\u4ee3\u4ef7\u4e3a7\uff0c\u5f97\u52304 7\uff0c\u6700\u540e\u4e00\u6b21\u5408\u5e76\u4ee3\u4ef7\u4e3a11\uff0c\u603b\u4ee3\u4ef7\u4e3a4+7+11=22\u3002 \u601d\u8def \u7ecf\u5178\u533a\u95f4DP. \u4e8c\u7ef4\u5f97\u76f8\u5f53\u6807\u51c6. \u8fd9\u9898\u4f1a\u5f88\u5bb9\u6613\u8bb0\u5fc6, \u56e0\u4e3a\u5b50\u95ee\u9898\u662f\"\u5408\u5e76\u7b2c i \u4e2a\u7269\u4f53\u5230\u7b2c j \u4e2a\u7269\u4f53\u7684\u6700\u4f18\u89e3\", \u800c\u539f\u95ee\u9898\u5219\u662f \"\u5df2\u5408\u5e76\u7b2c 1 \u4e2a\u7269\u4f53\u5230\u7b2c N \u4e2a\u7269\u4f53\u7684\u6700\u4f18\u89e3\". class Solution { public int mergeStones ( int [] a ){ int [] arr = new int [ a . length + 1 ] ; int N = a . length ; for ( int i = 1 ; i <= N ; i ++ ){ arr [ i ] += a [ i - 1 ] ; } for ( int i = 1 ; i <= N ; i ++ ){ arr [ i ] += arr [ i - 1 ] ; } //prefix sum int [][] dp = new int [ N + 1 ][ N + 1 ] ; for ( int l = 2 ; l <= N ; l ++ ){ //\u679a\u4e3e\u533a\u95f4\u957f\u5ea6 - i\u5230j\u4e4b\u95f4\u7684\u8ddd\u79bb for ( int i = 1 ; i + l <= N + 1 ; i ++ ){ //\u679a\u4e3e\u5de6\u7aef\u70b9 int j = i + l - 1 ; dp [ i ][ j ] = Integer . MAX_VALUE ; for ( int k = i ; k < j ; k ++ ){ //k\u662f\u5408\u5e76\u70b9, \u6b64\u5904\u679a\u4e3e\u5408\u5e76\u70b9, \u4ecei\u5230j\u4e4b\u95f4\u90fd\u8981\u8003\u8651. dp [ i ][ j ] = Math . min ( dp [ i ][ j ] , dp [ i ][ k ]+ dp [ k + 1 ][ j ]+ ( arr [ j ] - arr [ i - 1 ] )); } } } return dp [ 1 ][ N ] ; } } Minimum Cost to Merge Stones \u00b6 \u8fd9\u9053\u9898\u7ed9\u4e86\u6211\u4eecN\u5806\u77f3\u5934\uff0c\u6bcf\u5806\u77f3\u5934\u6709\u4e0d\u540c\u7684\u4e2a\u6570\uff0c\u8bf4\u6bcf\u6b21\u53ef\u4ee5\u5408\u5e76K\u5806\u77f3\u5934\uff0c\u5408\u5e76\u5806\u7684\u82b1\u8d39\u5c31\u662f\u77f3\u5934\u7684\u4e2a\u6570\uff0c\u7136\u540e\u95ee\u5982\u4f55\u5408\u5e76\uff0c\u624d\u80fd\u4f7f\u603b\u82b1\u8d39\u6700\u5c0f\u3002\u7136\u540e\u7ed9\u4e86\u4e00\u4e9b\u4f8b\u5b50\uff0c\u901a\u8fc7\u89c2\u5bdf\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u8f93\u5165\u90fd\u80fd\u6210\u529f\u5408\u6210\u4e00\u5806\uff0c\u6bd4\u5982\u4f8b\u5b502\uff0c\u65e0\u8bba\u5148\u548c\u5e76\u54ea\u4e09\u5806\uff0c\u6700\u7ec8\u90fd\u4f1a\u5269\u4e0b\u4e24\u5806\uff0c\u4ece\u800c\u65e0\u6cd5\u8fdb\u4e00\u6b65\u5408\u5e76\uff0c\u56e0\u4e3a K=3\uff0c\u6bcf\u6b21\u81f3\u5c11\u9700\u8981\u5408\u5e76\u4e09\u5806\u3002\u6211\u4eec\u5f53\u7136\u5e0c\u671b\u80fd\u5728\u5f00\u59cb\u5408\u5e76\u4e4b\u524d\u5c31\u80fd\u77e5\u9053\u6700\u7ec8\u662f\u5426\u80fd\u6210\u529f\u5408\u5e76\u4e3a\u4e00\u5806\uff0c\u800c\u4e0d\u662f\u7b97\u5230\u6700\u540e\u4e86\u624d\u53d1\u73b0\u767d\u5fd9\u4e86\u4e00\u573a\uff0c\u6240\u4ee5\u8981\u6765\u5206\u6790\u4e00\u4e0b\uff0c\u4ec0\u4e48\u65f6\u5019\u624d\u80fd\u6700\u7ec8\u5408\u5e76\u4e3a\u4e00\u5806\u3002\u518d\u6765\u770b\u770b\u4f8b\u5b502\uff0c\u6bcf\u6b21\u8981\u5c06\u4e09\u5806\u5408\u5e76\u4e3a\u4e00\u5806\uff0c\u90a3\u4e48\u5c31\u662f\u51cf\u5c11\u4e86\u4e24\u5806\uff0c\u800c\u8981\u4f7f\u5f97\u6700\u7ec8\u80fd\u591f\u5269\u4e0b\u4e00\u5806\uff0c\u5176\u4ed6\u7684\u90fd\u8981\u5408\u5e76\u8c03\uff0c\u5047\u8bbe\u539f\u6765\u5171\u6709n\u5806\uff0c\u53ea\u80fd\u5269\u4e0b\u4e00\u5806\uff0c\u5c31\u662f\u8bf4 n-1 \u5806\u90fd\u8981\u51cf\u6389\uff0c\u800c\u6bcf\u6b21\u53ea\u80fd\u51cf\u5c11 k-1 \u5806\uff0c\u6240\u4ee5\u53ea\u8981 n-1 \u80fd\u591f\u6574\u9664 k-1\u5373\u53ef\uff0c\u5373 (n-1)%(k-1) == 0 \u6210\u7acb\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63d0\u524d\u5224\u65ad\u4e86\u3002 \u597d\uff0c\u63a5\u4e0b\u6765\u7ee7\u7eed\uff0c\u8003\u8651\u5982\u4f55\u6765\u89e3\u9898\uff0c\u9996\u5148\u8981\u610f\u8bc6\u5230\u8fd9\u9053\u9898\u7684\u60c5\u51b5\u53ef\u80fd\u975e\u5e38\u591a\uff0c\u7528\u66b4\u529b\u641c\u7d22\u7684\u8bdd\u53ef\u80fd\u4f1a\u975e\u5e38\u7684\u590d\u6742\uff0c\u800c\u4e14\u5f53\u524d\u7684\u5408\u5e76\u65b9\u6cd5\u5b8c\u5168\u4f1a\u5f71\u54cd\u5230\u4e4b\u540e\u7684\u5408\u5e76\uff0c\u6240\u4ee5\u57fa\u672c\u662f\u8981\u653e\u5f03 Brute force \u7684\u60f3\u6cd5\u7684\u3002\u540c\u6837\uff0c\u8fd9\u9053\u9898\u4e5f\u4e0d\u80fd\u7528\u8d2a\u5a6a\u7b97\u6cd5\uff0c\u6bcf\u6b21\u90fd\u5408\u5e76\u77f3\u5b50\u4e2a\u6570\u6700\u5c11\u7684\u4e09\u5806\u4f1a\u6536\u655b\u5230\u5c40\u90e8\u5cf0\u503c\uff0c\u4e0d\u4e00\u5b9a\u662f\u5168\u5c40\u7684\uff0c\u6240\u4ee5\u53ea\u80fd\u53e6\u8f9f\u8e4a\u5f84\u3002\u89c2\u5bdf\u5230\u8fd9\u9898\u662f\u73a9\u6570\u7ec4\u7684\uff0c\u53c8\u662f\u6c42\u6781\u503c\u7684\u9898\u76ee\uff0c\u90a3\u4e48\u5c31\u8981\u796d\u51fa\u795e\u5668\u52a8\u6001\u89c4\u5212 Dynamic Programming \u4e86\uff0c\u5148\u6765\u8003\u8651\u5b9a\u4e49 dp \u6570\u7ec4\u5427\uff0c\u6700\u7b80\u5355\u76f4\u63a5\u7684\u65b9\u6cd5\u80af\u5b9a\u76f4\u63a5\u7528\u4e2a\u4e8c\u7ef4\u7684dp\u6570\u7ec4\u4e86\uff0c\u5176\u4e2d dp[i][j] \u8868\u793a\u5408\u5e76\u8303\u56f4 [i, j] \u5185\u7684\u77f3\u5934\u5806\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u6700\u7ec8 dp[0][n-1] \u5c31\u662f\u6240\u8981\u6c42\u7684\u503c\u3002\u770b\u5230\u4e86\u8bba\u575b\u4e0a\u6709\u4eba\u5b9a\u4e49\u4e86\u4e09\u7ef4\u7684 dp \u6570\u7ec4\uff0c\u628a\u6bcf\u6b21\u5408\u5e76\u7684\u5806\u6570K\u4e5f\u5f53\u4f5c\u4e00\u7ef4\u653e\u5165\u5230 dp \u6570\u7ec4\u4e2d\u4e86\uff0c\u5176\u5b9e\u535a\u4e3b\u89c9\u5f97\u4e0d\u662f\u5f88\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u50cf\u8fd9\u79cd\u5fc5\u987b\u8981\u5bf9 dp \u6570\u7ec4\u8fdb\u884c\u5347\u7ef4\u64cd\u4f5c\u7684\u662f\u5f53\u9898\u76ee\u4e2d\u6709\u9690\u85cf\u4fe1\u606f Hidden Information\uff0c\u800c\u5f53\u524d\u5b9a\u4e49\u7684 dp \u6570\u7ec4\u65e0\u6cd5\u91cd\u73b0\u5b50\u95ee\u9898\uff0c\u5373\u65e0\u6cd5\u627e\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u65f6\u5019\u5fc5\u987b\u8981\u505a\u7684 \u6839\u636e\u4e4b\u524d\u6253\u6c14\u7403\u7684\u7ecf\u9a8c\uff0c\u8981\u4ece\u5c0f\u533a\u95f4\u5f00\u59cb\u66f4\u65b0\uff0c\u591a\u5c0f\u5462\uff0c\u4eceK\u5f00\u59cb\uff0c\u56e0\u4e3a\u5c0f\u4e8eK\u7684\u533a\u95f4\u4e0d\u7528\u66f4\u65b0\uff0c\u5176 dp \u503c\u4e00\u5b9a\u4e3a0\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5fc5\u987b\u5408\u5e76K\u5806\u77f3\u5b50\uff0c\u6240\u4ee5\u533a\u95f4\u7684\u957f\u5ea6 len \u4eceK\u904d\u5386\u5230 n\u3002\u597d\uff0c\u533a\u95f4\u957f\u5ea6\u786e\u5b9a\u4e86\uff0c\u73b0\u5728\u8981\u786e\u5b9a\u8d77\u70b9\u4e86\uff0ci\u4ece0\u904d\u5386\u5230 n-len \u5373\u53ef\uff0c\u6709\u4e86\u533a\u95f4\u7684\u8d77\u70b9\u548c\u957f\u5ea6\uff0c\u53ef\u4ee5\u786e\u5b9a\u533a\u95f4\u7684\u7ec8\u70b9 j = i+len-1\u3002\u76ee\u6807\u5c31\u662f\u8981\u66f4\u65b0\u533a\u95f4 [i, j] \u7684dp\u503c\uff0c\u5148\u521d\u59cb\u5316\u4e3a\u6574\u578b\u6700\u5927\u503c\u3002\u63a5\u4e0b\u6765\u7684\u66f4\u65b0\u65b9\u6cd5\uff0c\u5373\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5c31\u662f\u672c\u9898\u6700\u5927\u7684\u96be\u70b9\u4e86\uff0c\u8981\u6c42\u533a\u95f4 [i, j] \u7684 dp \u503c\uff0c\u6ca1\u6cd5\u76f4\u63a5\u5f97\u5230\uff0c\u4f46\u662f\u7531\u4e8e\u662f\u4ece\u5c0f\u533a\u95f4\u5f00\u59cb\u66f4\u65b0\u7684\uff0c\u6240\u4ee5 suppose \u5176\u4e2d\u7684\u5c0f\u533a\u95f4\u7684 dp \u503c\u90fd\u5df2\u7ecf\u66f4\u65b0\u597d\u4e86\uff0c\u5c31\u53ef\u4ee5\u5c06\u5927\u533a\u95f4\u62c6\u6210\u4e24\u4e2a\u5c0f\u533a\u95f4\u6765\u66f4\u65b0\u4e86\u3002\u4e00\u822c\u6765\u8bb2\uff0c\u5c06\u4e00\u4e2a\u6570\u7ec4\u62c6\u6210\u4e24\u4e2a\u975e\u7a7a\u5b50\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u4f1a\u904d\u5386\u5176\u6240\u6709\u60c5\u51b5\uff0c\u6bd4\u5982 [1, 2, 3, 4]\uff0c\u4f1a\u62c6\u6210 [1] \u548c [2,3,4]\uff0c[1,2] \u548c [3,4], [1,2,3] \u548c [4]\u3002\u4f46\u662f\u8fd9\u9053\u9898\u7531\u4e8e\u5176\u7279\u6b8a\u6027\uff0c\u5e76\u4e0d\u9700\u8981\u904d\u5386\u6240\u6709\u7684\u62c6\u5206\u60c5\u51b5\uff0c\u56e0\u4e3a\u67d0\u4e9b\u533a\u95f4\u662f\u65e0\u6cd5\u901a\u8fc7\u5408\u5e76\u77f3\u5b50\u5806\u5f97\u5230\u7684\uff0c\u5c31\u62ff\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u8bf4\uff0c\u82e5 K=3\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u7528 [1,2] \u548c [3,4] \u6765\u66f4\u65b0\u6574\u4e2a\u533a\u95f4\uff0c\u5b83\u4eec\u90fd\u4e0d\u52303\u4e2a\uff0c\u65e0\u6cd5\u5408\u5e76\uff0c\u6240\u4ee5\u904d\u5386\u7684\u65f6\u5019\u6bcf\u6b21\u8df3\u8fc7 K-1 \u4e2a\u4f4d\u7f6e\u5373\u53ef\uff0c\u7528 t \u6765\u5206\u522b\u533a\u95f4 [i, j]\uff0c\u7136\u540e\u6bcf\u6b21 t += K-1 \u5373\u53ef\uff0c\u7528\u4e24\u4e2a\u5c0f\u533a\u95f4\u7684 dp \u503c\u6765\u66f4\u65b0\u6574\u4e2a\u533a\u95f4\u3002\u8fd9\u8fd8\u6ca1\u6709\u5b8c\uff0c\u5f53\u67d0\u4e2a\u5b50\u533a\u95f4\u6b63\u597d\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u5806\u77f3\u5b50\u7684\u65f6\u5019\uff0c\u5176 dp \u503c\u8981\u52a0\u4e0a\u8be5\u533a\u95f4\u6240\u6709\u7684\u77f3\u5b50\u6570\u3002\u4e3e\u4e2a\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982 [1, 2, 3]\uff0cK=3\uff0c\u90a3\u4e48\u6211\u4eec\u5206\u5272\u7684\u8bdd\uff0c\u53ea\u80fd\u7528 dp[0] [0]+ dp[1] [2] \u6765\u66f4\u65b0 dp[0] [2]\uff0c\u4f46\u662f dp[0] [0] \u548c dp[1] [2] \u5747\u4e3a0\uff0c\u56e0\u4e3a\u533a\u95f4\u957f\u5ea6\u5747\u5c0f\u4e8e3\uff0c\u90a3\u4e48\u6211\u4eec\u7684 dp[0][2] \u503c\u5c31\u65e0\u6cd5\u66f4\u65b0\u6210\u6b63\u786e\u7684\u503c\u4e86\uff0c\u8fd9\u4e09\u4e2a\u6570\u5b57\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u8981\u52a0\u4e0a\u533a\u95f4\u5185\u6240\u6709\u7684\u6570\u5b57\u4e4b\u548c\uff0c\u800c\u4e3a\u4e86\u5feb\u901f\u7684\u6c42\u5f97\u4efb\u610f\u533a\u95f4\b\u548c\uff0c\u91c7\u7528\u63d0\u524d\u5efa\u7acb\u7d2f\u52a0\u548c\u6570\u7ec4 sums \u7684\u65b9\u5f0f\uff0c\u6765\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\uff0c\u6240\u4ee5\u6574\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a dp[i][j] = min(dp[i][j], dp[i][t] + dp[t + 1][j]); -> (i <= t < j) dp[i][j] += sums[j + 1] - sums[i]; -> if ((j - i) % (K - 1) == 0) \u6709\u4e86\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a class Solution { public : int mergeStones ( vector < int >& stones , int K ) { int n = stones . size (); if (( n - 1 ) % ( K - 1 ) != 0 ) return -1 ; vector < int > prefix ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { prefix [ i ] = prefix [ i - 1 ] + stones [ i - 1 ]; } vector < vector < vector < int >>> f ( n , vector < vector < int >> ( n , vector < int > ( K + 1 , 0x3f3f3f3f ))); for ( int i = 0 ; i < n ; ++ i ) { f [ i ][ i ][ 1 ] = 0 ; } for ( int len = 2 ; len <= n ; ++ len ) { for ( int i = 0 ; i <= n - len ; ++ i ) { int j = i + len - 1 ; for ( int k = 2 ; k <= K ; ++ k ) { for ( int m = i ; m < j ; m += K - 1 ) { f [ i ][ j ][ k ] = min ( f [ i ][ j ][ k ], f [ i ][ m ][ 1 ] + f [ m + 1 ][ j ][ k - 1 ]); } } f [ i ][ j ][ 1 ] = f [ i ][ j ][ K ] + prefix [ j + 1 ] - prefix [ i ]; } } return f [ 0 ][ n - 1 ][ 1 ]; } };","title":"\u533a\u95f4DP"},{"location":"algorithm/dynamic_programing/%E5%8C%BA%E9%97%B4DP/#dp","text":"\u533a\u95f4DP\u7684\u7279\u5f81 : \u53ef\u4ee5\u4e24\u4e2a\u6216\u591a\u4e2a\u90e8\u5206\u8fdb\u884c\u6574\u5408, \u6216\u8005\u53cd\u8fc7\u6765\uff1b\u80fd\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u80fd\u4e24\u4e24\u5408\u5e76\u7684\u5f62\u5f0f. \u533a\u95f4DP\u7684\u6c42\u89e3 : \u5bf9**\u6574\u4e2a\u95ee\u9898\u8bbe\u6700\u4f18\u503c**\uff0c\u679a\u4e3e**\u5408\u5e76\u70b9**\uff0c\u5c06\u95ee\u9898\u5206\u89e3\u4e3a**\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206**\uff0c\u6700\u540e\u5408\u5e76\u4e24\u4e2a\u90e8\u5206\u7684\u6700\u4f18\u503c\u5f97\u5230\u539f\u95ee\u9898\u7684\u6700\u4f18\u503c\u3002 \u4e00\u822c\u7684\u65b9\u6cd5\u662f\u679a\u4e3e\u957f\u5ea6(\u6700\u5916\u5c42 L , 0 < L < N ), \u679a\u4e3e\u5de6\u7aef\u70b9(\u7b2c\u4e8c\u5c42 i , 0 < i < N-L ), \u4ee5\u6b64\u53ef\u786e\u5b9a\u53f3\u7aef\u70b9( j = i + L ), \u679a\u4e3e\u5408\u5e76\u70b9 ( i <= t < j ). \u4ec0\u4e48\u662f\u679a\u4e3e\u5408\u5e76\u70b9? \u597d\u6bd4\u6211\u8981\u5728\u4e00\u5757\u86cb\u7cd5\u7684\u7b2c i \u5398\u7c73\u5230\u7b2c j \u5398\u7c73\u76f4\u63a5\u5207\u4e00\u5200, \u53ef\u4ee5\u5207\u5728\u54ea\u91cc? \u5728 i~j \u4e4b\u95f4\u4e0b\u7684\u90a3\u4e00\u5200\u5c31\u662f\u5408\u5e76\u70b9, \u9700\u8981\u4e00\u4e2aloop\u6765\u679a\u4e3e.","title":"\u533a\u95f4DP"},{"location":"algorithm/dynamic_programing/%E5%8C%BA%E9%97%B4DP/#_1","text":"\u8bbe\u6709N\u5806\u77f3\u5b50\u6392\u6210\u4e00\u6392\uff0c\u5176\u7f16\u53f7\u4e3a1\uff0c2\uff0c3\uff0c\u2026\uff0cN\u3002 \u6bcf\u5806\u77f3\u5b50\u6709\u4e00\u5b9a\u7684\u8d28\u91cf\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6574\u6570\u6765\u63cf\u8ff0\uff0c\u73b0\u5728\u8981\u5c06\u8fd9N\u5806\u77f3\u5b50\u5408\u5e76\u6210\u4e3a\u4e00\u5806\u3002 \u6bcf\u6b21\u53ea\u80fd\u5408\u5e76\u76f8\u90bb\u7684**\u4e24\u5806**\uff0c\u5408\u5e76\u7684\u4ee3\u4ef7\u4e3a\u8fd9\u4e24\u5806\u77f3\u5b50\u7684\u8d28\u91cf\u4e4b\u548c\uff0c\u5408\u5e76\u540e\u4e0e\u8fd9\u4e24\u5806\u77f3\u5b50\u76f8\u90bb\u7684\u77f3\u5b50\u5c06\u548c\u65b0\u5806\u76f8\u90bb\uff0c\u5408\u5e76\u65f6\u7531\u4e8e\u9009\u62e9\u7684\u987a\u5e8f\u4e0d\u540c\uff0c\u5408\u5e76\u7684\u603b\u4ee3\u4ef7\u4e5f\u4e0d\u76f8\u540c\u3002 \u4f8b\u5982\u67094\u5806\u77f3\u5b50\u5206\u522b\u4e3a 1 3 5 2\uff0c \u6211\u4eec\u53ef\u4ee5\u5148\u5408\u5e761\u30012\u5806\uff0c\u4ee3\u4ef7\u4e3a4\uff0c\u5f97\u52304 5 2\uff0c \u53c8\u5408\u5e76 1\uff0c2\u5806\uff0c\u4ee3\u4ef7\u4e3a9\uff0c\u5f97\u52309 2 \uff0c\u518d\u5408\u5e76\u5f97\u523011\uff0c\u603b\u4ee3\u4ef7\u4e3a4+9+11=24\uff1b \u5982\u679c\u7b2c\u4e8c\u6b65\u662f\u5148\u5408\u5e762\uff0c3\u5806\uff0c\u5219\u4ee3\u4ef7\u4e3a7\uff0c\u5f97\u52304 7\uff0c\u6700\u540e\u4e00\u6b21\u5408\u5e76\u4ee3\u4ef7\u4e3a11\uff0c\u603b\u4ee3\u4ef7\u4e3a4+7+11=22\u3002 \u601d\u8def \u7ecf\u5178\u533a\u95f4DP. \u4e8c\u7ef4\u5f97\u76f8\u5f53\u6807\u51c6. \u8fd9\u9898\u4f1a\u5f88\u5bb9\u6613\u8bb0\u5fc6, \u56e0\u4e3a\u5b50\u95ee\u9898\u662f\"\u5408\u5e76\u7b2c i \u4e2a\u7269\u4f53\u5230\u7b2c j \u4e2a\u7269\u4f53\u7684\u6700\u4f18\u89e3\", \u800c\u539f\u95ee\u9898\u5219\u662f \"\u5df2\u5408\u5e76\u7b2c 1 \u4e2a\u7269\u4f53\u5230\u7b2c N \u4e2a\u7269\u4f53\u7684\u6700\u4f18\u89e3\". class Solution { public int mergeStones ( int [] a ){ int [] arr = new int [ a . length + 1 ] ; int N = a . length ; for ( int i = 1 ; i <= N ; i ++ ){ arr [ i ] += a [ i - 1 ] ; } for ( int i = 1 ; i <= N ; i ++ ){ arr [ i ] += arr [ i - 1 ] ; } //prefix sum int [][] dp = new int [ N + 1 ][ N + 1 ] ; for ( int l = 2 ; l <= N ; l ++ ){ //\u679a\u4e3e\u533a\u95f4\u957f\u5ea6 - i\u5230j\u4e4b\u95f4\u7684\u8ddd\u79bb for ( int i = 1 ; i + l <= N + 1 ; i ++ ){ //\u679a\u4e3e\u5de6\u7aef\u70b9 int j = i + l - 1 ; dp [ i ][ j ] = Integer . MAX_VALUE ; for ( int k = i ; k < j ; k ++ ){ //k\u662f\u5408\u5e76\u70b9, \u6b64\u5904\u679a\u4e3e\u5408\u5e76\u70b9, \u4ecei\u5230j\u4e4b\u95f4\u90fd\u8981\u8003\u8651. dp [ i ][ j ] = Math . min ( dp [ i ][ j ] , dp [ i ][ k ]+ dp [ k + 1 ][ j ]+ ( arr [ j ] - arr [ i - 1 ] )); } } } return dp [ 1 ][ N ] ; } }","title":"\u77f3\u5b50\u5408\u5e76"},{"location":"algorithm/dynamic_programing/%E5%8C%BA%E9%97%B4DP/#minimum-cost-to-merge-stones","text":"\u8fd9\u9053\u9898\u7ed9\u4e86\u6211\u4eecN\u5806\u77f3\u5934\uff0c\u6bcf\u5806\u77f3\u5934\u6709\u4e0d\u540c\u7684\u4e2a\u6570\uff0c\u8bf4\u6bcf\u6b21\u53ef\u4ee5\u5408\u5e76K\u5806\u77f3\u5934\uff0c\u5408\u5e76\u5806\u7684\u82b1\u8d39\u5c31\u662f\u77f3\u5934\u7684\u4e2a\u6570\uff0c\u7136\u540e\u95ee\u5982\u4f55\u5408\u5e76\uff0c\u624d\u80fd\u4f7f\u603b\u82b1\u8d39\u6700\u5c0f\u3002\u7136\u540e\u7ed9\u4e86\u4e00\u4e9b\u4f8b\u5b50\uff0c\u901a\u8fc7\u89c2\u5bdf\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u8f93\u5165\u90fd\u80fd\u6210\u529f\u5408\u6210\u4e00\u5806\uff0c\u6bd4\u5982\u4f8b\u5b502\uff0c\u65e0\u8bba\u5148\u548c\u5e76\u54ea\u4e09\u5806\uff0c\u6700\u7ec8\u90fd\u4f1a\u5269\u4e0b\u4e24\u5806\uff0c\u4ece\u800c\u65e0\u6cd5\u8fdb\u4e00\u6b65\u5408\u5e76\uff0c\u56e0\u4e3a K=3\uff0c\u6bcf\u6b21\u81f3\u5c11\u9700\u8981\u5408\u5e76\u4e09\u5806\u3002\u6211\u4eec\u5f53\u7136\u5e0c\u671b\u80fd\u5728\u5f00\u59cb\u5408\u5e76\u4e4b\u524d\u5c31\u80fd\u77e5\u9053\u6700\u7ec8\u662f\u5426\u80fd\u6210\u529f\u5408\u5e76\u4e3a\u4e00\u5806\uff0c\u800c\u4e0d\u662f\u7b97\u5230\u6700\u540e\u4e86\u624d\u53d1\u73b0\u767d\u5fd9\u4e86\u4e00\u573a\uff0c\u6240\u4ee5\u8981\u6765\u5206\u6790\u4e00\u4e0b\uff0c\u4ec0\u4e48\u65f6\u5019\u624d\u80fd\u6700\u7ec8\u5408\u5e76\u4e3a\u4e00\u5806\u3002\u518d\u6765\u770b\u770b\u4f8b\u5b502\uff0c\u6bcf\u6b21\u8981\u5c06\u4e09\u5806\u5408\u5e76\u4e3a\u4e00\u5806\uff0c\u90a3\u4e48\u5c31\u662f\u51cf\u5c11\u4e86\u4e24\u5806\uff0c\u800c\u8981\u4f7f\u5f97\u6700\u7ec8\u80fd\u591f\u5269\u4e0b\u4e00\u5806\uff0c\u5176\u4ed6\u7684\u90fd\u8981\u5408\u5e76\u8c03\uff0c\u5047\u8bbe\u539f\u6765\u5171\u6709n\u5806\uff0c\u53ea\u80fd\u5269\u4e0b\u4e00\u5806\uff0c\u5c31\u662f\u8bf4 n-1 \u5806\u90fd\u8981\u51cf\u6389\uff0c\u800c\u6bcf\u6b21\u53ea\u80fd\u51cf\u5c11 k-1 \u5806\uff0c\u6240\u4ee5\u53ea\u8981 n-1 \u80fd\u591f\u6574\u9664 k-1\u5373\u53ef\uff0c\u5373 (n-1)%(k-1) == 0 \u6210\u7acb\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u63d0\u524d\u5224\u65ad\u4e86\u3002 \u597d\uff0c\u63a5\u4e0b\u6765\u7ee7\u7eed\uff0c\u8003\u8651\u5982\u4f55\u6765\u89e3\u9898\uff0c\u9996\u5148\u8981\u610f\u8bc6\u5230\u8fd9\u9053\u9898\u7684\u60c5\u51b5\u53ef\u80fd\u975e\u5e38\u591a\uff0c\u7528\u66b4\u529b\u641c\u7d22\u7684\u8bdd\u53ef\u80fd\u4f1a\u975e\u5e38\u7684\u590d\u6742\uff0c\u800c\u4e14\u5f53\u524d\u7684\u5408\u5e76\u65b9\u6cd5\u5b8c\u5168\u4f1a\u5f71\u54cd\u5230\u4e4b\u540e\u7684\u5408\u5e76\uff0c\u6240\u4ee5\u57fa\u672c\u662f\u8981\u653e\u5f03 Brute force \u7684\u60f3\u6cd5\u7684\u3002\u540c\u6837\uff0c\u8fd9\u9053\u9898\u4e5f\u4e0d\u80fd\u7528\u8d2a\u5a6a\u7b97\u6cd5\uff0c\u6bcf\u6b21\u90fd\u5408\u5e76\u77f3\u5b50\u4e2a\u6570\u6700\u5c11\u7684\u4e09\u5806\u4f1a\u6536\u655b\u5230\u5c40\u90e8\u5cf0\u503c\uff0c\u4e0d\u4e00\u5b9a\u662f\u5168\u5c40\u7684\uff0c\u6240\u4ee5\u53ea\u80fd\u53e6\u8f9f\u8e4a\u5f84\u3002\u89c2\u5bdf\u5230\u8fd9\u9898\u662f\u73a9\u6570\u7ec4\u7684\uff0c\u53c8\u662f\u6c42\u6781\u503c\u7684\u9898\u76ee\uff0c\u90a3\u4e48\u5c31\u8981\u796d\u51fa\u795e\u5668\u52a8\u6001\u89c4\u5212 Dynamic Programming \u4e86\uff0c\u5148\u6765\u8003\u8651\u5b9a\u4e49 dp \u6570\u7ec4\u5427\uff0c\u6700\u7b80\u5355\u76f4\u63a5\u7684\u65b9\u6cd5\u80af\u5b9a\u76f4\u63a5\u7528\u4e2a\u4e8c\u7ef4\u7684dp\u6570\u7ec4\u4e86\uff0c\u5176\u4e2d dp[i][j] \u8868\u793a\u5408\u5e76\u8303\u56f4 [i, j] \u5185\u7684\u77f3\u5934\u5806\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u6700\u7ec8 dp[0][n-1] \u5c31\u662f\u6240\u8981\u6c42\u7684\u503c\u3002\u770b\u5230\u4e86\u8bba\u575b\u4e0a\u6709\u4eba\u5b9a\u4e49\u4e86\u4e09\u7ef4\u7684 dp \u6570\u7ec4\uff0c\u628a\u6bcf\u6b21\u5408\u5e76\u7684\u5806\u6570K\u4e5f\u5f53\u4f5c\u4e00\u7ef4\u653e\u5165\u5230 dp \u6570\u7ec4\u4e2d\u4e86\uff0c\u5176\u5b9e\u535a\u4e3b\u89c9\u5f97\u4e0d\u662f\u5f88\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u50cf\u8fd9\u79cd\u5fc5\u987b\u8981\u5bf9 dp \u6570\u7ec4\u8fdb\u884c\u5347\u7ef4\u64cd\u4f5c\u7684\u662f\u5f53\u9898\u76ee\u4e2d\u6709\u9690\u85cf\u4fe1\u606f Hidden Information\uff0c\u800c\u5f53\u524d\u5b9a\u4e49\u7684 dp \u6570\u7ec4\u65e0\u6cd5\u91cd\u73b0\u5b50\u95ee\u9898\uff0c\u5373\u65e0\u6cd5\u627e\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u65f6\u5019\u5fc5\u987b\u8981\u505a\u7684 \u6839\u636e\u4e4b\u524d\u6253\u6c14\u7403\u7684\u7ecf\u9a8c\uff0c\u8981\u4ece\u5c0f\u533a\u95f4\u5f00\u59cb\u66f4\u65b0\uff0c\u591a\u5c0f\u5462\uff0c\u4eceK\u5f00\u59cb\uff0c\u56e0\u4e3a\u5c0f\u4e8eK\u7684\u533a\u95f4\u4e0d\u7528\u66f4\u65b0\uff0c\u5176 dp \u503c\u4e00\u5b9a\u4e3a0\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5fc5\u987b\u5408\u5e76K\u5806\u77f3\u5b50\uff0c\u6240\u4ee5\u533a\u95f4\u7684\u957f\u5ea6 len \u4eceK\u904d\u5386\u5230 n\u3002\u597d\uff0c\u533a\u95f4\u957f\u5ea6\u786e\u5b9a\u4e86\uff0c\u73b0\u5728\u8981\u786e\u5b9a\u8d77\u70b9\u4e86\uff0ci\u4ece0\u904d\u5386\u5230 n-len \u5373\u53ef\uff0c\u6709\u4e86\u533a\u95f4\u7684\u8d77\u70b9\u548c\u957f\u5ea6\uff0c\u53ef\u4ee5\u786e\u5b9a\u533a\u95f4\u7684\u7ec8\u70b9 j = i+len-1\u3002\u76ee\u6807\u5c31\u662f\u8981\u66f4\u65b0\u533a\u95f4 [i, j] \u7684dp\u503c\uff0c\u5148\u521d\u59cb\u5316\u4e3a\u6574\u578b\u6700\u5927\u503c\u3002\u63a5\u4e0b\u6765\u7684\u66f4\u65b0\u65b9\u6cd5\uff0c\u5373\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u5c31\u662f\u672c\u9898\u6700\u5927\u7684\u96be\u70b9\u4e86\uff0c\u8981\u6c42\u533a\u95f4 [i, j] \u7684 dp \u503c\uff0c\u6ca1\u6cd5\u76f4\u63a5\u5f97\u5230\uff0c\u4f46\u662f\u7531\u4e8e\u662f\u4ece\u5c0f\u533a\u95f4\u5f00\u59cb\u66f4\u65b0\u7684\uff0c\u6240\u4ee5 suppose \u5176\u4e2d\u7684\u5c0f\u533a\u95f4\u7684 dp \u503c\u90fd\u5df2\u7ecf\u66f4\u65b0\u597d\u4e86\uff0c\u5c31\u53ef\u4ee5\u5c06\u5927\u533a\u95f4\u62c6\u6210\u4e24\u4e2a\u5c0f\u533a\u95f4\u6765\u66f4\u65b0\u4e86\u3002\u4e00\u822c\u6765\u8bb2\uff0c\u5c06\u4e00\u4e2a\u6570\u7ec4\u62c6\u6210\u4e24\u4e2a\u975e\u7a7a\u5b50\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u4f1a\u904d\u5386\u5176\u6240\u6709\u60c5\u51b5\uff0c\u6bd4\u5982 [1, 2, 3, 4]\uff0c\u4f1a\u62c6\u6210 [1] \u548c [2,3,4]\uff0c[1,2] \u548c [3,4], [1,2,3] \u548c [4]\u3002\u4f46\u662f\u8fd9\u9053\u9898\u7531\u4e8e\u5176\u7279\u6b8a\u6027\uff0c\u5e76\u4e0d\u9700\u8981\u904d\u5386\u6240\u6709\u7684\u62c6\u5206\u60c5\u51b5\uff0c\u56e0\u4e3a\u67d0\u4e9b\u533a\u95f4\u662f\u65e0\u6cd5\u901a\u8fc7\u5408\u5e76\u77f3\u5b50\u5806\u5f97\u5230\u7684\uff0c\u5c31\u62ff\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u8bf4\uff0c\u82e5 K=3\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u7528 [1,2] \u548c [3,4] \u6765\u66f4\u65b0\u6574\u4e2a\u533a\u95f4\uff0c\u5b83\u4eec\u90fd\u4e0d\u52303\u4e2a\uff0c\u65e0\u6cd5\u5408\u5e76\uff0c\u6240\u4ee5\u904d\u5386\u7684\u65f6\u5019\u6bcf\u6b21\u8df3\u8fc7 K-1 \u4e2a\u4f4d\u7f6e\u5373\u53ef\uff0c\u7528 t \u6765\u5206\u522b\u533a\u95f4 [i, j]\uff0c\u7136\u540e\u6bcf\u6b21 t += K-1 \u5373\u53ef\uff0c\u7528\u4e24\u4e2a\u5c0f\u533a\u95f4\u7684 dp \u503c\u6765\u66f4\u65b0\u6574\u4e2a\u533a\u95f4\u3002\u8fd9\u8fd8\u6ca1\u6709\u5b8c\uff0c\u5f53\u67d0\u4e2a\u5b50\u533a\u95f4\u6b63\u597d\u53ef\u4ee5\u5408\u5e76\u4e3a\u4e00\u5806\u77f3\u5b50\u7684\u65f6\u5019\uff0c\u5176 dp \u503c\u8981\u52a0\u4e0a\u8be5\u533a\u95f4\u6240\u6709\u7684\u77f3\u5b50\u6570\u3002\u4e3e\u4e2a\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982 [1, 2, 3]\uff0cK=3\uff0c\u90a3\u4e48\u6211\u4eec\u5206\u5272\u7684\u8bdd\uff0c\u53ea\u80fd\u7528 dp[0] [0]+ dp[1] [2] \u6765\u66f4\u65b0 dp[0] [2]\uff0c\u4f46\u662f dp[0] [0] \u548c dp[1] [2] \u5747\u4e3a0\uff0c\u56e0\u4e3a\u533a\u95f4\u957f\u5ea6\u5747\u5c0f\u4e8e3\uff0c\u90a3\u4e48\u6211\u4eec\u7684 dp[0][2] \u503c\u5c31\u65e0\u6cd5\u66f4\u65b0\u6210\u6b63\u786e\u7684\u503c\u4e86\uff0c\u8fd9\u4e09\u4e2a\u6570\u5b57\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u8981\u52a0\u4e0a\u533a\u95f4\u5185\u6240\u6709\u7684\u6570\u5b57\u4e4b\u548c\uff0c\u800c\u4e3a\u4e86\u5feb\u901f\u7684\u6c42\u5f97\u4efb\u610f\u533a\u95f4\b\u548c\uff0c\u91c7\u7528\u63d0\u524d\u5efa\u7acb\u7d2f\u52a0\u548c\u6570\u7ec4 sums \u7684\u65b9\u5f0f\uff0c\u6765\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\uff0c\u6240\u4ee5\u6574\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a dp[i][j] = min(dp[i][j], dp[i][t] + dp[t + 1][j]); -> (i <= t < j) dp[i][j] += sums[j + 1] - sums[i]; -> if ((j - i) % (K - 1) == 0) \u6709\u4e86\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a class Solution { public : int mergeStones ( vector < int >& stones , int K ) { int n = stones . size (); if (( n - 1 ) % ( K - 1 ) != 0 ) return -1 ; vector < int > prefix ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { prefix [ i ] = prefix [ i - 1 ] + stones [ i - 1 ]; } vector < vector < vector < int >>> f ( n , vector < vector < int >> ( n , vector < int > ( K + 1 , 0x3f3f3f3f ))); for ( int i = 0 ; i < n ; ++ i ) { f [ i ][ i ][ 1 ] = 0 ; } for ( int len = 2 ; len <= n ; ++ len ) { for ( int i = 0 ; i <= n - len ; ++ i ) { int j = i + len - 1 ; for ( int k = 2 ; k <= K ; ++ k ) { for ( int m = i ; m < j ; m += K - 1 ) { f [ i ][ j ][ k ] = min ( f [ i ][ j ][ k ], f [ i ][ m ][ 1 ] + f [ m + 1 ][ j ][ k - 1 ]); } } f [ i ][ j ][ 1 ] = f [ i ][ j ][ K ] + prefix [ j + 1 ] - prefix [ i ]; } } return f [ 0 ][ n - 1 ][ 1 ]; } };","title":"Minimum Cost to Merge Stones"},{"location":"algorithm/dynamic_programing/%E6%A0%91%E5%BD%A2DP/","text":"\u6c42\u6811\u4e0a\u6700\u957f\u94fe\uff08\u6216\u8005\u8bf4\u6811\u7684\u76f4\u5f84\u3001\u6811\u4e0a\u8ddd\u79bb\u6700\u8fdc\u7684\u4e24\u70b9\u8ddd\u79bb\uff0c\u6811\u4e2d\u6240\u6709\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u7684\u6700\u5927\u503c\uff09 1.\u6811\u5f62DP\uff08\u53ef\u4ee5\u6709\u6548\u5904\u7406\u8d1f\u8fb9\u6743\uff09 2.\u4e24\u6b21dfs\u6216bfs\uff08\u65e0\u6cd5\u5904\u7406\u8d1f\u8fb9\u6743\uff09 1.\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a \u00b6 \u6811\u4e2d\u4e0d\u76f8\u90bb\u4e24\u70b9\u6700\u5927\u503c #include <bits/stdc++.h> using namespace std ; const int MAX = 6010 ; int ne [ MAX ], e [ MAX ], idx , h [ MAX ]; int f [ MAX ][ 2 ], w [ MAX ]; bool sta [ MAX ]; void add ( int a , int b ) { e [ idx ] = b , ne [ idx ] = h [ a ], h [ a ] = idx ++ ; } void dfs ( int u ) { f [ u ][ 1 ] = w [ u ]; for ( int i = h [ u ]; ~ i ; i = ne [ i ]) { int j = e [ i ]; dfs ( j ); f [ u ][ 0 ] += max ( f [ j ][ 0 ], f [ j ][ 1 ]); f [ u ][ 1 ] += f [ j ][ 0 ]; } } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; memset ( h , -1 , sizeof ( h )); for ( int i = 0 ; i < n -1 ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); add ( b , a ); sta [ a ] = true ; } int root = 1 ; while ( sta [ root ]) root ++ ; dfs ( root ); cout << max ( f [ root ][ 0 ], f [ root ][ 1 ]) << endl ; } \u6811\u4e0a\u5b50\u94fe \u00b6 \u5e26\u8d1f\u6743\u7684\u6811\u7684\u6700\u957f\u76f4\u5f84 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int MAX = 2e5 + 10 ; const int INF = 0x3f3f3f3f ; int ne [ MAX ], e [ MAX ], h [ MAX ], idx ; int n ; ll w [ MAX ], dp [ MAX ]; ll ans =- INF ; void add ( int a , int b ) { e [ idx ] = b , ne [ idx ] = h [ a ], h [ a ] = idx ++ ; } void dfs ( int u , int pre ) { dp [ u ] = w [ u ]; ans = max ( ans , dp [ u ]); for ( int i = h [ u ]; ~ i ; i = ne [ i ]) { int j = e [ i ]; if ( j == pre ) //\u5df2\u7ecf\u8bbf\u95ee\u8fc7 continue ; dfs ( j , u ); ans = max ( ans , dp [ j ] + dp [ u ]); //\u9009\u51fa\u6700\u957f\u53f6\u5b50\u94fe dp [ u ] = max ( dp [ u ], dp [ j ] + w [ u ]); //\u6700\u957f\u53f6\u5b50\u94fe\u53ef\u4ee5\u7ee7\u7eed\u4e0a\u4f20\u66f4\u65b0\u7b54\u6848 } } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; memset ( h , -1 , sizeof h ); for ( int i = 0 ; i < n -1 ; i ++ ) { int a , b ; cin >> a >> b ; add ( a , b ); add ( b , a ); } dfs ( 1 , -1 ); cout << ans << endl ; }","title":"\u6811\u5f62DP"},{"location":"algorithm/dynamic_programing/%E6%A0%91%E5%BD%A2DP/#1","text":"\u6811\u4e2d\u4e0d\u76f8\u90bb\u4e24\u70b9\u6700\u5927\u503c #include <bits/stdc++.h> using namespace std ; const int MAX = 6010 ; int ne [ MAX ], e [ MAX ], idx , h [ MAX ]; int f [ MAX ][ 2 ], w [ MAX ]; bool sta [ MAX ]; void add ( int a , int b ) { e [ idx ] = b , ne [ idx ] = h [ a ], h [ a ] = idx ++ ; } void dfs ( int u ) { f [ u ][ 1 ] = w [ u ]; for ( int i = h [ u ]; ~ i ; i = ne [ i ]) { int j = e [ i ]; dfs ( j ); f [ u ][ 0 ] += max ( f [ j ][ 0 ], f [ j ][ 1 ]); f [ u ][ 1 ] += f [ j ][ 0 ]; } } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; memset ( h , -1 , sizeof ( h )); for ( int i = 0 ; i < n -1 ; i ++ ) { int a , b ; scanf ( \"%d%d\" , & a , & b ); add ( b , a ); sta [ a ] = true ; } int root = 1 ; while ( sta [ root ]) root ++ ; dfs ( root ); cout << max ( f [ root ][ 0 ], f [ root ][ 1 ]) << endl ; }","title":"1.\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a"},{"location":"algorithm/dynamic_programing/%E6%A0%91%E5%BD%A2DP/#_1","text":"\u5e26\u8d1f\u6743\u7684\u6811\u7684\u6700\u957f\u76f4\u5f84 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int MAX = 2e5 + 10 ; const int INF = 0x3f3f3f3f ; int ne [ MAX ], e [ MAX ], h [ MAX ], idx ; int n ; ll w [ MAX ], dp [ MAX ]; ll ans =- INF ; void add ( int a , int b ) { e [ idx ] = b , ne [ idx ] = h [ a ], h [ a ] = idx ++ ; } void dfs ( int u , int pre ) { dp [ u ] = w [ u ]; ans = max ( ans , dp [ u ]); for ( int i = h [ u ]; ~ i ; i = ne [ i ]) { int j = e [ i ]; if ( j == pre ) //\u5df2\u7ecf\u8bbf\u95ee\u8fc7 continue ; dfs ( j , u ); ans = max ( ans , dp [ j ] + dp [ u ]); //\u9009\u51fa\u6700\u957f\u53f6\u5b50\u94fe dp [ u ] = max ( dp [ u ], dp [ j ] + w [ u ]); //\u6700\u957f\u53f6\u5b50\u94fe\u53ef\u4ee5\u7ee7\u7eed\u4e0a\u4f20\u66f4\u65b0\u7b54\u6848 } } int main () { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) cin >> w [ i ]; memset ( h , -1 , sizeof h ); for ( int i = 0 ; i < n -1 ; i ++ ) { int a , b ; cin >> a >> b ; add ( a , b ); add ( b , a ); } dfs ( 1 , -1 ); cout << ans << endl ; }","title":"\u6811\u4e0a\u5b50\u94fe"},{"location":"algorithm/dynamic_programing/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/","text":"\u9884\u5907\u77e5\u8bc6 \u00b6 \u4f4d\u8fd0\u7b97 \u00b6 \u5e38\u7528\u7684\u8fd0\u7b97\u7b26\u5171 6 \u79cd\uff0c\u5206\u522b\u4e3a\u4e0e\uff08 & \uff09\u3001\u6216\uff08 | \uff09\u3001\u5f02\u6216\uff08 ^ \uff09\u3001\u53d6\u53cd\uff08 ~ \uff09\u3001\u5de6\u79fb\uff08 << \uff09\u548c\u53f3\u79fb\uff08 >> \uff09 \u2019&\u2019\u7b26\u53f7\uff0cx&y\uff0c\u4f1a\u5c06\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u5728\u4e8c\u8fdb\u5236\u4e0b\u8fdb\u884c\u4e0e\u8fd0\u7b97(\u90fd1\u4e3a1\uff0c\u5176\u4f59\u4e3a0\uff09 \u7136\u540e\u8fd4\u56de\u5176\u5341\u8fdb\u5236\u4e0b\u7684\u503c\u3002\u4f8b\u59823(11)&2(10)=2(10)\u3002 \u2019|\u2019\u7b26\u53f7\uff0cx|y\uff0c\u4f1a\u5c06\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u5728\u4e8c\u8fdb\u5236\u4e0b\u8fdb\u884c\u6216\u8fd0\u7b97\uff08\u90fd0\u4e3a0\uff0c\u5176\u4f59\u4e3a1\uff09 \u7136\u540e\u8fd4\u56de\u5176\u5341\u8fdb\u5236\u4e0b\u7684\u503c\u3002\u4f8b\u59823(11)|2(10)=3(11)\u3002 \u2019 ^ \u2019\u7b26\u53f7\uff0cx^y\uff0c\u4f1a\u5c06\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u5728\u4e8c\u8fdb\u5236\u4e0b\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff08\u4e0d\u540c\u4e3a1\uff0c\u5176\u4f59 \u4e3a0\uff09\u7136\u540e\u8fd4\u56de\u5176\u5341\u8fdb\u5236\u4e0b\u7684\u503c\u3002\u4f8b\u59823(11)^2(10)=1(01)\u3002 \u2019 ~ \u2019\u7b26\u53f7\uff0c ~ x\uff0c\u6309\u4f4d\u53d6\u53cd\u3002\u4f8b\u5982~101=010\u3002 \u2019<<\u2019\u7b26\u53f7\uff0c\u5de6\u79fb\u64cd\u4f5c\uff0cx<<2\uff0c\u5c06x\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\u5411\u5de6\u79fb\u52a8\u4e24\u4f4d\uff0c\u6700\u53f3\u8fb9\u75280\u586b\u5145\uff0cx<<2\u76f8\u5f53\u4e8e\u8ba9x\u4e58\u4ee54\u3002 \u2019>>\u2019\u7b26\u53f7\uff0c\u662f\u53f3\u79fb\u64cd\u4f5c\uff0cx>>1\uff0c\u5c06x\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\u5411\u53f3\u79fb\u52a8\u4e24\u4f4d\uff0c\u6700\u5de6\u8fb9\u75280\u586b\u5145\uff0c\u76f8\u5f53\u4e8e\u7ed9x/2\uff0c\u53bb\u6389x\u4e8c\u8fdb\u5236\u4e0b\u7684\u6700\u53f3\u4e00\u4f4d\u3002 \u5e38\u89c1\u7684\u4e00\u4e9b\u4f4d\u8fd0\u7b97 \u00b6 1.\u5224\u65ad\u4e00\u4e2a\u6570\u5b57x\u4e8c\u8fdb\u5236\u4e0b\u7b2ci\u4f4d\u662f\u4e0d\u662f\u7b49\u4e8e1\u3002 if( ( (1<<(i\u22121)) & x ) > 0 ) \u539f\u7406:1\u5de6\u79fbi - 1\u4f4d \u6210\u4e3a 0000010000\uff08\u5176\u4e2di\u4f4d\u7b2ci\u4f4d\uff09 \u901a\u8fc7\u4e0e\u8fd0\u7b97\u4ece\u800c\u5f97\u77e5\u7b2ci\u4f4d\u662f\u5426\u4e3a1 2.\u5c06\u4e00\u4e2a\u6570\u5b57x\u4e8c\u8fdb\u5236\u4e0b\u7b2ci\u4f4d\u66f4\u6539\u62101\u3002 x = ( 1<<( i - 1 ) | x \u539f\u7406:1\u5de6\u79fbi - 1\u4f4d \u6210\u4e3a 0000010000\uff08\u5176\u4e2di\u4f4d\u7b2ci\u4f4d\uff09 \u901a\u8fc7\u6216\u8fd0\u7b97\u4ece\u800c\u5f97\u77e5\u7b2ci\u4f4d\u662f\u5426\u4e3a1 3.\u5c06\u4e00\u4e2a\u6570\u5b57x\u4e8c\u8fdb\u5236\u4e0b\u7b2ci\u4f4d\u66f4\u6539\u62100\u3002 x = x & ~(1 << ( i \u2212 1 ) ) \u539f\u7406:\u901a\u8fc7\u5bf9(1 << ( i \u2212 1 ) )\u8fdb\u884c\u53d6\u53cd \u5f97\u5230 1111101111(0 \u4e3a\u7b2ci\u4f4d) \u518d\u8fdb\u884c\u4e0e\u8fd0\u7b97\u5f97\u5230\u7b2ci\u4f4d\u4e3a1\u7684\u6570\u5b57 4.\u628a\u4e00\u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b\u6700\u9760\u53f3\u7684\u7b2c\u4e00\u4e2a1\u53bb\u6389\u3002 x = x & ( x\u2212 1 ) \u539f\u7406:\u5047\u8bbe\u6570\u5b57x\u4e3a11111(2) \u5219x - 1 \u4e3a 11110(2) \u4e0e\u8fd0\u7b97\u5219\u4f1a\u628a\u6700\u540e\u4e00\u4f4d1\u53bb\u6389, \u5f97\u5230\u6570\u5b5711110 \u82e5\u6570\u5b57x\u4e3a11100(2) \u5219x - 1\u4e3a11011(2) \u4e0e\u8fd0\u7b97\u5f97\u5230 11000 \u5f88\u663e\u7136\u5bf9\u4e8e\u4e00\u4e32\u4e8c\u8fdb\u5236\u6570 \u5176\u6700\u540e\u4e00\u4f4d\u53ef\u5206\u4e3a0/1\u4e24\u79cd\u60c5\u51b5,\u800c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u524d\u540e\u90e8\u5206: \u4e0d\u53d8\u7684\u90e8\u5206+\u53d8\u7684\u90e8\u5206 \u4f8b\u5982: x = 110111(2) \u53ef\u5206\u4e3a: 110 111\u4e24\u90e8\u5206 x - 1 \u5219\u4e3a 110 110 \u2003 \u2003x = 110100(2) \u53ef\u5206\u4e3a: 110 100\u4e24\u90e8\u5206 x - 1 \u5219\u4e3a 110 011 \u540e\u9762\u53d8\u7684\u90e8\u5206\u901a\u8fc7\u4e0e\u8fd0\u7b97\u5b9e\u73b0\u5b9e\u73b0\u53bb\u6389\u9760\u53f3\u7684\u7b2c\u4e00\u4e2a1 \u6ce8:\u8fd9\u91cc\u7684\u5206\u6cd5\u5e76\u65e0\u4ec0\u4e48\u8981\u6c42, 110111(2) \u5206\u4e3a 1101 11\u4e24\u90e8\u5206\u4e5f\u53ef. \u6240\u8c13\u7684\u5206\u6210\u4e24\u90e8\u5206\u4e5f\u53ea\u662f\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5b50\u53ef\u4ee5\u53bb\u6389\u9760\u53f3\u7684\u7b2c\u4e00\u4e2a1,\u6709\u5176\u4ed6\u7684\u7406\u89e3\u65b9\u6cd5\u4ea6\u53ef \u8fd9\u91cc\u53ea\u6458\u8981\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u4f4d\u8fd0\u7b97,\u611f\u5174\u8da3\u53ef\u81ea\u884c\u67e5\u8be2\u5176\u4ed6\u8fd0\u7b97 \u6982\u8ff0 \u00b6 \u72b6\u538bDP\u662f\u5229\u7528\u8ba1\u7b97\u673a\u4e8c\u8fdb\u5236\u7684\u6027\u8d28\u6765\u63cf\u8ff0\u72b6\u6001\u7684\u4e00\u79cdDP\u65b9\u5f0f\u3002\u72b6\u538b\u7ecf\u5e38\u548cBFS\u53caDP\u8fde\u7528\u3002 \u4f7f\u7528\u4e8c\u8fdb\u5236\u6570\u679a\u4e3e\u51fa\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u72b6\u6001,\u901a\u8fc7\u4e0d\u540c\u72b6\u6001\u7684\u8f6c\u79fb\u4ece\u800c\u5f97\u5230\u6700\u4f18\u89e3 \u53ef\u4ee5\u770b\u5f97\u51fa\u4f7f\u7528\u4e8c\u8fdb\u5236\u6570\u63cf\u8ff0\u72b6\u6001\u5f88\u5bb9\u6613\u8ba9\u72b6\u6001\u6570\u6210\u6307\u6570\u6001\u52bf\u589e\u957f,\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u5bb9\u6613\u5347\u9ad8,\u4f18\u5316\u53ef\u4ee5\u901a\u8fc7\u6761\u4ef6\u4f18\u5316\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb,\u4ece\u800c\u964d\u4f4e\u590d\u6742\u5ea6 \u4f8b\u9898\u8bb2\u89e3: \u9a91\u58eb(P1896 [SCOI2005]\u4e92\u4e0d\u4fb5\u72af) \u9898\u76ee\u63cf\u8ff0 \u5728N\u00d7N\u7684\u68cb\u76d8\u91cc\u9762\u653eK\u4e2a\u56fd\u738b\uff0c\u4f7f\u4ed6\u4eec\u4e92\u4e0d\u653b\u51fb\uff0c\u5171\u6709\u591a\u5c11\u79cd\u6446\u653e\u65b9\u6848\u3002\u56fd\u738b\u80fd\u653b\u51fb\u5230\u5b83\u4e0a\u4e0b\u5de6\u53f3\uff0c\u4ee5\u53ca\u5de6\u4e0a\u5de6\u4e0b\u53f3\u4e0a\u53f3\u4e0b\u516b\u4e2a\u65b9\u5411\u4e0a\u9644\u8fd1\u7684\u5404\u4e00\u4e2a\u683c\u5b50\uff0c\u51718\u4e2a\u683c\u5b50\u3002 \u8f93\u5165\u683c\u5f0f \u53ea\u6709\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6570N\uff0cK \uff08 1 <=N <=9, 0 <= K <= N * N\uff09 \u8f93\u51fa\u683c\u5f0f \u6240\u5f97\u7684\u65b9\u6848\u6570 \u8f93\u5165\u8f93\u51fa\u6837\u4f8b \u8f93\u5165 3 2 \u8f93\u51fa 16 \u89e3\u6790:\u72b6\u538bDP\u662f\u5229\u7528\u8ba1\u7b97\u673a\u4e8c\u8fdb\u5236\u7684\u6027\u8d28\u6765\u63cf\u8ff0\u72b6\u6001\u7684\u4e00\u79cdDP\u65b9\u5f0f,\u5728\u672c\u9898\u4e2d\u7528\u4e00\u4e32\u4e8c\u8fdb\u5236\u6570\u6765\u63cf\u8ff0\u4e00\u884c\u7684\u72b6\u6001 \u4f8b\u5982\u5728\u4e00\u4e2a4\u884c4\u5217\u7684\u683c\u5b50\u4e2d\u7b2c\u4e8c\u884c\u7684\u72b6\u6001\u662f1001 \u4ee3\u8868\u7b2c\u4e8c\u884c\u7684\u7b2c\u4e00,\u7b2c\u56db\u4e2a\u653e\u4e86\u5206\u522b\u653e\u4e86\u4e00\u4e2a\u56fd\u738b \u6211\u4eec\u600e\u4e48\u7528DP\u7684\u601d\u7ef4\u6765\u601d\u8003\u8fd9\u9053\u9898\u5462? \u6211\u4eec\u5f88\u6e05\u695aDP\u7684\u7279\u5f81\u662f\u5c06\u4e00\u4e2a\u5927\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u76f8\u4f3c\u7684\u5b50\u95ee\u9898,\u5e76\u4e14\u95ee\u9898\u7684\u89e3\u51b3\u65e0\u540e\u6548\u6027,\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u5b50\u95ee\u9898\u7684\u51b3\u7b56\u4e4b\u540e\u4e0d\u4f1a\u518d\u540e\u7eed\u7684\u95ee\u9898\u51b3\u7b56\u4ea7\u751f\u5f71\u54cd,\u672c\u9898\u7684\u7279\u5f81\u662f\u516b\u4e2a\u65b9\u5411\u4e0d\u80fd\u67091(1\u4ee3\u8868\u6709\u56fd\u738b) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6bcf\u4e00\u884c\u7684\u65b9\u5f0f\u6765\u601d\u8003, \u5f85\u89e3\u51b3\u7684\u8fd9\u4e00\u884c\u7684\u72b6\u6001\u662f\u7531\u4e0a\u4e00\u884c\u7684\u72b6\u6001\u6240\u51b3\u5b9a\u7684! \u8054\u7cfb\u4e4b\u524d\u8bf4\u7684\u4f7f\u7528\u4e00\u4e32\u4e8c\u8fdb\u5236\u6570\u4ee3\u8868\u4e00\u884c\u7684\u72b6\u6001,\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u4e00\u884c\u53ef\u4ee5\u6709\u591a\u5c11\u79cd\u72b6\u6001, \u7136\u540e\u518d\u627e\u5230\u591a\u5c11\u5bf9\u72b6\u6001\u662f\u53ef\u4ee5\u4e0a\u4e0b\u5806\u53e0\u7684 \u4e3e\u4e2a\u4f8b\u5b50: \u6211\u4eec\u524d\u8fdb\u7684\u65b9\u5411\u6709\u56db\u79cd:\u4e0a\u4e0b\u5de6\u53f3(\u8fd9\u5c31\u662f\u6bcf\u4e00\u884c\u7684\u72b6\u6001) \u5bf9\u4e8e\u6211\u4eec\u8d70\u7684\u65b9\u5411\u53c8\u6709\u4e00\u5b9a\u7684\u89c4\u5219: \u5411\u4e0a\u8d70\u4e4b\u540e\u4e0d\u80fd\u5411\u4e0b/\u53f3\u8d70(\u4e0d\u540c\u72b6\u6001\u7684\u5806\u53e0) \u8fd9\u6837\u5b50\u662f\u4e0d\u662f\u5f88\u6709\u4e9b\u719f\u6089\u7684\u611f\u89c9?\u548c\u4e00\u9053\u5165\u95e8\u7684DP\u5f88\u76f8\u4f3c \u9898\u76ee\u94fe\u63a5: https://leetcode-cn.com/problems/unique-paths-ii/ \u673a\u5668\u4eba\u7684\u65b9\u5411\u53ea\u80fd\u5411\u53f3/\u4e0b \u53ea\u662f\u8d70\u5b8c\u5176\u4e2d\u4e00\u6b65\u4e4b\u540e\u8fd8\u80fd\u7ee7\u7eed\u8d70\u7684\u65b9\u5411\u662f\u968f\u673a\u7684(\u56e0\u4e3a\u969c\u788d\u7269\u662f\u968f\u673a\u7684) \u90a3\u4e48\u8fd9\u9898\u5c31\u5f88\u7b80\u5355\u4e86 \u9898\u4e2d\u8981\u6c42\u4e00\u4e2a\u56fd\u738b\u7684\u516b\u4e2a\u65b9\u5411\u90fd\u4e0d\u80fd\u6709\u53e6\u4e00\u4e2a\u56fd\u738b,\u5219\u5229\u7528\u4e86\u4e0a\u8ff0\u7684\u4f4d\u8fd0\u7b97\u5206\u522b\u662f x & (x << 1)\u5de6\u53f3\u65b9\u5411\u65e0\u56fd\u738b(\u6c42\u51fa\u4e00\u884c\u5177\u6709\u7684\u5168\u90e8\u72b6\u6001) x & y \u4e0a\u4e0b\u65b9\u5411\u65e0\u56fd\u738b (\u5224\u65ad\u4e0a\u4e00\u884c\u4e0e\u8fd9\u4e00\u884c\u7684\u4e0a\u4e0b\u65b9\u5411) x & (y<<1) \u4e1c\u5357/\u4e1c\u5317\u65b9\u5411\u65e0\u56fd\u738b(\u5224\u65ad\u4e0a\u4e00\u884c\u4e0e\u8fd9\u4e00\u884c\u7684\u4e1c\u5357/\u4e1c\u5317\u65b9\u5411) x & (y>>1) \u897f\u5357.\u897f\u5317\u65b9\u5411\u65e0\u56fd\u738b(\u5224\u65ad\u4e0a\u4e00\u884c\u4e0e\u8fd9\u4e00\u884c\u7684\u897f\u5357.\u897f\u5317\u65b9\u5411) \u4e0b\u9762\u7ed9\u51fa\u72b6\u6001\u65b9\u7a0b: dp[i][j][k] = dp[i - 1][t][k - total[j]] i\u4ee3\u88681 - i \u884c j\u4ee3\u8868\u7b2c\u51e0\u79cd\u72b6\u6001 k\u4ee3\u8868\u4f7f\u7528\u4e86\u591a\u5c11\u4e2a\u56fd\u738b total\u4ee3\u8868\u6bcf\u79cd\u72b6\u6001\u653e\u7f6e\u4e86\u591a\u5c11\u4e2a\u56fd\u738b dp[i][j][k] \u7684\u542b\u4e49\u5c31\u662f 1 - i \u884c\u7684\u68cb\u76d8, \u5176\u4e2d\u7b2ci\u884c\u7684\u72b6\u6001\u4e3a\u7b2cj\u79cd\u72b6\u6001,\u4f7f\u7528\u4e86k\u4e2a\u56fd\u738b\u7684\u79cd\u6570 \u5b8c\u6210\u672c\u9898\u9700\u8981\u4ee5\u4e0b\u8981\u6c42 \u8bb0\u5f55\u6709\u591a\u5c11\u79cd\u72b6\u6001 vector < int > kinds ; \u8bb0\u5f55\u6bcf\u79cd\u72b6\u6001\u542b\u6709\u591a\u5c11\u4e2a\u56fd\u738b vector < int > total ; 3.dp vector < vector < vector < long long > > > dp \u8bb0\u5f55\u72b6\u6001\u5e76\u5224\u65ad\u8bb0\u5f55\u6bcf\u79cd\u72b6\u6001\u542b\u6709\u591a\u5c11\u4e2a\u56fd\u738b--\u4f7f\u7528\u4e86\u9884\u5907\u77e5\u8bc6\u7684\u4f4d\u8fd0\u7b97 for ( int i = 0 ; i < ( 1 << n ); i ++ ) { //cout << (i << 1)<<endl; if ( i & ( i << 1 )) //\u5224\u65ad\u8be5\u4e8c\u8fdb\u5236\u662f\u5426\u7b26\u5408\u72b6\u6001\u8981\u6c42--\u662f\u5426\u5de6\u53f3\u542b\u6709\u56fd\u738b continue ; else { kind = 0 ; for ( int j = 0 ; j < n ; j ++ ) { //\u8be5\u4e8c\u8fdb\u5236\u6570\u542b\u67091\u7684\u4e2a\u6570 if ( i & ( 1 << j )) kind ++ ; } kinds . push_back ( i ); total . push_back ( kind ); } } dp //init //\u521d\u59cb\u5316\u7b2c\u4e00\u884c\u7684\u72b6\u6001 for ( int i = 0 ; i < kinds . size (); i ++ ) { dp [ 1 ][ i ][ total [ i ]] = 1 ; } //dp[0][1][0] = dp[0][1][0] = 1; for ( int i = 2 ; i <= n ; i ++ ) { //\u884c for ( int j = 0 ; j < kinds . size (); j ++ ) { //\u6bcf\u884c\u7684\u53ef\u80fd\u72b6\u6001 for ( int K = total [ j ]; K <= k ; K ++ ) { \u5224\u65ad\u6240\u6c42\u7684 k\u9700\u8981\u5927\u4e8e\u672c\u884c\u56fd\u738b\u6570\u76ee\u624d\u80fd\u8fdb\u884c\u4e0b\u5217\u8fd0\u7b97 for ( int t = 0 ; t < kinds . size (); t ++ ) { //\u524d\u4e00\u884c\u7684\u53ef\u80fd\u72b6\u6001 if ( ! ( kinds [ j ] & kinds [ t ]) && ! ( kinds [ t ] & kinds [ j ] << 1 ) && ! ( kinds [ t ] & kinds [ j ] >> 1 )) dp [ i ][ j ][ K ] += dp [ i - 1 ][ t ][ K - total [ j ]]; } } } } \u4f18\u5316\u601d\u8def: \u53ef\u4ee5\u5efa\u7acb\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\u7684\u72b6\u6001\u56fe,\u6765\u7b80\u5316\u65f6\u95f4\u590d\u6742\u5ea6,\u4f8b\u5982\u7b2c\u56db\u4e2a\u5faa\u73af\u53ef\u4ee5\u901a\u8fc7\u72b6\u6001\u56fe\u4f18\u5316\u4e0d\u9700\u8981\u904d\u5386\u6240\u6709\u72b6\u6001 \u5b8c\u6574\u4ee3\u7801: #include <iostream> #include <vector> using namespace std ; int n , k ; int main ( void ) { long long res = 0 ; int kind = 0 ; vector < int > kinds ; vector < int > total ; cin >> n >> k ; //init for ( int i = 0 ; i < ( 1 << n ); i ++ ) { //cout << (i << 1)<<endl; if ( i & ( i << 1 )) continue ; else { kind = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i & ( 1 << j )) kind ++ ; } kinds . push_back ( i ); total . push_back ( kind ); } } //init var vector < long long > arr ( k + 1 , 0 ); vector < vector < long long > > temp ( kinds . size (), arr ); vector < vector < vector < long long > > > dp ( n + 1 , temp ); //dp //init dp for ( int i = 0 ; i < kinds . size (); i ++ ) { dp [ 1 ][ i ][ total [ i ]] = 1 ; } //dp[0][1][0] = dp[0][1][0] = 1; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j < kinds . size (); j ++ ) { for ( int K = total [ j ]; K <= k ; K ++ ) { for ( int t = 0 ; t < kinds . size (); t ++ ) { if ( ! ( kinds [ j ] & kinds [ t ]) && ! ( kinds [ t ] & kinds [ j ] << 1 ) && ! ( kinds [ t ] & kinds [ j ] >> 1 )) dp [ i ][ j ][ K ] += dp [ i - 1 ][ t ][ K - total [ j ]]; } } } } for ( int i = 0 ; i < kinds . size (); i ++ ) { res += dp [ n ][ i ][ k ]; } cout << res ; return 0 ; }","title":"\u72b6\u6001\u538b\u7f29DP"},{"location":"algorithm/dynamic_programing/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/#_1","text":"","title":"\u9884\u5907\u77e5\u8bc6"},{"location":"algorithm/dynamic_programing/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/#_2","text":"\u5e38\u7528\u7684\u8fd0\u7b97\u7b26\u5171 6 \u79cd\uff0c\u5206\u522b\u4e3a\u4e0e\uff08 & \uff09\u3001\u6216\uff08 | \uff09\u3001\u5f02\u6216\uff08 ^ \uff09\u3001\u53d6\u53cd\uff08 ~ \uff09\u3001\u5de6\u79fb\uff08 << \uff09\u548c\u53f3\u79fb\uff08 >> \uff09 \u2019&\u2019\u7b26\u53f7\uff0cx&y\uff0c\u4f1a\u5c06\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u5728\u4e8c\u8fdb\u5236\u4e0b\u8fdb\u884c\u4e0e\u8fd0\u7b97(\u90fd1\u4e3a1\uff0c\u5176\u4f59\u4e3a0\uff09 \u7136\u540e\u8fd4\u56de\u5176\u5341\u8fdb\u5236\u4e0b\u7684\u503c\u3002\u4f8b\u59823(11)&2(10)=2(10)\u3002 \u2019|\u2019\u7b26\u53f7\uff0cx|y\uff0c\u4f1a\u5c06\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u5728\u4e8c\u8fdb\u5236\u4e0b\u8fdb\u884c\u6216\u8fd0\u7b97\uff08\u90fd0\u4e3a0\uff0c\u5176\u4f59\u4e3a1\uff09 \u7136\u540e\u8fd4\u56de\u5176\u5341\u8fdb\u5236\u4e0b\u7684\u503c\u3002\u4f8b\u59823(11)|2(10)=3(11)\u3002 \u2019 ^ \u2019\u7b26\u53f7\uff0cx^y\uff0c\u4f1a\u5c06\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u5728\u4e8c\u8fdb\u5236\u4e0b\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff08\u4e0d\u540c\u4e3a1\uff0c\u5176\u4f59 \u4e3a0\uff09\u7136\u540e\u8fd4\u56de\u5176\u5341\u8fdb\u5236\u4e0b\u7684\u503c\u3002\u4f8b\u59823(11)^2(10)=1(01)\u3002 \u2019 ~ \u2019\u7b26\u53f7\uff0c ~ x\uff0c\u6309\u4f4d\u53d6\u53cd\u3002\u4f8b\u5982~101=010\u3002 \u2019<<\u2019\u7b26\u53f7\uff0c\u5de6\u79fb\u64cd\u4f5c\uff0cx<<2\uff0c\u5c06x\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\u5411\u5de6\u79fb\u52a8\u4e24\u4f4d\uff0c\u6700\u53f3\u8fb9\u75280\u586b\u5145\uff0cx<<2\u76f8\u5f53\u4e8e\u8ba9x\u4e58\u4ee54\u3002 \u2019>>\u2019\u7b26\u53f7\uff0c\u662f\u53f3\u79fb\u64cd\u4f5c\uff0cx>>1\uff0c\u5c06x\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\u5411\u53f3\u79fb\u52a8\u4e24\u4f4d\uff0c\u6700\u5de6\u8fb9\u75280\u586b\u5145\uff0c\u76f8\u5f53\u4e8e\u7ed9x/2\uff0c\u53bb\u6389x\u4e8c\u8fdb\u5236\u4e0b\u7684\u6700\u53f3\u4e00\u4f4d\u3002","title":"\u4f4d\u8fd0\u7b97"},{"location":"algorithm/dynamic_programing/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/#_3","text":"1.\u5224\u65ad\u4e00\u4e2a\u6570\u5b57x\u4e8c\u8fdb\u5236\u4e0b\u7b2ci\u4f4d\u662f\u4e0d\u662f\u7b49\u4e8e1\u3002 if( ( (1<<(i\u22121)) & x ) > 0 ) \u539f\u7406:1\u5de6\u79fbi - 1\u4f4d \u6210\u4e3a 0000010000\uff08\u5176\u4e2di\u4f4d\u7b2ci\u4f4d\uff09 \u901a\u8fc7\u4e0e\u8fd0\u7b97\u4ece\u800c\u5f97\u77e5\u7b2ci\u4f4d\u662f\u5426\u4e3a1 2.\u5c06\u4e00\u4e2a\u6570\u5b57x\u4e8c\u8fdb\u5236\u4e0b\u7b2ci\u4f4d\u66f4\u6539\u62101\u3002 x = ( 1<<( i - 1 ) | x \u539f\u7406:1\u5de6\u79fbi - 1\u4f4d \u6210\u4e3a 0000010000\uff08\u5176\u4e2di\u4f4d\u7b2ci\u4f4d\uff09 \u901a\u8fc7\u6216\u8fd0\u7b97\u4ece\u800c\u5f97\u77e5\u7b2ci\u4f4d\u662f\u5426\u4e3a1 3.\u5c06\u4e00\u4e2a\u6570\u5b57x\u4e8c\u8fdb\u5236\u4e0b\u7b2ci\u4f4d\u66f4\u6539\u62100\u3002 x = x & ~(1 << ( i \u2212 1 ) ) \u539f\u7406:\u901a\u8fc7\u5bf9(1 << ( i \u2212 1 ) )\u8fdb\u884c\u53d6\u53cd \u5f97\u5230 1111101111(0 \u4e3a\u7b2ci\u4f4d) \u518d\u8fdb\u884c\u4e0e\u8fd0\u7b97\u5f97\u5230\u7b2ci\u4f4d\u4e3a1\u7684\u6570\u5b57 4.\u628a\u4e00\u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b\u6700\u9760\u53f3\u7684\u7b2c\u4e00\u4e2a1\u53bb\u6389\u3002 x = x & ( x\u2212 1 ) \u539f\u7406:\u5047\u8bbe\u6570\u5b57x\u4e3a11111(2) \u5219x - 1 \u4e3a 11110(2) \u4e0e\u8fd0\u7b97\u5219\u4f1a\u628a\u6700\u540e\u4e00\u4f4d1\u53bb\u6389, \u5f97\u5230\u6570\u5b5711110 \u82e5\u6570\u5b57x\u4e3a11100(2) \u5219x - 1\u4e3a11011(2) \u4e0e\u8fd0\u7b97\u5f97\u5230 11000 \u5f88\u663e\u7136\u5bf9\u4e8e\u4e00\u4e32\u4e8c\u8fdb\u5236\u6570 \u5176\u6700\u540e\u4e00\u4f4d\u53ef\u5206\u4e3a0/1\u4e24\u79cd\u60c5\u51b5,\u800c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u524d\u540e\u90e8\u5206: \u4e0d\u53d8\u7684\u90e8\u5206+\u53d8\u7684\u90e8\u5206 \u4f8b\u5982: x = 110111(2) \u53ef\u5206\u4e3a: 110 111\u4e24\u90e8\u5206 x - 1 \u5219\u4e3a 110 110 \u2003 \u2003x = 110100(2) \u53ef\u5206\u4e3a: 110 100\u4e24\u90e8\u5206 x - 1 \u5219\u4e3a 110 011 \u540e\u9762\u53d8\u7684\u90e8\u5206\u901a\u8fc7\u4e0e\u8fd0\u7b97\u5b9e\u73b0\u5b9e\u73b0\u53bb\u6389\u9760\u53f3\u7684\u7b2c\u4e00\u4e2a1 \u6ce8:\u8fd9\u91cc\u7684\u5206\u6cd5\u5e76\u65e0\u4ec0\u4e48\u8981\u6c42, 110111(2) \u5206\u4e3a 1101 11\u4e24\u90e8\u5206\u4e5f\u53ef. \u6240\u8c13\u7684\u5206\u6210\u4e24\u90e8\u5206\u4e5f\u53ea\u662f\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5b50\u53ef\u4ee5\u53bb\u6389\u9760\u53f3\u7684\u7b2c\u4e00\u4e2a1,\u6709\u5176\u4ed6\u7684\u7406\u89e3\u65b9\u6cd5\u4ea6\u53ef \u8fd9\u91cc\u53ea\u6458\u8981\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u4f4d\u8fd0\u7b97,\u611f\u5174\u8da3\u53ef\u81ea\u884c\u67e5\u8be2\u5176\u4ed6\u8fd0\u7b97","title":"\u5e38\u89c1\u7684\u4e00\u4e9b\u4f4d\u8fd0\u7b97"},{"location":"algorithm/dynamic_programing/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/#_4","text":"\u72b6\u538bDP\u662f\u5229\u7528\u8ba1\u7b97\u673a\u4e8c\u8fdb\u5236\u7684\u6027\u8d28\u6765\u63cf\u8ff0\u72b6\u6001\u7684\u4e00\u79cdDP\u65b9\u5f0f\u3002\u72b6\u538b\u7ecf\u5e38\u548cBFS\u53caDP\u8fde\u7528\u3002 \u4f7f\u7528\u4e8c\u8fdb\u5236\u6570\u679a\u4e3e\u51fa\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684\u72b6\u6001,\u901a\u8fc7\u4e0d\u540c\u72b6\u6001\u7684\u8f6c\u79fb\u4ece\u800c\u5f97\u5230\u6700\u4f18\u89e3 \u53ef\u4ee5\u770b\u5f97\u51fa\u4f7f\u7528\u4e8c\u8fdb\u5236\u6570\u63cf\u8ff0\u72b6\u6001\u5f88\u5bb9\u6613\u8ba9\u72b6\u6001\u6570\u6210\u6307\u6570\u6001\u52bf\u589e\u957f,\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u5bb9\u6613\u5347\u9ad8,\u4f18\u5316\u53ef\u4ee5\u901a\u8fc7\u6761\u4ef6\u4f18\u5316\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb,\u4ece\u800c\u964d\u4f4e\u590d\u6742\u5ea6 \u4f8b\u9898\u8bb2\u89e3: \u9a91\u58eb(P1896 [SCOI2005]\u4e92\u4e0d\u4fb5\u72af) \u9898\u76ee\u63cf\u8ff0 \u5728N\u00d7N\u7684\u68cb\u76d8\u91cc\u9762\u653eK\u4e2a\u56fd\u738b\uff0c\u4f7f\u4ed6\u4eec\u4e92\u4e0d\u653b\u51fb\uff0c\u5171\u6709\u591a\u5c11\u79cd\u6446\u653e\u65b9\u6848\u3002\u56fd\u738b\u80fd\u653b\u51fb\u5230\u5b83\u4e0a\u4e0b\u5de6\u53f3\uff0c\u4ee5\u53ca\u5de6\u4e0a\u5de6\u4e0b\u53f3\u4e0a\u53f3\u4e0b\u516b\u4e2a\u65b9\u5411\u4e0a\u9644\u8fd1\u7684\u5404\u4e00\u4e2a\u683c\u5b50\uff0c\u51718\u4e2a\u683c\u5b50\u3002 \u8f93\u5165\u683c\u5f0f \u53ea\u6709\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6570N\uff0cK \uff08 1 <=N <=9, 0 <= K <= N * N\uff09 \u8f93\u51fa\u683c\u5f0f \u6240\u5f97\u7684\u65b9\u6848\u6570 \u8f93\u5165\u8f93\u51fa\u6837\u4f8b \u8f93\u5165 3 2 \u8f93\u51fa 16 \u89e3\u6790:\u72b6\u538bDP\u662f\u5229\u7528\u8ba1\u7b97\u673a\u4e8c\u8fdb\u5236\u7684\u6027\u8d28\u6765\u63cf\u8ff0\u72b6\u6001\u7684\u4e00\u79cdDP\u65b9\u5f0f,\u5728\u672c\u9898\u4e2d\u7528\u4e00\u4e32\u4e8c\u8fdb\u5236\u6570\u6765\u63cf\u8ff0\u4e00\u884c\u7684\u72b6\u6001 \u4f8b\u5982\u5728\u4e00\u4e2a4\u884c4\u5217\u7684\u683c\u5b50\u4e2d\u7b2c\u4e8c\u884c\u7684\u72b6\u6001\u662f1001 \u4ee3\u8868\u7b2c\u4e8c\u884c\u7684\u7b2c\u4e00,\u7b2c\u56db\u4e2a\u653e\u4e86\u5206\u522b\u653e\u4e86\u4e00\u4e2a\u56fd\u738b \u6211\u4eec\u600e\u4e48\u7528DP\u7684\u601d\u7ef4\u6765\u601d\u8003\u8fd9\u9053\u9898\u5462? \u6211\u4eec\u5f88\u6e05\u695aDP\u7684\u7279\u5f81\u662f\u5c06\u4e00\u4e2a\u5927\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u76f8\u4f3c\u7684\u5b50\u95ee\u9898,\u5e76\u4e14\u95ee\u9898\u7684\u89e3\u51b3\u65e0\u540e\u6548\u6027,\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u5b50\u95ee\u9898\u7684\u51b3\u7b56\u4e4b\u540e\u4e0d\u4f1a\u518d\u540e\u7eed\u7684\u95ee\u9898\u51b3\u7b56\u4ea7\u751f\u5f71\u54cd,\u672c\u9898\u7684\u7279\u5f81\u662f\u516b\u4e2a\u65b9\u5411\u4e0d\u80fd\u67091(1\u4ee3\u8868\u6709\u56fd\u738b) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6bcf\u4e00\u884c\u7684\u65b9\u5f0f\u6765\u601d\u8003, \u5f85\u89e3\u51b3\u7684\u8fd9\u4e00\u884c\u7684\u72b6\u6001\u662f\u7531\u4e0a\u4e00\u884c\u7684\u72b6\u6001\u6240\u51b3\u5b9a\u7684! \u8054\u7cfb\u4e4b\u524d\u8bf4\u7684\u4f7f\u7528\u4e00\u4e32\u4e8c\u8fdb\u5236\u6570\u4ee3\u8868\u4e00\u884c\u7684\u72b6\u6001,\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u4e00\u884c\u53ef\u4ee5\u6709\u591a\u5c11\u79cd\u72b6\u6001, \u7136\u540e\u518d\u627e\u5230\u591a\u5c11\u5bf9\u72b6\u6001\u662f\u53ef\u4ee5\u4e0a\u4e0b\u5806\u53e0\u7684 \u4e3e\u4e2a\u4f8b\u5b50: \u6211\u4eec\u524d\u8fdb\u7684\u65b9\u5411\u6709\u56db\u79cd:\u4e0a\u4e0b\u5de6\u53f3(\u8fd9\u5c31\u662f\u6bcf\u4e00\u884c\u7684\u72b6\u6001) \u5bf9\u4e8e\u6211\u4eec\u8d70\u7684\u65b9\u5411\u53c8\u6709\u4e00\u5b9a\u7684\u89c4\u5219: \u5411\u4e0a\u8d70\u4e4b\u540e\u4e0d\u80fd\u5411\u4e0b/\u53f3\u8d70(\u4e0d\u540c\u72b6\u6001\u7684\u5806\u53e0) \u8fd9\u6837\u5b50\u662f\u4e0d\u662f\u5f88\u6709\u4e9b\u719f\u6089\u7684\u611f\u89c9?\u548c\u4e00\u9053\u5165\u95e8\u7684DP\u5f88\u76f8\u4f3c \u9898\u76ee\u94fe\u63a5: https://leetcode-cn.com/problems/unique-paths-ii/ \u673a\u5668\u4eba\u7684\u65b9\u5411\u53ea\u80fd\u5411\u53f3/\u4e0b \u53ea\u662f\u8d70\u5b8c\u5176\u4e2d\u4e00\u6b65\u4e4b\u540e\u8fd8\u80fd\u7ee7\u7eed\u8d70\u7684\u65b9\u5411\u662f\u968f\u673a\u7684(\u56e0\u4e3a\u969c\u788d\u7269\u662f\u968f\u673a\u7684) \u90a3\u4e48\u8fd9\u9898\u5c31\u5f88\u7b80\u5355\u4e86 \u9898\u4e2d\u8981\u6c42\u4e00\u4e2a\u56fd\u738b\u7684\u516b\u4e2a\u65b9\u5411\u90fd\u4e0d\u80fd\u6709\u53e6\u4e00\u4e2a\u56fd\u738b,\u5219\u5229\u7528\u4e86\u4e0a\u8ff0\u7684\u4f4d\u8fd0\u7b97\u5206\u522b\u662f x & (x << 1)\u5de6\u53f3\u65b9\u5411\u65e0\u56fd\u738b(\u6c42\u51fa\u4e00\u884c\u5177\u6709\u7684\u5168\u90e8\u72b6\u6001) x & y \u4e0a\u4e0b\u65b9\u5411\u65e0\u56fd\u738b (\u5224\u65ad\u4e0a\u4e00\u884c\u4e0e\u8fd9\u4e00\u884c\u7684\u4e0a\u4e0b\u65b9\u5411) x & (y<<1) \u4e1c\u5357/\u4e1c\u5317\u65b9\u5411\u65e0\u56fd\u738b(\u5224\u65ad\u4e0a\u4e00\u884c\u4e0e\u8fd9\u4e00\u884c\u7684\u4e1c\u5357/\u4e1c\u5317\u65b9\u5411) x & (y>>1) \u897f\u5357.\u897f\u5317\u65b9\u5411\u65e0\u56fd\u738b(\u5224\u65ad\u4e0a\u4e00\u884c\u4e0e\u8fd9\u4e00\u884c\u7684\u897f\u5357.\u897f\u5317\u65b9\u5411) \u4e0b\u9762\u7ed9\u51fa\u72b6\u6001\u65b9\u7a0b: dp[i][j][k] = dp[i - 1][t][k - total[j]] i\u4ee3\u88681 - i \u884c j\u4ee3\u8868\u7b2c\u51e0\u79cd\u72b6\u6001 k\u4ee3\u8868\u4f7f\u7528\u4e86\u591a\u5c11\u4e2a\u56fd\u738b total\u4ee3\u8868\u6bcf\u79cd\u72b6\u6001\u653e\u7f6e\u4e86\u591a\u5c11\u4e2a\u56fd\u738b dp[i][j][k] \u7684\u542b\u4e49\u5c31\u662f 1 - i \u884c\u7684\u68cb\u76d8, \u5176\u4e2d\u7b2ci\u884c\u7684\u72b6\u6001\u4e3a\u7b2cj\u79cd\u72b6\u6001,\u4f7f\u7528\u4e86k\u4e2a\u56fd\u738b\u7684\u79cd\u6570 \u5b8c\u6210\u672c\u9898\u9700\u8981\u4ee5\u4e0b\u8981\u6c42 \u8bb0\u5f55\u6709\u591a\u5c11\u79cd\u72b6\u6001 vector < int > kinds ; \u8bb0\u5f55\u6bcf\u79cd\u72b6\u6001\u542b\u6709\u591a\u5c11\u4e2a\u56fd\u738b vector < int > total ; 3.dp vector < vector < vector < long long > > > dp \u8bb0\u5f55\u72b6\u6001\u5e76\u5224\u65ad\u8bb0\u5f55\u6bcf\u79cd\u72b6\u6001\u542b\u6709\u591a\u5c11\u4e2a\u56fd\u738b--\u4f7f\u7528\u4e86\u9884\u5907\u77e5\u8bc6\u7684\u4f4d\u8fd0\u7b97 for ( int i = 0 ; i < ( 1 << n ); i ++ ) { //cout << (i << 1)<<endl; if ( i & ( i << 1 )) //\u5224\u65ad\u8be5\u4e8c\u8fdb\u5236\u662f\u5426\u7b26\u5408\u72b6\u6001\u8981\u6c42--\u662f\u5426\u5de6\u53f3\u542b\u6709\u56fd\u738b continue ; else { kind = 0 ; for ( int j = 0 ; j < n ; j ++ ) { //\u8be5\u4e8c\u8fdb\u5236\u6570\u542b\u67091\u7684\u4e2a\u6570 if ( i & ( 1 << j )) kind ++ ; } kinds . push_back ( i ); total . push_back ( kind ); } } dp //init //\u521d\u59cb\u5316\u7b2c\u4e00\u884c\u7684\u72b6\u6001 for ( int i = 0 ; i < kinds . size (); i ++ ) { dp [ 1 ][ i ][ total [ i ]] = 1 ; } //dp[0][1][0] = dp[0][1][0] = 1; for ( int i = 2 ; i <= n ; i ++ ) { //\u884c for ( int j = 0 ; j < kinds . size (); j ++ ) { //\u6bcf\u884c\u7684\u53ef\u80fd\u72b6\u6001 for ( int K = total [ j ]; K <= k ; K ++ ) { \u5224\u65ad\u6240\u6c42\u7684 k\u9700\u8981\u5927\u4e8e\u672c\u884c\u56fd\u738b\u6570\u76ee\u624d\u80fd\u8fdb\u884c\u4e0b\u5217\u8fd0\u7b97 for ( int t = 0 ; t < kinds . size (); t ++ ) { //\u524d\u4e00\u884c\u7684\u53ef\u80fd\u72b6\u6001 if ( ! ( kinds [ j ] & kinds [ t ]) && ! ( kinds [ t ] & kinds [ j ] << 1 ) && ! ( kinds [ t ] & kinds [ j ] >> 1 )) dp [ i ][ j ][ K ] += dp [ i - 1 ][ t ][ K - total [ j ]]; } } } } \u4f18\u5316\u601d\u8def: \u53ef\u4ee5\u5efa\u7acb\u4e0d\u540c\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\u7684\u72b6\u6001\u56fe,\u6765\u7b80\u5316\u65f6\u95f4\u590d\u6742\u5ea6,\u4f8b\u5982\u7b2c\u56db\u4e2a\u5faa\u73af\u53ef\u4ee5\u901a\u8fc7\u72b6\u6001\u56fe\u4f18\u5316\u4e0d\u9700\u8981\u904d\u5386\u6240\u6709\u72b6\u6001 \u5b8c\u6574\u4ee3\u7801: #include <iostream> #include <vector> using namespace std ; int n , k ; int main ( void ) { long long res = 0 ; int kind = 0 ; vector < int > kinds ; vector < int > total ; cin >> n >> k ; //init for ( int i = 0 ; i < ( 1 << n ); i ++ ) { //cout << (i << 1)<<endl; if ( i & ( i << 1 )) continue ; else { kind = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( i & ( 1 << j )) kind ++ ; } kinds . push_back ( i ); total . push_back ( kind ); } } //init var vector < long long > arr ( k + 1 , 0 ); vector < vector < long long > > temp ( kinds . size (), arr ); vector < vector < vector < long long > > > dp ( n + 1 , temp ); //dp //init dp for ( int i = 0 ; i < kinds . size (); i ++ ) { dp [ 1 ][ i ][ total [ i ]] = 1 ; } //dp[0][1][0] = dp[0][1][0] = 1; for ( int i = 2 ; i <= n ; i ++ ) { for ( int j = 0 ; j < kinds . size (); j ++ ) { for ( int K = total [ j ]; K <= k ; K ++ ) { for ( int t = 0 ; t < kinds . size (); t ++ ) { if ( ! ( kinds [ j ] & kinds [ t ]) && ! ( kinds [ t ] & kinds [ j ] << 1 ) && ! ( kinds [ t ] & kinds [ j ] >> 1 )) dp [ i ][ j ][ K ] += dp [ i - 1 ][ t ][ K - total [ j ]]; } } } } for ( int i = 0 ; i < kinds . size (); i ++ ) { res += dp [ n ][ i ][ k ]; } cout << res ; return 0 ; }","title":"\u6982\u8ff0"},{"location":"algorithm/dynamic_programing/%E8%83%8C%E5%8C%85DP/","text":"\u80cc\u5305\u95ee\u9898 \u00b6 \u80cc\u5305\u95ee\u9898\u662f\u6307\u5728\u7ed9\u5b9a\u6761\u4ef6\u4e0b \u5982\u4f55\u83b7\u5f97\u6700\u9ad8\u4ef7\u503c\u7684\u95ee\u9898 01\u80cc\u5305\u95ee\u9898 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u91cd\u91cf\u9650\u5236\uff0c\u548c\u51e0\u79cd\u4e0d\u540c\u7269\u54c1\u7684\u4ef7\u503c\u548c\u91cd\u91cf\uff0c\u6bcf\u79cd\u7269\u54c1\u53ea\u6709\u4e00\u4e2a\uff0c\u5bfb\u627e\u80fd\u62ff\u5230\u7684\u6700\u5927\u4ef7\u503c\u662f\u591a\u5c11 01\u80cc\u5305\u95ee\u9898\u6839\u672c\u6307\u7684\u662f\uff0c\u540c\u79cd\u7269\u54c1\u6709\u4e14\u6700\u9ad8\u53ea\u6709\u4e00\u4e2a\uff0c\u5728\u7ed9\u5b9a\u9650\u5236\u4e0b\uff0c\u5982\u4f55\u83b7\u5f97\u6700\u5927\u6536\u76ca \u679a\u4e3e\uff1a\u627e\u51fa\u6240\u6709\u7ec4\u5408 \u52a8\u6001\u89c4\u5212 \u00b6 \u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u6211\u4eec\u662f\u5426\u8981\u9009\u62e9\u5f53\u524d\u7269\u54c1\uff0c\u9009\u53d6\u4e86\u5f53\u524d\u7269\u54c1\u662f\u5426\u662f\u6700\u5927\u7684\u4ef7\u503c \u505a\u4e00\u4e2an^2\u7684\u7b97\u6cd5 \u5185\u5c42\u5faa\u73af\u8868\u793a\u5bfb\u627e\u5408\u9002\u7684\u5927\u5c0f \u5916\u5c42\u5faa\u73af\u8868\u793a\u7b2c\u51e0\u4ef6\u7269\u54c1 \u6bcf\u6b21\u5185\u5c42\u5faa\u73af\uff0c\u6211\u4eec\u7b2c\u4e00\u4e2a\u8981\u627e\u7684\u662f\u6211\u4eec\u662f\u5426\u80fd\u653e\u4e0b\u5f53\u524d\u7269\u54c1\u3002 \u653e\u4e0b\u5f53\u524d\u7269\u54c1\u540e\uff0c\u662f\u5426\u6bd4\u653e\u4e0a\u4e00\u4ef6\u7269\u54c1\u7684\u4ef7\u503c\u9ad8\uff0c\u9009\u53d6\u9ad8\u8005\u3002 \u4e4b\u540e\u7ee7\u7eed\u67e5\u627e\u5269\u4f59\u7a7a\u95f4\u80fd\u5426\u653e\u4e0b\u4e4b\u524d\u7684\u7269\u54c1\uff0c\u5982\u679c\u80fd\u90a3\u4e48\u548c\u4e0a\u4e00\u8f6e\u7684\u7ed3\u679c\u6bd4\u53d6\u9ad8\u8005\u3002 \u7531\u4e8e\u6bcf\u4e00\u8f6e\u90fd\u662f\u53d6\u6700\u9ad8\u8005\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u8ba8\u8bba\u4e0a\u4e00\u8f6e\u4e4b\u524d\u7684\u5176\u5b83\u7269\u54c1\uff0c\u9898\u76ee\u4e2d\u53ea\u8981\u6c42\u4e86\u6700\u540e\u4ef7\u503c\u3002 \u5185\u5c42\u5faa\u73af\u6bcf\u6b21\u90fd\u662f\u627e\u5230\u5f53\u524d\u4ef7\u503c\u52a0\u4e0a\u4e4b\u524d\u7684\u6700\u9ad8\u4ef7\u503c\uff0c\u4e4b\u524d\u7684\u548c\u5f53\u524d\u7269\u54c1\u65e0\u5173\u6240\u4ee5\u81ea\u7136\u4e0d\u4f1a\u91cd\u590d\u9009\u53d6\u3002 #include <iostream> using namespace std ; const int maxn = 1000 ; int dp [ 20 ][ 20 ]; int value [ 20 ], weight [ 20 ]; int main (){ int n , limitw ; cin >> n >> limitw ; //\u7269\u54c1\u4e2a\u6570\uff0c\u80cc\u5305\u5927\u5c0f for ( int i = 1 ; i <= n ; i ++ ){ cin >> value [ i ] >> weight [ i ]; } cout << \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \\n \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 0 ; j <= limitw ; j ++ ){ /*\u7b97\u6cd5\u7684\u552f\u4e00\u8981\u70b9*/ if ( j >= weight [ i ]){ dp [ i ][ j ] = max ( dp [ i -1 ][ j - weight [ i ]] + value [ i ], dp [ i -1 ][ j ]); } else { dp [ i ][ j ] = dp [ i -1 ][ j ]; //\u5982\u679c\u653e\u4e0d\u4e0b\uff0c\u7ee7\u627f\u4e0a\u4e00\u8f6e\u7684\u7ed3\u679c } cout << dp [ i ][ j ] << \" \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 } cout << \" \\n \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 } cout << dp [ n ][ limitw ]; return 0 ; } \u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u6211\u4eec\u53ea\u6bd4\u5bf9\u4e86\u5f53\u524d\u4e00\u8f6e\u548c\u4e0a\u4e00\u8f6e\u7684\u7ed3\u679c\uff0c\u4e4b\u524d\u7684\u7a7a\u95f4\u7528\u8fc7\u4e00\u6b21\u4e4b\u540e\u5c31\u6ca1\u7528\u4e86 \u6211\u4eec\u53ea\u8981\u5012\u7740\u5bfb\u627e\uff0c\u5c31\u53ef\u4ee5\u4e0d\u7834\u574f\u4e0a\u4e00\u8f6e\u4f4e\u91cd\u91cf\u7684\u4ef7\u503c\uff0c\u4ece\u800c\u627e\u5230\u6700\u5927\u503c \u7a7a\u95f4\u590d\u6742\u5ea6\u7531n^2\u27a1n #include <iostream> using namespace std ; const int maxn = 1000 ; int dp [ 20 ]; int value [ 20 ], weight [ 20 ]; int main (){ int n , limitw ; cin >> n >> limitw ; for ( int i = 1 ; i <= n ; i ++ ){ cin >> value [ i ] >> weight [ i ]; } cout << \"0 1 2 3 4 5 6 7 8 9 10 \\n \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = limitw ; j >= weight [ i ]; j -- ){ dp [ j ] = max ( dp [ j - weight [ i ]] + value [ i ], dp [ j ]); cout << dp [ j ] << \" \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 } cout << \" \\n \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 } cout << dp [ limitw ]; return 0 ; } 02\u591a\u91cd\u80cc\u5305\u95ee\u9898 \u00b6 \u6709N\u79cd\u7269\u54c1\uff0c\u7b2ci\u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662fCi\uff0c\u4ef7\u503c\u662fWi\uff0c\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf\u90fd\u662f\u6709\u9650\u7684\uff0c\u4e3aNi\u3002\u73b0\u6709\u5bb9\u91cf\u4e3aV\u7684\u80cc\u5305\uff0c\u653e\u5165\u82e5\u5e72\u7269\u54c1\uff0c\u5728\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7V\u7684\u6761\u4ef6\u4e0b\uff0c\u4f7f\u603b\u4ef7\u503c\u5c3d\u53ef\u80fd\u5927\u3002 \u5728\u4e0d\u9700\u8981\u8bb0\u5f55\u7269\u54c1\u79cd\u7c7b\u7684\u60c5\u51b5\u4e0b\uff0c01\u80cc\u5305\u5c31\u662f\u6bcf\u79cd\u7269\u54c1\u6570\u91cf\u4e3a1\u7684\u591a\u91cd\u80cc\u5305\u95ee\u9898\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f9d\u65e7\u53ef\u4ee5\u91c7\u752801\u80cc\u5305\u7684\u7b97\u6cd5\uff0c\u628a\u7269\u54c1\u62c6\u5206\u6210\u4e00\u4ef6\u4e00\u4ef6\u7684\u3002 #include <iostream> using namespace std ; int dp [ 21 ][ 1010 ]; //\u7269\u54c1\u4e0a\u9650\uff0c\u80cc\u5305\u5927\u5c0f int w [ 10 ], c [ 21 ], n [ 21 ]; //\u4ef7\u503c,\u4f53\u79ef,\u6570\u91cf int main (){ int N , V ; cin >> N >> V ; for ( int i = 1 ; i <= N ; i ++ ){ cin >> w [ i ] >> c [ i ] >> n [ i ]; } for ( int i = 1 ; i <= N ; i ++ ){ //\u7b2c\u51e0\u4ef6\u7269\u54c1 for ( int j = 0 ; j <= V ; j ++ ){ //\u80cc\u5305\u5927\u5c0f for ( int k = 0 ; k <= n [ i ]; k ++ ){ //\u8fd9\u91cc\u5176\u5b9e\u628a\u7269\u54c1\u5f53\u505a\u4e00\u4e2a\u4e00\u4e2a\u5f80\u91cc\u9762\u653e if ( j >= c [ i ] * k ){ dp [ i ][ j ] = max ( dp [ i -1 ][ j - c [ i ] * k ] + w [ i ] * k , dp [ i ][ j ]); } } } } cout << dp [ N ][ V ] << endl ; return 0 ; } \u4f9d\u65e7\u53ef\u4ee5\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u548c01\u80cc\u5305\u540c\u7406 #include <iostream> using namespace std ; int dp [ 1010 ]; //\u80cc\u5305\u5927\u5c0f int w [ 10 ], c [ 21 ], n [ 21 ]; //\u4ef7\u503c,\u4f53\u79ef,\u6570\u91cf int main (){ int N , V ; cin >> N >> V ; for ( int i = 1 ; i <= N ; i ++ ){ cin >> w [ i ] >> c [ i ] >> n [ i ]; } for ( int i = 1 ; i <= N ; i ++ ){ //\u7b2c\u51e0\u4ef6\u7269\u54c1 for ( int j = V ; j >= 0 ; j -- ){ //\u80cc\u5305\u5927\u5c0f\uff0c\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\u4e00\u5b9a\u8981\u53cd\u7740\u653e for ( int k = 0 ; k <= n [ i ]; k ++ ){ //\u8fd9\u91cc\u5176\u5b9e\u628a\u7269\u54c1\u5f53\u505a\u4e00\u4e2a\u4e00\u4e2a\u5f80\u91cc\u9762\u653e if ( j >= c [ i ] * k ){ dp [ j ] = max ( dp [ j - c [ i ] * k ] + w [ i ] * k , dp [ j ]); } } } } cout << dp [ V ] << endl ; return 0 ; } \u6d4b\u8bd5\u7528\u4f8b 5 10 2 1 2 3 5 3 2 5 1 3 4 2 4 3 8 \u5e94\u5f97\u7ed3\u679c\uff1a14 03\u5b8c\u5168\u80cc\u5305\u95ee\u9898 \u00b6 \u5728\u591a\u91cd\u80cc\u5305\u95ee\u9898\u4e0a\u628a\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf\u53d6\u6d88\u9650\u5236 5 10 2 1 3 5 2 5 3 4 4 3 \u5e94\u5f97\u7ed3\u679c\uff1a20 \u89e3\u51b3\u601d\u8def\uff1a\u8f6c\u6362\u6210\u591a\u91cd\u80cc\u5305\u95ee\u9898 \u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u591a\u91cd\u80cc\u5305\u6765\u89e3\u51b3\uff0c\u53ea\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1o(n v v)\uff0c\u56e0\u4e3a\u867d\u7136\u7269\u54c1\u6570\u91cf\u6ca1\u6709\u4e0a\u9650\uff0c\u4f46\u5176\u5b9e\u7269\u54c1\u6570\u91cf\u7684\u4e0a\u9650\u5c31\u662f\u80cc\u5305\u7684\u4e0a\u9650\uff0c\u53ea\u9700\u8981\u5904\u7406\u6570\u91cf*\u4f53\u79ef<\u5269\u4f59\u7a7a\u95f4\u3002 \u89c2\u5bdf\u540e\u53d1\u73b0\uff0c\u4e4b\u524d\u7684\u591a\u91cd\u80cc\u5305\u95ee\u9898\u4e2d\uff0c\u7b2c\u4e09\u91cd\u5faa\u73af\u4ec5\u4ec5\u662f\u4e3a\u4e86\u9650\u5236\u6570\u91cf \u548c01\u80cc\u5305\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c01\u80cc\u5305\u6bcf\u4e00\u8f6e\u8bb0\u5f55\u7684\u90fd\u662f\u540c\u4e00\u4ef6\u7269\u54c1\u7684\u7ed3\u679c\uff0c\u800c\u5b8c\u5168\u80cc\u5305\u8bb0\u5f55\u7684\u662f\u4e00\u79cd\u7269\u54c1\u5b58\u653e\u591a\u6b21\uff0c\u5177\u4f53\u4f53\u73b0\u5728dp\u7684\u66f4\u65b0\u4e0a\uff0c01\u80cc\u5305\u6211\u4eec\u5728\u653e\u4e0b\u5f53\u524d\u7269\u54c1\u65f6\u4e4b\u540e\u4ece\u4e0a\u4e00\u8f6e\u62ff\u51fa\u4e4b\u524d\u7684\u8bb0\u5f55\u5728\u5b58\u653e\u4e4b\u524d\u7684\u7269\u54c1\uff0c\u7136\u800c\u5b8c\u5168\u80cc\u5305\u662f\u6bcf\u4e00\u8f6e\u628a\u5f53\u524d\u54c1\u79cd\u653e\u6162\uff0c\u4e4b\u540e\u6bcf\u6b21\u90fd\u53d6\u5f53\u524d\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u662f\u6709\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u60f3\u5728\u91cc\u9762\u3002 #include <iostream> using namespace std ; int dp [ 21 ][ 1010 ]; //\u7269\u54c1\u4e0a\u9650\uff0c\u80cc\u5305\u5927\u5c0f int w [ 10 ], c [ 21 ]; //\u4ef7\u503c,\u4f53\u79ef int main (){ int N , V ; cin >> N >> V ; for ( int i = 1 ; i <= N ; i ++ ){ cin >> w [ i ] >> c [ i ]; } for ( int i = 1 ; i <= N ; i ++ ){ //\u7b2c\u51e0\u4ef6\u7269\u54c1 for ( int j = 0 ; j <= V ; j ++ ){ //\u80cc\u5305\u5927\u5c0f if ( j >= c [ i ]){ dp [ i ][ j ] = max ( dp [ i ][ j - c [ i ]] + w [ i ], dp [ i -1 ][ j ]); } else { dp [ i ][ j ] = dp [ i -1 ][ j ]; } } } cout << dp [ N ][ V ] << endl ; return 0 ; } \u540c\u6837\u53ef\u4ee5\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6 \u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4f18\u5316\u540e\u7684\u7b97\u6cd5\u5185\u5c42\u5faa\u73af\u4e0d\u540c\u4e4b\u524d\uff0c\u56e0\u4e3a\u4e4b\u524d\u5faa\u73af\u5012\u5e8f\u662f\u6015\u7834\u574f\u4e0a\u4e00\u8f6e\u7684\u8bb0\u5f55\uff0c\u7136\u800c\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u662f\u7528\u4e0d\u5230\u4e0a\u4e00\u8f6e\u8bb0\u5f55\u7684 #include <stdio.h> #include <algorithm> #include <iostream> using namespace std ; int dp [ 1010 ]; //\u80cc\u5305\u5927\u5c0f int w [ 10 ], c [ 21 ]; //\u4ef7\u503c,\u4f53\u79ef int main (){ int N , V ; cin >> N >> V ; for ( int i = 1 ; i <= N ; i ++ ){ cin >> w [ i ] >> c [ i ]; } for ( int i = 1 ; i <= N ; i ++ ){ //\u7b2c\u51e0\u4ef6\u7269\u54c1 for ( int j = 1 ; j <= V ; j ++ ){ //\u80cc\u5305\u5927\u5c0f dp [ j ] = max ( dp [ j - c [ i ]] + w [ i ], dp [ j ]); } } cout << dp [ V ] << endl ; return 0 ; }","title":"\u80cc\u5305DP"},{"location":"algorithm/dynamic_programing/%E8%83%8C%E5%8C%85DP/#_1","text":"\u80cc\u5305\u95ee\u9898\u662f\u6307\u5728\u7ed9\u5b9a\u6761\u4ef6\u4e0b \u5982\u4f55\u83b7\u5f97\u6700\u9ad8\u4ef7\u503c\u7684\u95ee\u9898","title":"\u80cc\u5305\u95ee\u9898"},{"location":"algorithm/dynamic_programing/%E8%83%8C%E5%8C%85DP/#01","text":"\u7ed9\u5b9a\u4e00\u4e2a\u91cd\u91cf\u9650\u5236\uff0c\u548c\u51e0\u79cd\u4e0d\u540c\u7269\u54c1\u7684\u4ef7\u503c\u548c\u91cd\u91cf\uff0c\u6bcf\u79cd\u7269\u54c1\u53ea\u6709\u4e00\u4e2a\uff0c\u5bfb\u627e\u80fd\u62ff\u5230\u7684\u6700\u5927\u4ef7\u503c\u662f\u591a\u5c11 01\u80cc\u5305\u95ee\u9898\u6839\u672c\u6307\u7684\u662f\uff0c\u540c\u79cd\u7269\u54c1\u6709\u4e14\u6700\u9ad8\u53ea\u6709\u4e00\u4e2a\uff0c\u5728\u7ed9\u5b9a\u9650\u5236\u4e0b\uff0c\u5982\u4f55\u83b7\u5f97\u6700\u5927\u6536\u76ca \u679a\u4e3e\uff1a\u627e\u51fa\u6240\u6709\u7ec4\u5408","title":"01\u80cc\u5305\u95ee\u9898"},{"location":"algorithm/dynamic_programing/%E8%83%8C%E5%8C%85DP/#_2","text":"\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\u6211\u4eec\u662f\u5426\u8981\u9009\u62e9\u5f53\u524d\u7269\u54c1\uff0c\u9009\u53d6\u4e86\u5f53\u524d\u7269\u54c1\u662f\u5426\u662f\u6700\u5927\u7684\u4ef7\u503c \u505a\u4e00\u4e2an^2\u7684\u7b97\u6cd5 \u5185\u5c42\u5faa\u73af\u8868\u793a\u5bfb\u627e\u5408\u9002\u7684\u5927\u5c0f \u5916\u5c42\u5faa\u73af\u8868\u793a\u7b2c\u51e0\u4ef6\u7269\u54c1 \u6bcf\u6b21\u5185\u5c42\u5faa\u73af\uff0c\u6211\u4eec\u7b2c\u4e00\u4e2a\u8981\u627e\u7684\u662f\u6211\u4eec\u662f\u5426\u80fd\u653e\u4e0b\u5f53\u524d\u7269\u54c1\u3002 \u653e\u4e0b\u5f53\u524d\u7269\u54c1\u540e\uff0c\u662f\u5426\u6bd4\u653e\u4e0a\u4e00\u4ef6\u7269\u54c1\u7684\u4ef7\u503c\u9ad8\uff0c\u9009\u53d6\u9ad8\u8005\u3002 \u4e4b\u540e\u7ee7\u7eed\u67e5\u627e\u5269\u4f59\u7a7a\u95f4\u80fd\u5426\u653e\u4e0b\u4e4b\u524d\u7684\u7269\u54c1\uff0c\u5982\u679c\u80fd\u90a3\u4e48\u548c\u4e0a\u4e00\u8f6e\u7684\u7ed3\u679c\u6bd4\u53d6\u9ad8\u8005\u3002 \u7531\u4e8e\u6bcf\u4e00\u8f6e\u90fd\u662f\u53d6\u6700\u9ad8\u8005\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u8ba8\u8bba\u4e0a\u4e00\u8f6e\u4e4b\u524d\u7684\u5176\u5b83\u7269\u54c1\uff0c\u9898\u76ee\u4e2d\u53ea\u8981\u6c42\u4e86\u6700\u540e\u4ef7\u503c\u3002 \u5185\u5c42\u5faa\u73af\u6bcf\u6b21\u90fd\u662f\u627e\u5230\u5f53\u524d\u4ef7\u503c\u52a0\u4e0a\u4e4b\u524d\u7684\u6700\u9ad8\u4ef7\u503c\uff0c\u4e4b\u524d\u7684\u548c\u5f53\u524d\u7269\u54c1\u65e0\u5173\u6240\u4ee5\u81ea\u7136\u4e0d\u4f1a\u91cd\u590d\u9009\u53d6\u3002 #include <iostream> using namespace std ; const int maxn = 1000 ; int dp [ 20 ][ 20 ]; int value [ 20 ], weight [ 20 ]; int main (){ int n , limitw ; cin >> n >> limitw ; //\u7269\u54c1\u4e2a\u6570\uff0c\u80cc\u5305\u5927\u5c0f for ( int i = 1 ; i <= n ; i ++ ){ cin >> value [ i ] >> weight [ i ]; } cout << \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \\n \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 0 ; j <= limitw ; j ++ ){ /*\u7b97\u6cd5\u7684\u552f\u4e00\u8981\u70b9*/ if ( j >= weight [ i ]){ dp [ i ][ j ] = max ( dp [ i -1 ][ j - weight [ i ]] + value [ i ], dp [ i -1 ][ j ]); } else { dp [ i ][ j ] = dp [ i -1 ][ j ]; //\u5982\u679c\u653e\u4e0d\u4e0b\uff0c\u7ee7\u627f\u4e0a\u4e00\u8f6e\u7684\u7ed3\u679c } cout << dp [ i ][ j ] << \" \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 } cout << \" \\n \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 } cout << dp [ n ][ limitw ]; return 0 ; }","title":"\u52a8\u6001\u89c4\u5212"},{"location":"algorithm/dynamic_programing/%E8%83%8C%E5%8C%85DP/#_3","text":"\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u6211\u4eec\u53ea\u6bd4\u5bf9\u4e86\u5f53\u524d\u4e00\u8f6e\u548c\u4e0a\u4e00\u8f6e\u7684\u7ed3\u679c\uff0c\u4e4b\u524d\u7684\u7a7a\u95f4\u7528\u8fc7\u4e00\u6b21\u4e4b\u540e\u5c31\u6ca1\u7528\u4e86 \u6211\u4eec\u53ea\u8981\u5012\u7740\u5bfb\u627e\uff0c\u5c31\u53ef\u4ee5\u4e0d\u7834\u574f\u4e0a\u4e00\u8f6e\u4f4e\u91cd\u91cf\u7684\u4ef7\u503c\uff0c\u4ece\u800c\u627e\u5230\u6700\u5927\u503c \u7a7a\u95f4\u590d\u6742\u5ea6\u7531n^2\u27a1n #include <iostream> using namespace std ; const int maxn = 1000 ; int dp [ 20 ]; int value [ 20 ], weight [ 20 ]; int main (){ int n , limitw ; cin >> n >> limitw ; for ( int i = 1 ; i <= n ; i ++ ){ cin >> value [ i ] >> weight [ i ]; } cout << \"0 1 2 3 4 5 6 7 8 9 10 \\n \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = limitw ; j >= weight [ i ]; j -- ){ dp [ j ] = max ( dp [ j - weight [ i ]] + value [ i ], dp [ j ]); cout << dp [ j ] << \" \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 } cout << \" \\n \" ; //\u66f4\u597d\u7684\u89c2\u5bdf\u7b97\u6cd5 } cout << dp [ limitw ]; return 0 ; }","title":"\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"algorithm/dynamic_programing/%E8%83%8C%E5%8C%85DP/#02","text":"\u6709N\u79cd\u7269\u54c1\uff0c\u7b2ci\u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662fCi\uff0c\u4ef7\u503c\u662fWi\uff0c\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf\u90fd\u662f\u6709\u9650\u7684\uff0c\u4e3aNi\u3002\u73b0\u6709\u5bb9\u91cf\u4e3aV\u7684\u80cc\u5305\uff0c\u653e\u5165\u82e5\u5e72\u7269\u54c1\uff0c\u5728\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7V\u7684\u6761\u4ef6\u4e0b\uff0c\u4f7f\u603b\u4ef7\u503c\u5c3d\u53ef\u80fd\u5927\u3002 \u5728\u4e0d\u9700\u8981\u8bb0\u5f55\u7269\u54c1\u79cd\u7c7b\u7684\u60c5\u51b5\u4e0b\uff0c01\u80cc\u5305\u5c31\u662f\u6bcf\u79cd\u7269\u54c1\u6570\u91cf\u4e3a1\u7684\u591a\u91cd\u80cc\u5305\u95ee\u9898\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f9d\u65e7\u53ef\u4ee5\u91c7\u752801\u80cc\u5305\u7684\u7b97\u6cd5\uff0c\u628a\u7269\u54c1\u62c6\u5206\u6210\u4e00\u4ef6\u4e00\u4ef6\u7684\u3002 #include <iostream> using namespace std ; int dp [ 21 ][ 1010 ]; //\u7269\u54c1\u4e0a\u9650\uff0c\u80cc\u5305\u5927\u5c0f int w [ 10 ], c [ 21 ], n [ 21 ]; //\u4ef7\u503c,\u4f53\u79ef,\u6570\u91cf int main (){ int N , V ; cin >> N >> V ; for ( int i = 1 ; i <= N ; i ++ ){ cin >> w [ i ] >> c [ i ] >> n [ i ]; } for ( int i = 1 ; i <= N ; i ++ ){ //\u7b2c\u51e0\u4ef6\u7269\u54c1 for ( int j = 0 ; j <= V ; j ++ ){ //\u80cc\u5305\u5927\u5c0f for ( int k = 0 ; k <= n [ i ]; k ++ ){ //\u8fd9\u91cc\u5176\u5b9e\u628a\u7269\u54c1\u5f53\u505a\u4e00\u4e2a\u4e00\u4e2a\u5f80\u91cc\u9762\u653e if ( j >= c [ i ] * k ){ dp [ i ][ j ] = max ( dp [ i -1 ][ j - c [ i ] * k ] + w [ i ] * k , dp [ i ][ j ]); } } } } cout << dp [ N ][ V ] << endl ; return 0 ; } \u4f9d\u65e7\u53ef\u4ee5\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u548c01\u80cc\u5305\u540c\u7406 #include <iostream> using namespace std ; int dp [ 1010 ]; //\u80cc\u5305\u5927\u5c0f int w [ 10 ], c [ 21 ], n [ 21 ]; //\u4ef7\u503c,\u4f53\u79ef,\u6570\u91cf int main (){ int N , V ; cin >> N >> V ; for ( int i = 1 ; i <= N ; i ++ ){ cin >> w [ i ] >> c [ i ] >> n [ i ]; } for ( int i = 1 ; i <= N ; i ++ ){ //\u7b2c\u51e0\u4ef6\u7269\u54c1 for ( int j = V ; j >= 0 ; j -- ){ //\u80cc\u5305\u5927\u5c0f\uff0c\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\u4e00\u5b9a\u8981\u53cd\u7740\u653e for ( int k = 0 ; k <= n [ i ]; k ++ ){ //\u8fd9\u91cc\u5176\u5b9e\u628a\u7269\u54c1\u5f53\u505a\u4e00\u4e2a\u4e00\u4e2a\u5f80\u91cc\u9762\u653e if ( j >= c [ i ] * k ){ dp [ j ] = max ( dp [ j - c [ i ] * k ] + w [ i ] * k , dp [ j ]); } } } } cout << dp [ V ] << endl ; return 0 ; } \u6d4b\u8bd5\u7528\u4f8b 5 10 2 1 2 3 5 3 2 5 1 3 4 2 4 3 8 \u5e94\u5f97\u7ed3\u679c\uff1a14","title":"02\u591a\u91cd\u80cc\u5305\u95ee\u9898"},{"location":"algorithm/dynamic_programing/%E8%83%8C%E5%8C%85DP/#03","text":"\u5728\u591a\u91cd\u80cc\u5305\u95ee\u9898\u4e0a\u628a\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf\u53d6\u6d88\u9650\u5236 5 10 2 1 3 5 2 5 3 4 4 3 \u5e94\u5f97\u7ed3\u679c\uff1a20 \u89e3\u51b3\u601d\u8def\uff1a\u8f6c\u6362\u6210\u591a\u91cd\u80cc\u5305\u95ee\u9898 \u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u591a\u91cd\u80cc\u5305\u6765\u89e3\u51b3\uff0c\u53ea\u4e0d\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1o(n v v)\uff0c\u56e0\u4e3a\u867d\u7136\u7269\u54c1\u6570\u91cf\u6ca1\u6709\u4e0a\u9650\uff0c\u4f46\u5176\u5b9e\u7269\u54c1\u6570\u91cf\u7684\u4e0a\u9650\u5c31\u662f\u80cc\u5305\u7684\u4e0a\u9650\uff0c\u53ea\u9700\u8981\u5904\u7406\u6570\u91cf*\u4f53\u79ef<\u5269\u4f59\u7a7a\u95f4\u3002 \u89c2\u5bdf\u540e\u53d1\u73b0\uff0c\u4e4b\u524d\u7684\u591a\u91cd\u80cc\u5305\u95ee\u9898\u4e2d\uff0c\u7b2c\u4e09\u91cd\u5faa\u73af\u4ec5\u4ec5\u662f\u4e3a\u4e86\u9650\u5236\u6570\u91cf \u548c01\u80cc\u5305\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c01\u80cc\u5305\u6bcf\u4e00\u8f6e\u8bb0\u5f55\u7684\u90fd\u662f\u540c\u4e00\u4ef6\u7269\u54c1\u7684\u7ed3\u679c\uff0c\u800c\u5b8c\u5168\u80cc\u5305\u8bb0\u5f55\u7684\u662f\u4e00\u79cd\u7269\u54c1\u5b58\u653e\u591a\u6b21\uff0c\u5177\u4f53\u4f53\u73b0\u5728dp\u7684\u66f4\u65b0\u4e0a\uff0c01\u80cc\u5305\u6211\u4eec\u5728\u653e\u4e0b\u5f53\u524d\u7269\u54c1\u65f6\u4e4b\u540e\u4ece\u4e0a\u4e00\u8f6e\u62ff\u51fa\u4e4b\u524d\u7684\u8bb0\u5f55\u5728\u5b58\u653e\u4e4b\u524d\u7684\u7269\u54c1\uff0c\u7136\u800c\u5b8c\u5168\u80cc\u5305\u662f\u6bcf\u4e00\u8f6e\u628a\u5f53\u524d\u54c1\u79cd\u653e\u6162\uff0c\u4e4b\u540e\u6bcf\u6b21\u90fd\u53d6\u5f53\u524d\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u662f\u6709\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u60f3\u5728\u91cc\u9762\u3002 #include <iostream> using namespace std ; int dp [ 21 ][ 1010 ]; //\u7269\u54c1\u4e0a\u9650\uff0c\u80cc\u5305\u5927\u5c0f int w [ 10 ], c [ 21 ]; //\u4ef7\u503c,\u4f53\u79ef int main (){ int N , V ; cin >> N >> V ; for ( int i = 1 ; i <= N ; i ++ ){ cin >> w [ i ] >> c [ i ]; } for ( int i = 1 ; i <= N ; i ++ ){ //\u7b2c\u51e0\u4ef6\u7269\u54c1 for ( int j = 0 ; j <= V ; j ++ ){ //\u80cc\u5305\u5927\u5c0f if ( j >= c [ i ]){ dp [ i ][ j ] = max ( dp [ i ][ j - c [ i ]] + w [ i ], dp [ i -1 ][ j ]); } else { dp [ i ][ j ] = dp [ i -1 ][ j ]; } } } cout << dp [ N ][ V ] << endl ; return 0 ; } \u540c\u6837\u53ef\u4ee5\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6 \u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4f18\u5316\u540e\u7684\u7b97\u6cd5\u5185\u5c42\u5faa\u73af\u4e0d\u540c\u4e4b\u524d\uff0c\u56e0\u4e3a\u4e4b\u524d\u5faa\u73af\u5012\u5e8f\u662f\u6015\u7834\u574f\u4e0a\u4e00\u8f6e\u7684\u8bb0\u5f55\uff0c\u7136\u800c\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u662f\u7528\u4e0d\u5230\u4e0a\u4e00\u8f6e\u8bb0\u5f55\u7684 #include <stdio.h> #include <algorithm> #include <iostream> using namespace std ; int dp [ 1010 ]; //\u80cc\u5305\u5927\u5c0f int w [ 10 ], c [ 21 ]; //\u4ef7\u503c,\u4f53\u79ef int main (){ int N , V ; cin >> N >> V ; for ( int i = 1 ; i <= N ; i ++ ){ cin >> w [ i ] >> c [ i ]; } for ( int i = 1 ; i <= N ; i ++ ){ //\u7b2c\u51e0\u4ef6\u7269\u54c1 for ( int j = 1 ; j <= V ; j ++ ){ //\u80cc\u5305\u5927\u5c0f dp [ j ] = max ( dp [ j - c [ i ]] + w [ i ], dp [ j ]); } } cout << dp [ V ] << endl ; return 0 ; }","title":"03\u5b8c\u5168\u80cc\u5305\u95ee\u9898"},{"location":"algorithm/general/%E5%B9%B6%E6%9F%A5%E9%9B%86/","text":"\u5e76\u67e5\u96c6\u7b80\u4ecb \u00b6 \u8bdd\u8bf4\u6c5f\u6e56\u4e0a\u6563\u843d\u7740\u5404\u5f0f\u5404\u6837\u7684\u5927\u4fa0\uff0c\u6709\u4e0a\u5343\u4e2a\u4e4b\u591a\u3002\u4ed6\u4eec\u6ca1\u6709\u4ec0\u4e48\u6b63\u5f53\u804c\u4e1a\uff0c\u6574\u5929\u80cc\u7740\u5251\u5728\u5916\u9762\u8d70\u6765\u8d70\u53bb\uff0c\u78b0\u5230\u548c\u81ea\u5df1\u4e0d\u662f\u4e00\u8def\u4eba\u7684\uff0c\u5c31\u514d\u4e0d\u4e86\u8981\u6253\u4e00\u67b6\u3002\u4f46\u5927\u4fa0\u4eec\u6709\u4e00\u4e2a\u4f18\u70b9\u5c31\u662f\u8bb2\u4e49\u6c14\uff0c\u7edd\u5bf9\u4e0d\u6253\u81ea\u5df1\u7684\u670b\u53cb\u3002\u800c\u4e14\u4ed6\u4eec\u4fe1\u5949\u201c\u670b\u53cb\u7684\u670b\u53cb\u5c31\u662f\u6211\u7684\u670b\u53cb\u201d\uff0c\u53ea\u8981\u662f\u80fd\u901a\u8fc7\u670b\u53cb\u5173\u7cfb\u4e32\u8054\u8d77\u6765\u7684\uff0c\u4e0d\u7ba1\u62d0\u4e86\u591a\u5c11\u4e2a\u5f2f\uff0c\u90fd\u8ba4\u4e3a\u662f\u81ea\u5df1\u4eba\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6c5f\u6e56\u4e0a\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u4e00\u4e2a\u7684\u7fa4\u843d\uff0c\u901a\u8fc7\u4e24\u4e24\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u4e32\u8054\u8d77\u6765\u3002\u800c\u4e0d\u5728\u540c\u4e00\u4e2a\u7fa4\u843d\u7684\u4eba\uff0c\u65e0\u8bba\u5982\u4f55\u90fd\u65e0\u6cd5\u901a\u8fc7\u670b\u53cb\u5173\u7cfb\u8fde\u8d77\u6765\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u653e\u5fc3\u5f80\u6b7b\u4e86\u6253\u3002\u4f46\u662f\u4e24\u4e2a\u539f\u672c\u4e92\u4e0d\u76f8\u8bc6\u7684\u4eba\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u670b\u53cb\u5708\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u670b\u53cb\u5708\u5185\u63a8\u4e3e\u51fa\u4e00\u4e2a\u6bd4\u8f83\u6709\u540d\u671b\u7684\u4eba\uff0c\u4f5c\u4e3a\u8be5\u5708\u5b50\u7684\u4ee3\u8868\u4eba\u7269\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u5708\u5b50\u5c31\u53ef\u4ee5\u8fd9\u6837\u547d\u540d\u201c\u9f50\u8fbe\u5185\u670b\u53cb\u4e4b\u961f\u201d\u201c\u7f57\u7eb3\u5c14\u591a\u670b\u53cb\u4e4b\u961f\u201d\u2026\u2026\u4e24\u4eba\u53ea\u8981\u4e92\u76f8\u5bf9\u4e00\u4e0b\u81ea\u5df1\u7684\u961f\u957f\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u4eba\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u654c\u53cb\u5173\u7cfb\u4e86\u3002 \u4f46\u662f\u8fd8\u6709\u95ee\u9898\u554a\uff0c\u5927\u4fa0\u4eec\u53ea\u77e5\u9053\u81ea\u5df1\u76f4\u63a5\u7684\u670b\u53cb\u662f\u8c01\uff0c\u5f88\u591a\u4eba\u538b\u6839\u5c31\u4e0d\u8ba4\u8bc6\u961f\u957f\uff0c\u8981\u5224\u65ad\u81ea\u5df1\u7684\u961f\u957f\u662f\u8c01\uff0c\u53ea\u80fd\u6f2b\u65e0\u76ee\u7684\u7684\u901a\u8fc7\u670b\u53cb\u7684\u670b\u53cb\u5173\u7cfb\u95ee\u4e0b\u53bb\uff1a\u201c\u4f60\u662f\u4e0d\u662f\u961f\u957f\uff1f\u4f60\u662f\u4e0d\u662f\u961f\u957f\uff1f\u201d \u8fd9\u6837\u4e00\u6765\uff0c\u961f\u957f\u9762\u5b50\u4e0a\u6302\u4e0d\u4f4f\u4e86\uff0c\u800c\u4e14\u6548\u7387\u592a\u4f4e\uff0c\u8fd8\u6709\u53ef\u80fd\u9677\u5165\u65e0\u9650\u5faa\u73af\u4e2d\u3002 \u4e8e\u662f\u961f\u957f\u4e0b\u4ee4\uff0c\u91cd\u65b0\u7ec4\u961f\u3002\u961f\u5185\u6240\u6709\u4eba\u5b9e\u884c\u5206\u7b49\u7ea7\u5236\u5ea6\uff0c\u5f62\u6210\u6811\u72b6\u7ed3\u6784\uff0c\u6211\u961f\u957f\u5c31\u662f\u6839\u8282\u70b9\uff0c\u4e0b\u9762\u5206\u522b\u662f\u4e8c\u7ea7\u961f\u5458\u3001\u4e09\u7ea7\u961f\u5458\u3002\u6bcf\u4e2a\u4eba\u53ea\u8981\u8bb0\u4f4f\u81ea\u5df1\u7684\u4e0a\u7ea7\u662f\u8c01\u5c31\u884c\u4e86\u3002\u9047\u5230\u5224\u65ad\u654c\u53cb\u7684\u65f6\u5019\uff0c\u53ea\u8981\u4e00\u5c42\u5c42\u5411\u4e0a\u95ee\uff0c\u76f4\u5230\u6700\u9ad8\u5c42\uff0c\u5c31\u53ef\u4ee5\u5728\u77ed\u65f6\u95f4\u5185\u786e\u5b9a\u961f\u957f\u662f\u8c01\u4e86\u3002\u7531\u4e8e\u6211\u4eec\u5173\u5fc3\u7684\u53ea\u662f\u4e24\u4e2a\u4eba\u4e4b\u95f4\u662f\u5426\u8fde\u901a\uff0c\u81f3\u4e8e\u4ed6\u4eec\u662f\u5982\u4f55\u8fde\u901a\u7684\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u5708\u5b50\u5185\u90e8\u7684\u7ed3\u6784\u662f\u600e\u6837\u7684\uff0c\u751a\u81f3\u961f\u957f\u662f\u8c01\uff0c\u5e76\u4e0d\u91cd\u8981\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u653e\u4efb\u961f\u957f\u968f\u610f\u91cd\u65b0\u7ec4\u961f\uff0c\u53ea\u8981\u4e0d\u641e\u9519\u654c\u53cb\u5173\u7cfb\u5c31\u597d\u4e86\u3002\u4e8e\u662f\uff0c\u95e8\u6d3e\u4ea7\u751f\u4e86\u3002 \u2014\u2014 \u535a\u5ba2\uff1a\u6570\u636e\u7ed3\u67844\u2014\u2014\u5e76\u67e5\u96c6\uff08\u5165\u95e8\uff09 \u5e76\u67e5\u96c6 \u00b6 **\u5e76\u67e5\u96c6\uff08Union-find Sets\uff09\u662f\u4e00\u79cd\u975e\u5e38\u7cbe\u5de7\u800c\u5b9e\u7528\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u76f8\u4ea4\u96c6\u5408\u7684\u5408\u5e76\u95ee\u9898\u3002**\u4e00\u4e9b\u5e38\u89c1\u7684\u7528\u9014\u6709\u6c42\u8fde\u901a\u5b50\u56fe\u3001\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684 Kruskal \u7b97\u6cd5\u548c\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08Least Common Ancestors, LCA\uff09\u7b49\u3002 \u4f7f\u7528\u5e76\u67e5\u96c6\u65f6\uff0c\u9996\u5148\u4f1a\u5b58\u5728 \u4e00\u7ec4\u4e0d\u76f8\u4ea4\u7684\u52a8\u6001\u96c6\u5408 \uff0c\u4e00\u822c\u90fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 \u6bcf\u4e2a\u96c6\u5408\u53ef\u80fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\uff0c\u5e76\u9009\u51fa\u96c6\u5408\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4ee3\u8868\uff0c\u79f0\u4e3a\u96c6\u5408\u7684 \u4ee3\u8868\u5143 \u3002 \u6bcf\u4e2a\u96c6\u5408\u4e2d\u5177\u4f53\u5305\u542b\u4e86\u54ea\u4e9b\u5143\u7d20\u662f\u4e0d\u5173\u5fc3\u7684\uff0c\u5177\u4f53\u9009\u62e9\u54ea\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4ee3\u8868\u4e00\u822c\u4e5f\u662f\u4e0d\u5173\u5fc3\u7684\u3002\u6211\u4eec\u5173\u5fc3\u7684\u662f\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u5f88\u5feb\u7684\u627e\u5230\u8fd9\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\uff08\u7684\u4ee3\u8868\uff09\uff0c\u4ee5\u53ca\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\uff0c\u800c\u4e14\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u5e38\u6570\u7ea7\u7684\u3002 \u5e76\u67e5\u96c6\u7684\u5b9e\u73b0\u539f\u7406\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f**\u4f7f\u7528\u6811\u6765\u8868\u793a\u96c6\u5408**\uff0c\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5c31\u8868\u793a\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u6811\u6839\u5bf9\u5e94\u7684\u5143\u7d20\u5c31\u662f\u8be5\u96c6\u5408\u7684\u4ee3\u8868\u5143\uff0c\u5982\u56fe 1 \u6240\u793a\u3002 \u56fe1 \u5e76\u67e5\u96c6\u7684\u6811\u578b\u8868\u793a \u56fe\u4e2d\u6709\u4e24\u68f5\u6811\uff0c\u5206\u522b\u5bf9\u5e94\u4e24\u4e2a\u96c6\u5408\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e3a \uff0c\u4ee3\u8868\u5143\u7d20\u662f \uff1b\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e3a \uff0c\u4ee3\u8868\u5143\u7d20\u662f \u3002 \u5e76\u67e5\u96c6\u7684\u57fa\u672c\u64cd\u4f5c\u6709\u4e09\u4e2a\uff1a makeSet(s)\uff1a\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5e76\u67e5\u96c6\uff0c\u5176\u4e2d\u5305\u542b s \u4e2a\u5355\u5143\u7d20\u96c6\u5408\u3002\u3010\u521d\u59cb\u5316\u3011 unionSet(x, y)\uff1a\u628a\u5143\u7d20 x \u548c\u5143\u7d20 y \u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\uff0c\u8981\u6c42 x \u548c y \u6240\u5728\u7684\u96c6\u5408\u4e0d\u76f8\u4ea4\uff0c\u5982\u679c\u76f8\u4ea4\u5219\u4e0d\u5408\u5e76\u3002\u3010\u5408\u5e76\u3011 find(x)\uff1a\u627e\u5230\u5143\u7d20 x \u6240\u5728\u7684\u96c6\u5408\u7684\u4ee3\u8868\uff0c\u8be5\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u4f4d\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u53ea\u8981\u5c06\u5b83\u4eec\u5404\u81ea\u7684\u4ee3\u8868\u6bd4\u8f83\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u3010\u67e5\u627e\u3011 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u53eb\u5e76\u67e5\u96c6\u7684\u539f\u56e0\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e3a\u4e86\u8fdb\u884c\u67e5\u548c\u5e76\u64cd\u4f5c\u3002 \u3010\u521d\u59cb\u5316\u3011 \u00b6 \u6811\u7684\u8282\u70b9\u8868\u793a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff0c\u6307\u9488\u8868\u793a\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488\uff0c \u6839\u8282\u70b9\u7684\u6307\u9488\u6307\u5411\u81ea\u5df1\uff0c\u8868\u793a\u5176\u6ca1\u6709\u7236\u8282\u70b9\u3002 \u56fe2 \u6784\u9020\u3001\u521d\u59cb\u5316\u5e76\u67e5\u96c6 #define N 105 int parent [ N ]; // \u6811\u578b\u7ed3\u6784\u7684\u6839\u8282\u70b9 int r [ N ]; // \u6811\u7684\u79e9 //\u521d\u59cb\u5316 int init ( int n ) //\u5bf9n\u4e2a\u7ed3\u70b9\u521d\u59cb\u5316 { for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = i ; // \u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e0a\u7ea7\u90fd\u662f\u81ea\u5df1 r [ i ] = 0 ; // \u6bcf\u4e2a\u7ed3\u70b9\u6784\u6210\u7684\u6811\u7684\u79e9\u4e3a0 } } \u3010\u67e5\u627e\u3011 \u00b6 \u6cbf\u7740\u6bcf\u4e2a\u7ed3\u70b9\u7684\u7236\u8282\u70b9\u4e0d\u65ad\u5411\u4e0a\u67e5\u627e\uff0c\u6700\u7ec8\u5c31\u53ef\u4ee5\u627e\u5230\u8be5\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u5373\u8be5\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u3002 int find_parent ( int x ) // \u67e5\u627e\u7ed3\u70b9x\u7684\u6839\u7ed3\u70b9 { if ( parent [ x ] == x ) // \u9012\u5f52\u51fa\u53e3\uff1ax\u7684\u4e0a\u7ea7\u4e3ax\u672c\u8eab\uff0c\u5373x\u4e3a\u6839\u7ed3\u70b9 { return x ; } return find_parent ( parent [ x ]); // \u9012\u5f52\u67e5\u627e } \u901a\u8fc7\u4e0b\u9762\u7684\u56fe\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u666e\u901a\u7684\u67e5\u627e\u8fc7\u7a0b\u76f8\u5bf9\u8f83\u9ebb\u70e6\uff0c\u4f8b\u5982\u5bfb\u627ed\u7ed3\u70b9\u7684\u6839\u8282\u70b9\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7** **\u624d\u80fd\u6700\u7ec8\u627e\u5230\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 \u8def\u5f84\u538b\u7f29\u7b97\u6cd5 \uff0c\u90a3\u4e48\u53ea\u9700\u8981\u67e5\u627e\u4e00\u6b21\uff0c\u5c31\u80fd\u786e\u5b9ad\u7ed3\u70b9\u7684\u7ed3\u70b9\uff0c\u5373** \u3002** \u56fe3 \u8def\u5f84\u538b\u7f29\uff08\u4f18\u5316\u4e00\uff09 //\u3010\u9012\u5f52\u7248\u672c\u3011 // \u6539\u8fdb\u67e5\u627e\u7b97\u6cd5\uff1a\u5b8c\u6210\u8def\u5f84\u538b\u7f29\uff0c\u5c06x\u7684\u4e0a\u7ea7\u76f4\u63a5\u53d8\u4e3a\u6839\u7ed3\u70b9\uff0c\u90a3\u4e48\u6811\u7684\u9ad8\u5ea6\u5c31\u4f1a\u5927\u5927\u964d\u4f4e int find_parent ( int x ) // \u67e5\u627e\u7ed3\u70b9x\u7684\u6839\u7ed3\u70b9 { if ( parent [ x ] == x ) // \u9012\u5f52\u51fa\u53e3\uff1ax\u7684\u4e0a\u7ea7\u4e3ax\u672c\u8eab\uff0c\u5373x\u4e3a\u6839\u7ed3\u70b9 { return x ; } return parent [ x ] = find_parent ( parent [ x ]); // \u9012\u5f52\u67e5\u627e\uff0c\u6b64\u4ee3\u7801\u76f8\u5f53\u4e8e\u5148\u627e\u5230\u6839\u7ed3\u70b9rootx\uff0c\u7136\u540epre[x]=rootx } //\u3010\u8def\u5f84\u538b\u7f29\u7684\u53e6\u4e00\u79cd\u5199\u6cd5\u3011 //\u3010\u4e2a\u4eba\u66f4\u504f\u5411\u4e8e\u8fd9\u79cd\u5199\u6cd5\u3011 int find_parent ( int x ) { if ( parent [ x ] != x ) parent [ x ] = find_parent ( parent [ x ]); return parent [ x ]; } \u3010\u5408\u5e76\u3011 \u00b6 \u5e76\u67e5\u96c6\u7684\u5408\u5e76\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u96c6\u5408\u7684\u6811\u6839\u6307\u5411\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u6811\u6839\u3002 \u56fe4 \u5e76\u67e5\u96c6\u7684\u5408\u5e76 //\u3010\u5e76\u3011 // \u6734\u7d20\u5408\u5e76 void unite ( int x , int y ) { int root_x , root_y ; root_x = find_parent ( x ); root_y = find_parent ( y ); if ( root_x != root_y ) parent [ root_y ] = root_x ; } \u4e5f\u53ef\u4ee5\u91c7\u7528\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\u2014\u2014 \u6309\u79e9\u5408\u5e76 \uff0c\u6ce8\u610f**\u521d\u59cb\u5316\u7684\u65f6\u5019\u9700\u8981\u5c06 \u5168\u90e8\u7f6e0\u3002** \u56fe5 \u6309\u79e9\u5408\u5e76\uff08\u4f18\u5316\u4e8c\uff09 //\u3010\u5e76\u3011 // \u6309\u79e9\u5408\u5e76 void unite ( int x , int y ) { int root_x , root_y ; root_x = find_parent ( x ); root_y = find_parent ( y ); // \u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408 if ( root_x == root_y ) return ; // \u5c5e\u4e8e\u4e0d\u540c\u96c6\u5408 //\u4ee4 y\u7684\u6839\u7ed3\u70b9\u7684\u4e0a\u7ea7\u4e3a root_x if ( r [ root_x ] > r [ root_y ]) parent [ root_y ] = root_x ; else { // \u79e9\u76f8\u7b49\uff0c\u5408\u5e76\u4e4b\u540e\u79e9\u9700\u8981\u52a0 1 if ( r [ root_x ] == r [ root_y ]) r [ root_y ] ++ ; parent [ root_x ] = root_y ; } } \u5e76\u67e5\u96c6\u7684\u5206\u6790\u4e0e\u7528\u6cd5\uff1a \u00b6 \u65f6\u7a7a\u590d\u6742\u5ea6\uff1a \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u540c\u65f6\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u3001\u6309\u79e9\uff08rank\uff09\u5408\u5e76\u4f18\u5316\u7684\u7a0b\u5e8f\u6bcf\u4e2a\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u4ec5\u4e3a \uff0c\u5176\u4e2d \u662f \u7684\u53cd\u51fd\u6570\u3002\u56e0\u4e3a \u662f\u5176\u53cd\u51fd\u6570\uff0c\u6545** \u5728 \u5341\u5206\u5de8\u5927\u65f6\u8fd8\u662f\u5c0f\u4e8e 5\u3002 \u56e0\u6b64\uff0c**\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u662f\u4e00\u4e2a\u6781\u5c0f\u7684\u5e38\u6570\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \uff08n\u4e3a\u5143\u7d20\u4e2a\u6570\uff09 \u6309\u79e9\u5408\u5e76\u4f1a\u591a\u4e00\u4e2a\u4fdd\u5b58\u79e9\u7684\u8f85\u52a9\u7a7a\u95f4\uff0c\u5373 \u3002","title":"\u5e76\u67e5\u96c6"},{"location":"algorithm/general/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_1","text":"\u8bdd\u8bf4\u6c5f\u6e56\u4e0a\u6563\u843d\u7740\u5404\u5f0f\u5404\u6837\u7684\u5927\u4fa0\uff0c\u6709\u4e0a\u5343\u4e2a\u4e4b\u591a\u3002\u4ed6\u4eec\u6ca1\u6709\u4ec0\u4e48\u6b63\u5f53\u804c\u4e1a\uff0c\u6574\u5929\u80cc\u7740\u5251\u5728\u5916\u9762\u8d70\u6765\u8d70\u53bb\uff0c\u78b0\u5230\u548c\u81ea\u5df1\u4e0d\u662f\u4e00\u8def\u4eba\u7684\uff0c\u5c31\u514d\u4e0d\u4e86\u8981\u6253\u4e00\u67b6\u3002\u4f46\u5927\u4fa0\u4eec\u6709\u4e00\u4e2a\u4f18\u70b9\u5c31\u662f\u8bb2\u4e49\u6c14\uff0c\u7edd\u5bf9\u4e0d\u6253\u81ea\u5df1\u7684\u670b\u53cb\u3002\u800c\u4e14\u4ed6\u4eec\u4fe1\u5949\u201c\u670b\u53cb\u7684\u670b\u53cb\u5c31\u662f\u6211\u7684\u670b\u53cb\u201d\uff0c\u53ea\u8981\u662f\u80fd\u901a\u8fc7\u670b\u53cb\u5173\u7cfb\u4e32\u8054\u8d77\u6765\u7684\uff0c\u4e0d\u7ba1\u62d0\u4e86\u591a\u5c11\u4e2a\u5f2f\uff0c\u90fd\u8ba4\u4e3a\u662f\u81ea\u5df1\u4eba\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6c5f\u6e56\u4e0a\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u4e00\u4e2a\u7684\u7fa4\u843d\uff0c\u901a\u8fc7\u4e24\u4e24\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u4e32\u8054\u8d77\u6765\u3002\u800c\u4e0d\u5728\u540c\u4e00\u4e2a\u7fa4\u843d\u7684\u4eba\uff0c\u65e0\u8bba\u5982\u4f55\u90fd\u65e0\u6cd5\u901a\u8fc7\u670b\u53cb\u5173\u7cfb\u8fde\u8d77\u6765\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u653e\u5fc3\u5f80\u6b7b\u4e86\u6253\u3002\u4f46\u662f\u4e24\u4e2a\u539f\u672c\u4e92\u4e0d\u76f8\u8bc6\u7684\u4eba\uff0c\u5982\u4f55\u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u670b\u53cb\u5708\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u670b\u53cb\u5708\u5185\u63a8\u4e3e\u51fa\u4e00\u4e2a\u6bd4\u8f83\u6709\u540d\u671b\u7684\u4eba\uff0c\u4f5c\u4e3a\u8be5\u5708\u5b50\u7684\u4ee3\u8868\u4eba\u7269\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u5708\u5b50\u5c31\u53ef\u4ee5\u8fd9\u6837\u547d\u540d\u201c\u9f50\u8fbe\u5185\u670b\u53cb\u4e4b\u961f\u201d\u201c\u7f57\u7eb3\u5c14\u591a\u670b\u53cb\u4e4b\u961f\u201d\u2026\u2026\u4e24\u4eba\u53ea\u8981\u4e92\u76f8\u5bf9\u4e00\u4e0b\u81ea\u5df1\u7684\u961f\u957f\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u4eba\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u654c\u53cb\u5173\u7cfb\u4e86\u3002 \u4f46\u662f\u8fd8\u6709\u95ee\u9898\u554a\uff0c\u5927\u4fa0\u4eec\u53ea\u77e5\u9053\u81ea\u5df1\u76f4\u63a5\u7684\u670b\u53cb\u662f\u8c01\uff0c\u5f88\u591a\u4eba\u538b\u6839\u5c31\u4e0d\u8ba4\u8bc6\u961f\u957f\uff0c\u8981\u5224\u65ad\u81ea\u5df1\u7684\u961f\u957f\u662f\u8c01\uff0c\u53ea\u80fd\u6f2b\u65e0\u76ee\u7684\u7684\u901a\u8fc7\u670b\u53cb\u7684\u670b\u53cb\u5173\u7cfb\u95ee\u4e0b\u53bb\uff1a\u201c\u4f60\u662f\u4e0d\u662f\u961f\u957f\uff1f\u4f60\u662f\u4e0d\u662f\u961f\u957f\uff1f\u201d \u8fd9\u6837\u4e00\u6765\uff0c\u961f\u957f\u9762\u5b50\u4e0a\u6302\u4e0d\u4f4f\u4e86\uff0c\u800c\u4e14\u6548\u7387\u592a\u4f4e\uff0c\u8fd8\u6709\u53ef\u80fd\u9677\u5165\u65e0\u9650\u5faa\u73af\u4e2d\u3002 \u4e8e\u662f\u961f\u957f\u4e0b\u4ee4\uff0c\u91cd\u65b0\u7ec4\u961f\u3002\u961f\u5185\u6240\u6709\u4eba\u5b9e\u884c\u5206\u7b49\u7ea7\u5236\u5ea6\uff0c\u5f62\u6210\u6811\u72b6\u7ed3\u6784\uff0c\u6211\u961f\u957f\u5c31\u662f\u6839\u8282\u70b9\uff0c\u4e0b\u9762\u5206\u522b\u662f\u4e8c\u7ea7\u961f\u5458\u3001\u4e09\u7ea7\u961f\u5458\u3002\u6bcf\u4e2a\u4eba\u53ea\u8981\u8bb0\u4f4f\u81ea\u5df1\u7684\u4e0a\u7ea7\u662f\u8c01\u5c31\u884c\u4e86\u3002\u9047\u5230\u5224\u65ad\u654c\u53cb\u7684\u65f6\u5019\uff0c\u53ea\u8981\u4e00\u5c42\u5c42\u5411\u4e0a\u95ee\uff0c\u76f4\u5230\u6700\u9ad8\u5c42\uff0c\u5c31\u53ef\u4ee5\u5728\u77ed\u65f6\u95f4\u5185\u786e\u5b9a\u961f\u957f\u662f\u8c01\u4e86\u3002\u7531\u4e8e\u6211\u4eec\u5173\u5fc3\u7684\u53ea\u662f\u4e24\u4e2a\u4eba\u4e4b\u95f4\u662f\u5426\u8fde\u901a\uff0c\u81f3\u4e8e\u4ed6\u4eec\u662f\u5982\u4f55\u8fde\u901a\u7684\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u5708\u5b50\u5185\u90e8\u7684\u7ed3\u6784\u662f\u600e\u6837\u7684\uff0c\u751a\u81f3\u961f\u957f\u662f\u8c01\uff0c\u5e76\u4e0d\u91cd\u8981\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u653e\u4efb\u961f\u957f\u968f\u610f\u91cd\u65b0\u7ec4\u961f\uff0c\u53ea\u8981\u4e0d\u641e\u9519\u654c\u53cb\u5173\u7cfb\u5c31\u597d\u4e86\u3002\u4e8e\u662f\uff0c\u95e8\u6d3e\u4ea7\u751f\u4e86\u3002 \u2014\u2014 \u535a\u5ba2\uff1a\u6570\u636e\u7ed3\u67844\u2014\u2014\u5e76\u67e5\u96c6\uff08\u5165\u95e8\uff09","title":"\u5e76\u67e5\u96c6\u7b80\u4ecb"},{"location":"algorithm/general/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_2","text":"**\u5e76\u67e5\u96c6\uff08Union-find Sets\uff09\u662f\u4e00\u79cd\u975e\u5e38\u7cbe\u5de7\u800c\u5b9e\u7528\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u4e0d\u76f8\u4ea4\u96c6\u5408\u7684\u5408\u5e76\u95ee\u9898\u3002**\u4e00\u4e9b\u5e38\u89c1\u7684\u7528\u9014\u6709\u6c42\u8fde\u901a\u5b50\u56fe\u3001\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684 Kruskal \u7b97\u6cd5\u548c\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08Least Common Ancestors, LCA\uff09\u7b49\u3002 \u4f7f\u7528\u5e76\u67e5\u96c6\u65f6\uff0c\u9996\u5148\u4f1a\u5b58\u5728 \u4e00\u7ec4\u4e0d\u76f8\u4ea4\u7684\u52a8\u6001\u96c6\u5408 \uff0c\u4e00\u822c\u90fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 \u6bcf\u4e2a\u96c6\u5408\u53ef\u80fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\uff0c\u5e76\u9009\u51fa\u96c6\u5408\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4ee3\u8868\uff0c\u79f0\u4e3a\u96c6\u5408\u7684 \u4ee3\u8868\u5143 \u3002 \u6bcf\u4e2a\u96c6\u5408\u4e2d\u5177\u4f53\u5305\u542b\u4e86\u54ea\u4e9b\u5143\u7d20\u662f\u4e0d\u5173\u5fc3\u7684\uff0c\u5177\u4f53\u9009\u62e9\u54ea\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4ee3\u8868\u4e00\u822c\u4e5f\u662f\u4e0d\u5173\u5fc3\u7684\u3002\u6211\u4eec\u5173\u5fc3\u7684\u662f\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u5f88\u5feb\u7684\u627e\u5230\u8fd9\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\uff08\u7684\u4ee3\u8868\uff09\uff0c\u4ee5\u53ca\u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u7684\u96c6\u5408\uff0c\u800c\u4e14\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u5e38\u6570\u7ea7\u7684\u3002 \u5e76\u67e5\u96c6\u7684\u5b9e\u73b0\u539f\u7406\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u662f**\u4f7f\u7528\u6811\u6765\u8868\u793a\u96c6\u5408**\uff0c\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5c31\u8868\u793a\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u6811\u6839\u5bf9\u5e94\u7684\u5143\u7d20\u5c31\u662f\u8be5\u96c6\u5408\u7684\u4ee3\u8868\u5143\uff0c\u5982\u56fe 1 \u6240\u793a\u3002 \u56fe1 \u5e76\u67e5\u96c6\u7684\u6811\u578b\u8868\u793a \u56fe\u4e2d\u6709\u4e24\u68f5\u6811\uff0c\u5206\u522b\u5bf9\u5e94\u4e24\u4e2a\u96c6\u5408\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u96c6\u5408\u4e3a \uff0c\u4ee3\u8868\u5143\u7d20\u662f \uff1b\u7b2c\u4e8c\u4e2a\u96c6\u5408\u4e3a \uff0c\u4ee3\u8868\u5143\u7d20\u662f \u3002 \u5e76\u67e5\u96c6\u7684\u57fa\u672c\u64cd\u4f5c\u6709\u4e09\u4e2a\uff1a makeSet(s)\uff1a\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5e76\u67e5\u96c6\uff0c\u5176\u4e2d\u5305\u542b s \u4e2a\u5355\u5143\u7d20\u96c6\u5408\u3002\u3010\u521d\u59cb\u5316\u3011 unionSet(x, y)\uff1a\u628a\u5143\u7d20 x \u548c\u5143\u7d20 y \u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\uff0c\u8981\u6c42 x \u548c y \u6240\u5728\u7684\u96c6\u5408\u4e0d\u76f8\u4ea4\uff0c\u5982\u679c\u76f8\u4ea4\u5219\u4e0d\u5408\u5e76\u3002\u3010\u5408\u5e76\u3011 find(x)\uff1a\u627e\u5230\u5143\u7d20 x \u6240\u5728\u7684\u96c6\u5408\u7684\u4ee3\u8868\uff0c\u8be5\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5224\u65ad\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u4f4d\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u53ea\u8981\u5c06\u5b83\u4eec\u5404\u81ea\u7684\u4ee3\u8868\u6bd4\u8f83\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u3010\u67e5\u627e\u3011 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u53eb\u5e76\u67e5\u96c6\u7684\u539f\u56e0\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e3a\u4e86\u8fdb\u884c\u67e5\u548c\u5e76\u64cd\u4f5c\u3002","title":"\u5e76\u67e5\u96c6"},{"location":"algorithm/general/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_3","text":"\u6811\u7684\u8282\u70b9\u8868\u793a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff0c\u6307\u9488\u8868\u793a\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488\uff0c \u6839\u8282\u70b9\u7684\u6307\u9488\u6307\u5411\u81ea\u5df1\uff0c\u8868\u793a\u5176\u6ca1\u6709\u7236\u8282\u70b9\u3002 \u56fe2 \u6784\u9020\u3001\u521d\u59cb\u5316\u5e76\u67e5\u96c6 #define N 105 int parent [ N ]; // \u6811\u578b\u7ed3\u6784\u7684\u6839\u8282\u70b9 int r [ N ]; // \u6811\u7684\u79e9 //\u521d\u59cb\u5316 int init ( int n ) //\u5bf9n\u4e2a\u7ed3\u70b9\u521d\u59cb\u5316 { for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = i ; // \u6bcf\u4e2a\u7ed3\u70b9\u7684\u4e0a\u7ea7\u90fd\u662f\u81ea\u5df1 r [ i ] = 0 ; // \u6bcf\u4e2a\u7ed3\u70b9\u6784\u6210\u7684\u6811\u7684\u79e9\u4e3a0 } }","title":"\u3010\u521d\u59cb\u5316\u3011"},{"location":"algorithm/general/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_4","text":"\u6cbf\u7740\u6bcf\u4e2a\u7ed3\u70b9\u7684\u7236\u8282\u70b9\u4e0d\u65ad\u5411\u4e0a\u67e5\u627e\uff0c\u6700\u7ec8\u5c31\u53ef\u4ee5\u627e\u5230\u8be5\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u5373\u8be5\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u3002 int find_parent ( int x ) // \u67e5\u627e\u7ed3\u70b9x\u7684\u6839\u7ed3\u70b9 { if ( parent [ x ] == x ) // \u9012\u5f52\u51fa\u53e3\uff1ax\u7684\u4e0a\u7ea7\u4e3ax\u672c\u8eab\uff0c\u5373x\u4e3a\u6839\u7ed3\u70b9 { return x ; } return find_parent ( parent [ x ]); // \u9012\u5f52\u67e5\u627e } \u901a\u8fc7\u4e0b\u9762\u7684\u56fe\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u666e\u901a\u7684\u67e5\u627e\u8fc7\u7a0b\u76f8\u5bf9\u8f83\u9ebb\u70e6\uff0c\u4f8b\u5982\u5bfb\u627ed\u7ed3\u70b9\u7684\u6839\u8282\u70b9\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7** **\u624d\u80fd\u6700\u7ec8\u627e\u5230\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 \u8def\u5f84\u538b\u7f29\u7b97\u6cd5 \uff0c\u90a3\u4e48\u53ea\u9700\u8981\u67e5\u627e\u4e00\u6b21\uff0c\u5c31\u80fd\u786e\u5b9ad\u7ed3\u70b9\u7684\u7ed3\u70b9\uff0c\u5373** \u3002** \u56fe3 \u8def\u5f84\u538b\u7f29\uff08\u4f18\u5316\u4e00\uff09 //\u3010\u9012\u5f52\u7248\u672c\u3011 // \u6539\u8fdb\u67e5\u627e\u7b97\u6cd5\uff1a\u5b8c\u6210\u8def\u5f84\u538b\u7f29\uff0c\u5c06x\u7684\u4e0a\u7ea7\u76f4\u63a5\u53d8\u4e3a\u6839\u7ed3\u70b9\uff0c\u90a3\u4e48\u6811\u7684\u9ad8\u5ea6\u5c31\u4f1a\u5927\u5927\u964d\u4f4e int find_parent ( int x ) // \u67e5\u627e\u7ed3\u70b9x\u7684\u6839\u7ed3\u70b9 { if ( parent [ x ] == x ) // \u9012\u5f52\u51fa\u53e3\uff1ax\u7684\u4e0a\u7ea7\u4e3ax\u672c\u8eab\uff0c\u5373x\u4e3a\u6839\u7ed3\u70b9 { return x ; } return parent [ x ] = find_parent ( parent [ x ]); // \u9012\u5f52\u67e5\u627e\uff0c\u6b64\u4ee3\u7801\u76f8\u5f53\u4e8e\u5148\u627e\u5230\u6839\u7ed3\u70b9rootx\uff0c\u7136\u540epre[x]=rootx } //\u3010\u8def\u5f84\u538b\u7f29\u7684\u53e6\u4e00\u79cd\u5199\u6cd5\u3011 //\u3010\u4e2a\u4eba\u66f4\u504f\u5411\u4e8e\u8fd9\u79cd\u5199\u6cd5\u3011 int find_parent ( int x ) { if ( parent [ x ] != x ) parent [ x ] = find_parent ( parent [ x ]); return parent [ x ]; }","title":"\u3010\u67e5\u627e\u3011"},{"location":"algorithm/general/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_5","text":"\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u5c06\u4e00\u4e2a\u96c6\u5408\u7684\u6811\u6839\u6307\u5411\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u6811\u6839\u3002 \u56fe4 \u5e76\u67e5\u96c6\u7684\u5408\u5e76 //\u3010\u5e76\u3011 // \u6734\u7d20\u5408\u5e76 void unite ( int x , int y ) { int root_x , root_y ; root_x = find_parent ( x ); root_y = find_parent ( y ); if ( root_x != root_y ) parent [ root_y ] = root_x ; } \u4e5f\u53ef\u4ee5\u91c7\u7528\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\u2014\u2014 \u6309\u79e9\u5408\u5e76 \uff0c\u6ce8\u610f**\u521d\u59cb\u5316\u7684\u65f6\u5019\u9700\u8981\u5c06 \u5168\u90e8\u7f6e0\u3002** \u56fe5 \u6309\u79e9\u5408\u5e76\uff08\u4f18\u5316\u4e8c\uff09 //\u3010\u5e76\u3011 // \u6309\u79e9\u5408\u5e76 void unite ( int x , int y ) { int root_x , root_y ; root_x = find_parent ( x ); root_y = find_parent ( y ); // \u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408 if ( root_x == root_y ) return ; // \u5c5e\u4e8e\u4e0d\u540c\u96c6\u5408 //\u4ee4 y\u7684\u6839\u7ed3\u70b9\u7684\u4e0a\u7ea7\u4e3a root_x if ( r [ root_x ] > r [ root_y ]) parent [ root_y ] = root_x ; else { // \u79e9\u76f8\u7b49\uff0c\u5408\u5e76\u4e4b\u540e\u79e9\u9700\u8981\u52a0 1 if ( r [ root_x ] == r [ root_y ]) r [ root_y ] ++ ; parent [ root_x ] = root_y ; } }","title":"\u3010\u5408\u5e76\u3011"},{"location":"algorithm/general/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_6","text":"","title":"\u5e76\u67e5\u96c6\u7684\u5206\u6790\u4e0e\u7528\u6cd5\uff1a"},{"location":"algorithm/general/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_7","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u540c\u65f6\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u3001\u6309\u79e9\uff08rank\uff09\u5408\u5e76\u4f18\u5316\u7684\u7a0b\u5e8f\u6bcf\u4e2a\u64cd\u4f5c\u7684\u5e73\u5747\u65f6\u95f4\u4ec5\u4e3a \uff0c\u5176\u4e2d \u662f \u7684\u53cd\u51fd\u6570\u3002\u56e0\u4e3a \u662f\u5176\u53cd\u51fd\u6570\uff0c\u6545** \u5728 \u5341\u5206\u5de8\u5927\u65f6\u8fd8\u662f\u5c0f\u4e8e 5\u3002 \u56e0\u6b64\uff0c**\u5e73\u5747\u8fd0\u884c\u65f6\u95f4\u662f\u4e00\u4e2a\u6781\u5c0f\u7684\u5e38\u6570\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \uff08n\u4e3a\u5143\u7d20\u4e2a\u6570\uff09 \u6309\u79e9\u5408\u5e76\u4f1a\u591a\u4e00\u4e2a\u4fdd\u5b58\u79e9\u7684\u8f85\u52a9\u7a7a\u95f4\uff0c\u5373 \u3002","title":"\u65f6\u7a7a\u590d\u6742\u5ea6\uff1a"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%A4%A7%E6%B5%81/","text":"\u6d41\u7f51\u7edc \u00b6 \u662f\u4e00\u4e2a\u7b80\u5355\u6709\u5411\u56fe\uff0c\u5728V\u4e2d\u6307\u5b9a\u9876\u70b9s\u548ct\uff0c\u5206\u522b\u79f0\u4e3a**\u6e90\u70b9**\u548c**\u6c47\u70b9**\uff0c\u6709\u5411\u56feG\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9 \uff0c\u5bf9\u5e94\u6709\u4e00\u4e2a\u503c \uff0c\u79f0\u4e3a\u8fb9\u7684\u5bb9\u91cf\uff0c\u8fd9\u6837\u7684\u6709\u5411\u56feG\u79f0\u4f5c\u4e00\u4e2a**\u6d41\u7f51\u7edc**\uff0c\u4e0b\u56fe\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002 \u79f0\u4f5c\u662f\u4ece\u9876\u70b9u\u5230\u9876\u70b9v\u7684\u6d41\uff0c\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a \u5bb9\u91cf\u9650\u5236 \uff1a\u5bf9\u6240\u6709 \uff0c\u8981\u6c42 \u3002 \u53cd\u5bf9\u79f0\u6027 \uff1a\u5bf9\u6240\u6709 \uff0c\u8981\u6c42 \u3002 \u5982\u679c\u6709\u4e00\u7ec4\u6d41\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u90a3\u4e48\u8fd9\u7ec4\u6d41\u5c31\u6210\u4e3a\u4e00\u4e2a**\u53ef\u884c\u6d41**\uff1a \u6e90\u70b9s\uff1a\u6d41\u51fa\u91cf = \u6574\u4e2a\u7f51\u7edc\u7684\u6d41\u91cf \u6c47\u70b9t\uff1a\u6d41\u5165\u91cf = \u6574\u4e2a\u7f51\u7edc\u7684\u6d41\u91cf \u4e2d\u95f4\u70b9\uff1a\u603b\u6d41\u5165\u91cf = \u603b\u6d41\u51fa\u91cf **\u6700\u5927\u6d41**\u5373\u7f51\u7edcG\u6240\u6709\u7684\u53ef\u884c\u6d41\u4e2d\uff0c\u6d41\u91cf\u6700\u5927\u7684\u4e00\u4e2a\u53ef\u884c\u6d41\u3002 Ford-Fulkerson\u65b9\u6cd5 \u00b6 \u4e4b\u6240\u4ee5\u79f0\u4e3aFord-Fulkerson\u65b9\u6cd5\u800c\u4e0d\u662f\u7b97\u6cd5\uff0c\u662f\u7531\u4e8e\u5b83\u5305\u542b\u5177\u6709\u4e0d\u540c\u8fd0\u884c\u65f6\u95f4\u7684\u51e0\u79cd\u5b9e\u73b0\u3002Ford-Fulkerson\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u4e09\u79cd\u91cd\u8981\u601d\u60f3\uff1a \u6b8b\u7559\u7f51\u7edc \u3001 \u589e\u5e7f\u8def\u5f84 \u3001 \u5272 \u3002\u8fd9\u4e09\u79cd\u601d\u60f3\u662f\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u7684\u7cbe\u9ad3\uff0c\u8be5\u5b9a\u7406\u7528\u6d41\u7f51\u7edc\u7684\u5272\u6765\u63cf\u8ff0\u6700\u5927\u6d41\u7684\u503c\uff0c\u6211\u4eec\u5c06\u4f1a\u5728\u540e\u9762\u8c08\u5230\u3002\u4ee5\u4e0b\u7ed9\u51faFord-Fulkerson\u65b9\u6cd5\u7684\u4f2a\u4ee3\u7801\uff1a Ford - Fulkerson - Method ( G , s , t ): initialize flow f to 0 while there exists an augmenting path p : do augment flow f along p return f \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406 \u00b6 \u9996\u5148\u6765\u4ecb\u7ecd\u5272\u7684\u6982\u5ff5\uff0c\u4e00\u4e2a\u5272\u4f1a\u628a\u56feG\u7684\u9876\u70b9\u5206\u6210\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408\uff0c\u5176\u4e2ds\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0ct\u5728\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\u5272\u7684\u5bb9\u91cf\u5c31\u662f**\u4eceA\u6307\u5411B**\u7684\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u548c\uff0c\u6700\u5c0f\u5272\u95ee\u9898\u5c31\u662f\u8981\u627e\u5230\u5272\u7684\u5bb9\u91cf\u6700\u5c0f\u7684\u60c5\u51b5\u3002\u4e0b\u9762\u7ed9\u51fa\u4e24\u4e2a\u4f8b\u5b50\uff0c\u5272\u7684\u5bb9\u91cf\u5206\u522b\u4e3a30\u548c62\u3002 \u63a5\u7740\u4ecb\u7ecd**\u6b8b\u7559\u7f51\u7edc**\u548c**\u589e\u5e7f\u8def\u5f84**\u7684\u6982\u5ff5\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6d41\u7f51\u7edc \u548c\u4e00\u4e2a\u53ef\u884c\u6d41\uff0c\u6d41\u7684**\u6b8b\u7559\u7f51\u7edc** \u62e5\u6709\u4e0e\u539f\u7f51\u76f8\u540c\u7684\u9876\u70b9\u3002\u6d41\u7f51\u7edc \u4e2d\u6bcf\u6761\u8fb9\u5c06\u5bf9\u5e94\u6b8b\u7559\u7f51\u4e2d\u4e00\u6761\u6216\u8005\u4e24\u6761\u8fb9\uff0c\u5bf9\u4e8e\u539f\u6d41\u7f51\u7edc\u4e2d\u7684\u4efb\u610f\u8fb9(u, v)\uff0c\u6d41\u91cf\u4e3af(u, v)\uff0c\u5bb9\u91cf\u4e3ac(u, v)\uff1a \u5982\u679cf(u, v) > 0\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3af(u, v)\u7684\u8fb9(v, u); \u5982\u679cf(u, v) < c(u, v)\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3ac(u, v) - f(u, v)\u7684\u8fb9(u, v)\u3002 \u4e0b\u56fe\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u5df2\u77e5\u7684\u6d41\u7f51\u7edc \u548c\u6d41 \uff0c \u589e\u5e7f\u8def\u5f84 \u4e3a\u6b8b\u7559\u7f51\u7edc \u4e2d\u4eces\u5230t\u7684\u4e00\u6761\u7b80\u5355\u8def\u5f84\u3002 \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406 \uff1a \u7f51\u7edc\u7684\u6700\u5927\u6d41\u7b49\u4e8e\u67d0\u4e00\u6700\u5c0f\u5272\u7684\u5bb9\u91cf \uff0c\u5e76\u4e14\u4e0b\u5217\u6761\u4ef6\u662f\u7b49\u4ef7\u7684\uff1a \u662f \u7684\u4e00\u4e2a\u6700\u5927\u6d41\u3002 \u6b8b\u7559\u7f51\u7edc \u4e0d\u5305\u542b\u589e\u5e7f\u8def\u5f84\u3002 \u5bf9 \u7684\u67d0\u4e2a\u5272 \uff0c\u6709 \u3002 \u57fa\u672c\u7684Ford-Fulkerson\u7b97\u6cd5 \u00b6 \u6839\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u7ed9\u5b9a\u6709\u5411\u56fe\u7684\u6700\u5927\u6d41\u3002\u4e0b\u9762\u7ed9\u51fa\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff1a \u4e0a\u56fe\u4e2d\u7684\u5de6\u8fb9\u8868\u793a\u5f00\u59cb\u65f6\u7684\u6b8b\u7559\u7f51\u7edc\uff0c\u53f3\u8fb9\u8868\u793a\u5c06\u589e\u5e7f\u8def\u5f84\u52a0\u5165\u6b8b\u7559\u7f51\u7edc\u540e\u5f97\u5230\u7684\u65b0\u7684\u53ef\u884c\u6d41\uff0c\u901a\u8fc7\u4e09\u6b21\u8fed\u4ee3\u5373\u53ef\u5f97\u5230\u6700\u5927\u6d41\uff0c\u6839\u636e\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5f97\u5230\u6700\u5c0f\u5272\u3002 \u518d\u901a\u8fc7\u672c\u8bfe\u7a0b\u8bfe\u4ef6\u4e0a\u7684\u4e00\u4e2a\u4f8b\u9898\u8fdb\u884c\u7ec3\u4e60\u3002 \u540c\u6837\u901a\u8fc7\u57fa\u672c\u7684Ford-Fulkerson\u7b97\u6cd5\uff0c\u53ef\u5f97\u5230\u7b54\u6848\u5982\u4e0b\u3002 Edmonds-Karp\u7b97\u6cd5 \u00b6 Edmonds\u548cKarp\u66fe\u7ecf\u8bc1\u660e\u4e86\u5982\u679c\u6bcf\u6b65\u7684\u589e\u5e7f\u8def\u5f84\u90fd\u662f\u6700\u77ed\uff0c\u90a3\u4e48\u6574\u4e2a\u7b97\u6cd5\u4f1a\u6267\u884c \u6b65\uff0cEdmonds-Karp\u7b97\u6cd5\u662f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6765\u5b9e\u73b0\u5bf9\u589e\u5e7f\u8def\u5f84p\u7684\u8ba1\u7b97\u7684\uff0c\u5b9e\u73b0\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u7531\u4e8e\u5728\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u65f6\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981 \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u6b64\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u4e3a \u3002\u4e4b\u540e\uff0cDinitz\u6539\u8fdb\u4e86Edmonds-Karp\u7b97\u6cd5\uff0c\u5f97\u5230\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u7684\u7b97\u6cd5 Dinic class Graph { int cnt ; int inf = 0x3f3f3f ; const int maxM = 30000 ; int n ; const int maxN = 200 ; int Head [ maxN ]; int Next [ maxM ]; int W [ maxM ]; int V [ maxM ]; int Depth [ maxN ]; int cur [ maxN ]; //cur\u5c31\u662f\u8bb0\u5f55\u5f53\u524d\u70b9u\u5faa\u73af\u5230\u4e86\u54ea\u4e00\u6761\u8fb9 int s , t ; //\u6ce8\u610ft\u4e0d\u8981\u548c\u6d4b\u8bd5\u6837\u4f8b\u4e2a\u6570\u7528\u540c\u4e00\u4e2a\u53d8\u91cf void init () { cnt = -1 ; memset ( Head , -1 , sizeof ( Head )); memset ( Next , -1 , sizeof ( Next )); } void _Add ( int u , int v , int w ) { cnt ++ ; Next [ cnt ] = Head [ u ]; Head [ u ] = cnt ; V [ cnt ] = v ; W [ cnt ] = w ; } void Add_Edge ( int u , int v , int w ) { _Add ( u , v , w ); _Add ( v , u , 0 ); } int dfs ( int u , int flow ) { if ( u == t ) return flow ; for ( int & i = cur [ u ]; i != -1 ; i = Next [ i ]) //\u6ce8\u610f\u8fd9\u91cc\u7684&\u7b26\u53f7\uff0c\u8fd9\u6837i\u589e\u52a0\u7684\u540c\u65f6\u4e5f\u80fd\u6539\u53d8cur[u]\u7684\u503c\uff0c\u8fbe\u5230\u8bb0\u5f55\u5f53\u524d\u5f27\u7684\u76ee\u7684\uff0c\u4e0b\u4e00\u6b21dfs\u5c31\u53ef\u4ee5\u4ece\u4e0b\u4e00\u6761\u8fb9\u5f00\u59cb { if (( Depth [ V [ i ]] == Depth [ u ] + 1 ) && ( W [ i ] != 0 )) { int di = dfs ( V [ i ], min ( flow , W [ i ])); if ( di > 0 ) { W [ i ] -= di ; W [ i ^ 1 ] += di ; return di ; } } } return 0 ; } int bfs () { queue < int > Q ; while ( ! Q . empty ()) Q . pop (); memset ( Depth , 0 , sizeof ( Depth )); Depth [ s ] = 1 ; Q . push ( s ); do { int u = Q . front (); Q . pop (); for ( int i = Head [ u ]; i != -1 ; i = Next [ i ]) if (( Depth [ V [ i ]] == 0 ) && ( W [ i ] > 0 )) { Depth [ V [ i ]] = Depth [ u ] + 1 ; Q . push ( V [ i ]); if ( V [ i ] == t ) return 1 ; } } while ( ! Q . empty ()); if ( Depth [ t ] > 0 ) return 1 ; return 0 ; } int Dinic () { int Ans = 0 ; while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) //\u6bcf\u4e00\u6b21\u5efa\u7acb\u5b8c\u5206\u5c42\u56fe\u540e\u90fd\u8981\u628acur\u7f6e\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9 \u611f\u8c22@\u9752\u886b\u767d\u53d9\u6307\u51fa\u8fd9\u91cc\u4e4b\u524d\u7684\u4e00\u4e2a\u758f\u6f0f cur [ i ] = Head [ i ]; while ( int d = dfs ( s , inf )) { Ans += d ; } } return Ans ; } }; //\u4e00\u5b9a\u8981\u5728main\uff08\uff09\u4e2dinit()","title":"\u6d41\u7f51\u7edc"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%A4%A7%E6%B5%81/#_1","text":"\u662f\u4e00\u4e2a\u7b80\u5355\u6709\u5411\u56fe\uff0c\u5728V\u4e2d\u6307\u5b9a\u9876\u70b9s\u548ct\uff0c\u5206\u522b\u79f0\u4e3a**\u6e90\u70b9**\u548c**\u6c47\u70b9**\uff0c\u6709\u5411\u56feG\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9 \uff0c\u5bf9\u5e94\u6709\u4e00\u4e2a\u503c \uff0c\u79f0\u4e3a\u8fb9\u7684\u5bb9\u91cf\uff0c\u8fd9\u6837\u7684\u6709\u5411\u56feG\u79f0\u4f5c\u4e00\u4e2a**\u6d41\u7f51\u7edc**\uff0c\u4e0b\u56fe\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002 \u79f0\u4f5c\u662f\u4ece\u9876\u70b9u\u5230\u9876\u70b9v\u7684\u6d41\uff0c\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a \u5bb9\u91cf\u9650\u5236 \uff1a\u5bf9\u6240\u6709 \uff0c\u8981\u6c42 \u3002 \u53cd\u5bf9\u79f0\u6027 \uff1a\u5bf9\u6240\u6709 \uff0c\u8981\u6c42 \u3002 \u5982\u679c\u6709\u4e00\u7ec4\u6d41\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u90a3\u4e48\u8fd9\u7ec4\u6d41\u5c31\u6210\u4e3a\u4e00\u4e2a**\u53ef\u884c\u6d41**\uff1a \u6e90\u70b9s\uff1a\u6d41\u51fa\u91cf = \u6574\u4e2a\u7f51\u7edc\u7684\u6d41\u91cf \u6c47\u70b9t\uff1a\u6d41\u5165\u91cf = \u6574\u4e2a\u7f51\u7edc\u7684\u6d41\u91cf \u4e2d\u95f4\u70b9\uff1a\u603b\u6d41\u5165\u91cf = \u603b\u6d41\u51fa\u91cf **\u6700\u5927\u6d41**\u5373\u7f51\u7edcG\u6240\u6709\u7684\u53ef\u884c\u6d41\u4e2d\uff0c\u6d41\u91cf\u6700\u5927\u7684\u4e00\u4e2a\u53ef\u884c\u6d41\u3002","title":"\u6d41\u7f51\u7edc"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%A4%A7%E6%B5%81/#ford-fulkerson","text":"\u4e4b\u6240\u4ee5\u79f0\u4e3aFord-Fulkerson\u65b9\u6cd5\u800c\u4e0d\u662f\u7b97\u6cd5\uff0c\u662f\u7531\u4e8e\u5b83\u5305\u542b\u5177\u6709\u4e0d\u540c\u8fd0\u884c\u65f6\u95f4\u7684\u51e0\u79cd\u5b9e\u73b0\u3002Ford-Fulkerson\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u4e09\u79cd\u91cd\u8981\u601d\u60f3\uff1a \u6b8b\u7559\u7f51\u7edc \u3001 \u589e\u5e7f\u8def\u5f84 \u3001 \u5272 \u3002\u8fd9\u4e09\u79cd\u601d\u60f3\u662f\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u7684\u7cbe\u9ad3\uff0c\u8be5\u5b9a\u7406\u7528\u6d41\u7f51\u7edc\u7684\u5272\u6765\u63cf\u8ff0\u6700\u5927\u6d41\u7684\u503c\uff0c\u6211\u4eec\u5c06\u4f1a\u5728\u540e\u9762\u8c08\u5230\u3002\u4ee5\u4e0b\u7ed9\u51faFord-Fulkerson\u65b9\u6cd5\u7684\u4f2a\u4ee3\u7801\uff1a Ford - Fulkerson - Method ( G , s , t ): initialize flow f to 0 while there exists an augmenting path p : do augment flow f along p return f","title":"Ford-Fulkerson\u65b9\u6cd5"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%A4%A7%E6%B5%81/#_2","text":"\u9996\u5148\u6765\u4ecb\u7ecd\u5272\u7684\u6982\u5ff5\uff0c\u4e00\u4e2a\u5272\u4f1a\u628a\u56feG\u7684\u9876\u70b9\u5206\u6210\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u96c6\u5408\uff0c\u5176\u4e2ds\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0ct\u5728\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\u5272\u7684\u5bb9\u91cf\u5c31\u662f**\u4eceA\u6307\u5411B**\u7684\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u548c\uff0c\u6700\u5c0f\u5272\u95ee\u9898\u5c31\u662f\u8981\u627e\u5230\u5272\u7684\u5bb9\u91cf\u6700\u5c0f\u7684\u60c5\u51b5\u3002\u4e0b\u9762\u7ed9\u51fa\u4e24\u4e2a\u4f8b\u5b50\uff0c\u5272\u7684\u5bb9\u91cf\u5206\u522b\u4e3a30\u548c62\u3002 \u63a5\u7740\u4ecb\u7ecd**\u6b8b\u7559\u7f51\u7edc**\u548c**\u589e\u5e7f\u8def\u5f84**\u7684\u6982\u5ff5\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6d41\u7f51\u7edc \u548c\u4e00\u4e2a\u53ef\u884c\u6d41\uff0c\u6d41\u7684**\u6b8b\u7559\u7f51\u7edc** \u62e5\u6709\u4e0e\u539f\u7f51\u76f8\u540c\u7684\u9876\u70b9\u3002\u6d41\u7f51\u7edc \u4e2d\u6bcf\u6761\u8fb9\u5c06\u5bf9\u5e94\u6b8b\u7559\u7f51\u4e2d\u4e00\u6761\u6216\u8005\u4e24\u6761\u8fb9\uff0c\u5bf9\u4e8e\u539f\u6d41\u7f51\u7edc\u4e2d\u7684\u4efb\u610f\u8fb9(u, v)\uff0c\u6d41\u91cf\u4e3af(u, v)\uff0c\u5bb9\u91cf\u4e3ac(u, v)\uff1a \u5982\u679cf(u, v) > 0\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3af(u, v)\u7684\u8fb9(v, u); \u5982\u679cf(u, v) < c(u, v)\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3ac(u, v) - f(u, v)\u7684\u8fb9(u, v)\u3002 \u4e0b\u56fe\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u5df2\u77e5\u7684\u6d41\u7f51\u7edc \u548c\u6d41 \uff0c \u589e\u5e7f\u8def\u5f84 \u4e3a\u6b8b\u7559\u7f51\u7edc \u4e2d\u4eces\u5230t\u7684\u4e00\u6761\u7b80\u5355\u8def\u5f84\u3002 \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406 \uff1a \u7f51\u7edc\u7684\u6700\u5927\u6d41\u7b49\u4e8e\u67d0\u4e00\u6700\u5c0f\u5272\u7684\u5bb9\u91cf \uff0c\u5e76\u4e14\u4e0b\u5217\u6761\u4ef6\u662f\u7b49\u4ef7\u7684\uff1a \u662f \u7684\u4e00\u4e2a\u6700\u5927\u6d41\u3002 \u6b8b\u7559\u7f51\u7edc \u4e0d\u5305\u542b\u589e\u5e7f\u8def\u5f84\u3002 \u5bf9 \u7684\u67d0\u4e2a\u5272 \uff0c\u6709 \u3002","title":"\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%A4%A7%E6%B5%81/#ford-fulkerson_1","text":"\u6839\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u7ed9\u5b9a\u6709\u5411\u56fe\u7684\u6700\u5927\u6d41\u3002\u4e0b\u9762\u7ed9\u51fa\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff1a \u4e0a\u56fe\u4e2d\u7684\u5de6\u8fb9\u8868\u793a\u5f00\u59cb\u65f6\u7684\u6b8b\u7559\u7f51\u7edc\uff0c\u53f3\u8fb9\u8868\u793a\u5c06\u589e\u5e7f\u8def\u5f84\u52a0\u5165\u6b8b\u7559\u7f51\u7edc\u540e\u5f97\u5230\u7684\u65b0\u7684\u53ef\u884c\u6d41\uff0c\u901a\u8fc7\u4e09\u6b21\u8fed\u4ee3\u5373\u53ef\u5f97\u5230\u6700\u5927\u6d41\uff0c\u6839\u636e\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\uff0c\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5f97\u5230\u6700\u5c0f\u5272\u3002 \u518d\u901a\u8fc7\u672c\u8bfe\u7a0b\u8bfe\u4ef6\u4e0a\u7684\u4e00\u4e2a\u4f8b\u9898\u8fdb\u884c\u7ec3\u4e60\u3002 \u540c\u6837\u901a\u8fc7\u57fa\u672c\u7684Ford-Fulkerson\u7b97\u6cd5\uff0c\u53ef\u5f97\u5230\u7b54\u6848\u5982\u4e0b\u3002","title":"\u57fa\u672c\u7684Ford-Fulkerson\u7b97\u6cd5"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%A4%A7%E6%B5%81/#edmonds-karp","text":"Edmonds\u548cKarp\u66fe\u7ecf\u8bc1\u660e\u4e86\u5982\u679c\u6bcf\u6b65\u7684\u589e\u5e7f\u8def\u5f84\u90fd\u662f\u6700\u77ed\uff0c\u90a3\u4e48\u6574\u4e2a\u7b97\u6cd5\u4f1a\u6267\u884c \u6b65\uff0cEdmonds-Karp\u7b97\u6cd5\u662f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6765\u5b9e\u73b0\u5bf9\u589e\u5e7f\u8def\u5f84p\u7684\u8ba1\u7b97\u7684\uff0c\u5b9e\u73b0\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u7531\u4e8e\u5728\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u65f6\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981 \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u6b64\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u4e3a \u3002\u4e4b\u540e\uff0cDinitz\u6539\u8fdb\u4e86Edmonds-Karp\u7b97\u6cd5\uff0c\u5f97\u5230\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u7684\u7b97\u6cd5 Dinic class Graph { int cnt ; int inf = 0x3f3f3f ; const int maxM = 30000 ; int n ; const int maxN = 200 ; int Head [ maxN ]; int Next [ maxM ]; int W [ maxM ]; int V [ maxM ]; int Depth [ maxN ]; int cur [ maxN ]; //cur\u5c31\u662f\u8bb0\u5f55\u5f53\u524d\u70b9u\u5faa\u73af\u5230\u4e86\u54ea\u4e00\u6761\u8fb9 int s , t ; //\u6ce8\u610ft\u4e0d\u8981\u548c\u6d4b\u8bd5\u6837\u4f8b\u4e2a\u6570\u7528\u540c\u4e00\u4e2a\u53d8\u91cf void init () { cnt = -1 ; memset ( Head , -1 , sizeof ( Head )); memset ( Next , -1 , sizeof ( Next )); } void _Add ( int u , int v , int w ) { cnt ++ ; Next [ cnt ] = Head [ u ]; Head [ u ] = cnt ; V [ cnt ] = v ; W [ cnt ] = w ; } void Add_Edge ( int u , int v , int w ) { _Add ( u , v , w ); _Add ( v , u , 0 ); } int dfs ( int u , int flow ) { if ( u == t ) return flow ; for ( int & i = cur [ u ]; i != -1 ; i = Next [ i ]) //\u6ce8\u610f\u8fd9\u91cc\u7684&\u7b26\u53f7\uff0c\u8fd9\u6837i\u589e\u52a0\u7684\u540c\u65f6\u4e5f\u80fd\u6539\u53d8cur[u]\u7684\u503c\uff0c\u8fbe\u5230\u8bb0\u5f55\u5f53\u524d\u5f27\u7684\u76ee\u7684\uff0c\u4e0b\u4e00\u6b21dfs\u5c31\u53ef\u4ee5\u4ece\u4e0b\u4e00\u6761\u8fb9\u5f00\u59cb { if (( Depth [ V [ i ]] == Depth [ u ] + 1 ) && ( W [ i ] != 0 )) { int di = dfs ( V [ i ], min ( flow , W [ i ])); if ( di > 0 ) { W [ i ] -= di ; W [ i ^ 1 ] += di ; return di ; } } } return 0 ; } int bfs () { queue < int > Q ; while ( ! Q . empty ()) Q . pop (); memset ( Depth , 0 , sizeof ( Depth )); Depth [ s ] = 1 ; Q . push ( s ); do { int u = Q . front (); Q . pop (); for ( int i = Head [ u ]; i != -1 ; i = Next [ i ]) if (( Depth [ V [ i ]] == 0 ) && ( W [ i ] > 0 )) { Depth [ V [ i ]] = Depth [ u ] + 1 ; Q . push ( V [ i ]); if ( V [ i ] == t ) return 1 ; } } while ( ! Q . empty ()); if ( Depth [ t ] > 0 ) return 1 ; return 0 ; } int Dinic () { int Ans = 0 ; while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) //\u6bcf\u4e00\u6b21\u5efa\u7acb\u5b8c\u5206\u5c42\u56fe\u540e\u90fd\u8981\u628acur\u7f6e\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9 \u611f\u8c22@\u9752\u886b\u767d\u53d9\u6307\u51fa\u8fd9\u91cc\u4e4b\u524d\u7684\u4e00\u4e2a\u758f\u6f0f cur [ i ] = Head [ i ]; while ( int d = dfs ( s , inf )) { Ans += d ; } } return Ans ; } }; //\u4e00\u5b9a\u8981\u5728main\uff08\uff09\u4e2dinit()","title":"Edmonds-Karp\u7b97\u6cd5"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%B0%8F%E5%89%B2/","text":"\u4e00\u4e2a\u5272\u5c31\u662f\u4e00\u7ec4\u8fb9\u7684\u96c6\u5408\uff0c\u5c06\u7ed9\u96c6\u5408\u8fb9\u4ece\u56fe\u4e2d\u8fb9\u96c6\u5408\u4e2d\u79fb\u9664\uff0c\u90a3\u4e48\u56fe\u88ab\u5206\u5272\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u8fd9\u4e24\u4e2a\u90e8\u5206\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u8fb9\u8fde\u63a5\u3002\u5982\u679c\u8bf4\u5f97\u6709\u70b9\u7ed5\u53e3\uff0c\u90a3\u4e48\u6700\u7b80\u5355\u6765\u8bf4\uff0c\u4e00\u5757\u8089\u88ab\u4ece\u4e2d\u95f4\u9694\u5f00\uff0c\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4e2d\u95f4\u65ad\u5f00\u7684\u8fde\u63a5\u7684\u96c6\u5408\u5c31\u662f\u5272\u3002 \u6700\u5c0f\u5272\u5c31\u662f\u5c06\u56fe\u5207\u5272\u4e3a\u4e24\u4e2a\u90e8\u5206\u65f6\uff0c\u4ee3\u4ef7\u6700\u5c0f\u7684\u5272\u7684\u96c6\u5408\uff0c\u4ee3\u4ef7\u5c31\u662f\u8fb9\u4e0a\u5bb9\u91cf\u7684\u548c\uff08S\u90e8\u5206\u5230T\u90e8\u5206\u8fb9\u7684\u5bb9\u91cf\uff09\u3002\u8fd8\u662f\u62ff\u732a\u8089\u4f5c\u7c7b\u6bd4\uff0c\u6700\u5c0f\u5272\u5c31\u662f\u627e\u5230\u4e00\u5757\u8089\u8fde\u63a5\u6700\u5c0f\u7684\u90e8\u5206\uff0c\u4e00\u5200\u5288\u5f00\uff0c\u90a3\u4e2a\u90e8\u5206\u7684\u8fde\u63a5\u5c31\u662f\u6700\u5c0f\u5272\u3002 \u5982\u4f55\u627e\u5230\u8fd9\u4e2a\u6700\u5c0f\u5272\uff1f \u00b6 \u5f53\u4e00\u4e2a\u56fe\u88ab\u5272\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u65f6\uff0c\u4e0d\u518d\u5b58\u5728S\u5230T\u7684\u901a\u8def\uff0c\u6240\u4ee5\u5272\u7684\u4ee3\u4ef7\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e\u56fe\u7684\u6700\u5927\u6d41\uff08\u8fd9\u4e2a\u9700\u8981\u6dfb\u52a0\u989d\u5916\u8bf4\u660e\u5417\uff1f\u5e94\u8be5\u4e0d\u9700\u8981\u5427\uff0c\u7b97\u662f\u975e\u5e38\u660e\u663e\u7684\u7ed3\u8bba\u4e86\u5427\uff09\u3002\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5272\u7684\u4ee3\u7801\u6700\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u56fe\u7684\u6700\u5927\u6d41\uff0c\u4e5f\u5c31\u662f\u5272\u7684\u4ee3\u4ef7\u7b49\u4e8e\u56fe\u7684\u6700\u5927\u6d41\u3002 \u73b0\u5728\u786e\u5b9a\u4e86\u5272\u7684\u4ee3\u4ef7\uff0c\u4f46\u5982\u4f55\u53bb\u627e\u5230\u8fd9\u6837\u4e00\u7ec4\u5272\uff1f\u5728\u8fdb\u884c\u5177\u4f53\u7b97\u6cd5\u8bf4\u660e\u4e4b\u524d\uff0c\u7ed9\u51fa\u989d\u5916\u4e00\u4e2a\u6982\u5ff5\uff1a \u5f71\u54cd\u8fb9\uff1a\u5728\u8ba1\u7b97\u6700\u5927\u6d41\u7684\u7b97\u6cd5\u4e2d\uff0c\u4f1a\u5bf9\u8fb9\u7684\u5bb9\u91cf\u8fdb\u884c\u4fee\u6539\uff0c\u800c\u5c06\u4e00\u6761\u901a\u8def\u4e2d\u4fee\u6539\u540e\u5bb9\u91cf\u4e3a0\u7684\u8fb9\u79f0\u4e3a\u4fee\u6539\u540e\u5bb9\u91cf\u975e0\u8fb9\u7684\u5f71\u54cd\u8fb9\uff1b \u7b97\u6cd5\u63cf\u8ff0\uff1a Step1\uff1a \u521d\u59cb\u5316\u8fb9\u5f71\u54cd\u8fb9\u96c6\u5408\uff1b Step2\uff1a \u521d\u59cb\u5316\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\uff1b Step3\uff1a \u8bb0\u5f55\u8fb9\u7684\u539f\u59cb\u5bb9\u91cfRij=Cij\uff1b Step3\uff1a \u5bfb\u627e\u4e00\u4e2a\u901a\u8def\uff0c\u5982\u679c\u6ca1\u6709\u901a\u8def\uff0c\u5219\u7ed3\u675f\uff1b Step4\uff1a \u4fee\u6b63\u8fb9\u7684\u5bb9\u91cfCij = Cij-\u901a\u8def\u6d41\u91cf\uff1b Step5\uff1a \u5728\u901a\u8def\u7684\u8fb9\u4e2d\u627e\u4e00\u4e2aCij=0\u7684\u8fb9\uff0c\u4f5c\u4e3a\u9884\u5207\u5272\u8fb9\uff1b Step6\uff1a \u5982\u679c\u9884\u5207\u5272\u8fb9\u7684\u5bb9\u91cf\u7b49\u4e8e\u8be5\u8fb9\u7684\u539f\u59cb\u5bb9\u91cf\uff08Cij=Rij\uff09\uff0c\u90a3\u4e48\u5c06\u8be5\u8fb9\u52a0\u5165\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\uff1b\u5426\u5219\uff0c\u627e\u5230\u8be5\u8fb9\u7684\u6240\u6709\u5f71\u54cd\u8fb9\uff0c\u5c06\u5f71\u54cd\u8fb9\u4ece\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\u4e2d\u79fb\u51fa\uff0c\u5c06\u8be5\u8fb9\u52a0\u5165\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\uff1b Step7\uff1a \u5bf9\u901a\u8def\u5176\u4ed6\u8fb9\u8bb0\u5f55\u5f71\u54cd\u8fb9\uff1b \u7b97\u6cd5\u7684\u6709\u6548\u6027\u89e3\u8bfb \uff1a \u7b97\u6cd5\u7684\u6838\u5fc3\u539f\u7406\u5c31\u662f\u5728\u5bfb\u627e\u6700\u5927\u6d41\u7684\u8fc7\u7a0b\u4e2d\uff0c\u627e\u51fa\u4e00\u7ec4\u8fb9\u4ee3\u4ef7\u7b49\u4e8e\u6700\u5927\u6d41\uff0c\u5e76\u4e14\u80fd\u591f\u5c06\u904d\u5386\u7684\u901a\u8def\u6709\u6548\u5206\u5272\u7684\u8fb9\u3002 \u5b9e\u4f8b \u00b6 \u6309\u672c\u6587\u63cf\u8ff0\u7b97\u6cd5\u5bf9\u6700\u521d\u7684\u56fe\u8fdb\u884c\u6700\u5c0f\u5272\u6c42\u89e3\u3002 \u6b65\u9aa41\uff1a\u5bfb\u627e\u7b2c\u4e00\u4e2a\u901a\u8def \u56fe4\uff1a\u7b2c\u4e00\u6761\u901a\u8def\u6807\u8bb0 \u7ea2\u8272\u5b57\u4f53\u8868\u793a\u8be5\u901a\u8def\u7684\u901a\u8def\u6d41\u91cf\u3002\u6839\u636e\u7b97\u6cd5\u8fdb\u884c\u5bb9\u91cf\u4fee\u6b63\uff1a \u56fe5\uff1a\u7b2c\u4e00\u6761\u901a\u8def\u5bb9\u91cf\u4fee\u6b63 \u4fee\u6539\u540e\u7684\u5bb9\u91cf\u662f\u7528\u7ea2\u8272\u5b57\u4f53\u8868\u793a\u3002\u5728\u6b64\u901a\u8def\u4e2d\uff0cAC\u8fb9\u5bb9\u91cf\u4e3a0\uff0c\u6240\u4ee5\u5c06\u8be5\u8fb9\u52a0\u5165\u6700\u5c0f\u5272\u8fb9\u96c6\u5408{AC}\uff0c\u540c\u65f6\u8bb0\u5f55\u5f71\u54cd\u8fb9\u4fe1\u606f\uff0cSA\u7684\u5f71\u54cd\u8fb9{AC},CT\u7684\u5f71\u54cd\u8fb9{AC}\u3002 \u6b65\u9aa42\uff1a\u5bfb\u627e\u7b2c\u4e8c\u6761\u901a\u8def\uff1a \u56fe6\uff1a\u7b2c\u4e8c\u6761\u901a\u8def\u6807\u8bb0 \u56fe7\uff1a\u7b2c\u4e8c\u6761\u901a\u8def\u5bb9\u91cf\u4fee\u6b63 \u6b64\u65f6\uff0c\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\u4e3a{AC\uff0cDT} \u6b65\u9aa43\uff1a\u5bfb\u627e\u7b2c\u4e09\u6761\u901a\u8def\uff1a \u56fe8\uff1a\u7b2c\u4e09\u6761\u901a\u8def\u6807\u8bb0 \u56fe9\uff1a\u7b2c\u4e09\u6761\u901a\u8def\u5bb9\u91cf\u4fee\u6b63 \u6b64\u65f6\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\u4e3a\uff1a{AC\uff0cDT\uff0cDC} \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u8bc1\u660e \u00b6 \u5b9a\u7406\u4e00 \uff1a \u5982\u679cf\u662f\u7f51\u7edc\u4e2d\u7684\u4e00\u4e2a\u6d41\uff0cCUT(S,T)\u662f\u4efb\u610f\u4e00\u4e2a\u5272\uff0c\u90a3\u4e48f\u7684\u503c\u7b49\u4e8e\u6b63\u5411\u5272\u8fb9\u7684\u6d41\u91cf\u4e0e\u8d1f\u5411\u5272\u8fb9\u7684\u6d41\u91cf\u4e4b\u5dee\u3002 \u8bc1\u660e\uff1a \u8bbeX\u548cY\u662f\u7f51\u7edc\u4e2d\u7684\u4e24\u4e2a\u9876\u70b9\u96c6\u5408\uff0c\u7528f\uff08X,Y\uff09\u8868\u793a\u4eceX\u4e2d\u7684\u4e00\u4e2a\u9876\u70b9\u6307\u5411Y\u7684\u4e00\u4e2a\u9876\u70b9\u7684\u6240\u6709\u5f27\uff08\u5f27\u5c3e\u5728X\u4e2d\uff0c\u5f27\u5934\u5728Y\u4e2d\uff1a \uff09\u7684\u6d41\u91cf\u548c\u3002\u53ea\u9700\u8bc1\u660e\uff1af=f(S,T)-f(T,S) \u5373\u53ef\u3002 \u4e0b\u5217\u7ed3\u8bba\u6210\u7acb\uff1a \u5982\u679cX\u2229Y\u4e3a\u7a7a\uff0c\u90a3\u4e48\uff1af(X,(Y1\u222aY2))=f(X,Y1)+f(X,Y2) \uff0cf((X1\u222aX2),Y)=f(X1,Y)+f(X2,Y) \u6210\u7acb\u3002 \u6839\u636e\u7f51\u7edc\u6d41\u7684\u7279\u70b9\uff1a \u5982\u679cV\u65e2\u4e0d\u662f\u6e90\u70b9\u4e5f\u4e0d\u662f\u6c47\u70b9\uff0c\u90a3\u4e48\uff1a f({V},S\u222aT)-f(S\u222aT,{V})=0\uff1b\u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u6d41\u5165\u7684\u4e0e\u6d41\u51fa\u7684\u91cf\u76f8\u7b49\u3002 \u5982\u679cV\u662f\u6e90\uff0c\u90a3\u4e48\uff1af({V},S\u222aT)-f(S\u222aT,{V})=f\u3002 \u5bf9\u4e8eS\u4e2d\u7684\u6240\u6709\u70b9V\u90fd\u6709\u4e0a\u8ff0\u5173\u7cfb\u5f0f\uff0c\u76f8\u52a0\u5f97\u5230\uff1af(S,S\u222aT)-f(S\u222aT,S)=f \u3002 \u53c8\u56e0\u4e3a\uff1a f(S,S\u222aT)-f (S\u222aT,S)= (f(S,S)+f (S,T))-(f(S,S) +f (T,S))= f(S,T)- f(T,S)\uff0c \u6240\u4ee5\uff1af= f(S,T)- f(T,S) \u5b9a\u7406\u5f97\u8bc1 [2] \u3002 \u63a8\u8bba\u4e00 \uff1a \u5982\u679cf\u662f\u7f51\u7edc\u4e2d\u7684\u4e00\u4e2a\u6d41\uff0cCUT(S,T)\u662f\u4e00\u4e2a\u5272\uff0c\u90a3\u4e48f\u7684\u503c\u4e0d\u8d85\u8fc7\u5272CUT(S,T)\u7684\u5bb9\u91cf\u3002 \u63a8\u8bba\u4e8c \uff1a \u7f51\u7edc\u4e2d\u7684\u6700\u5927\u6d41\u4e0d\u8d85\u8fc7\u4efb\u4f55\u5272\u7684\u5bb9\u91cf\u3002 \u5b9a\u7406\u4e8c \uff1a \u5728\u7f51\u7edc\u4e2d\uff0c\u5982\u679cf\u662f\u4e00\u4e2a\u6d41\uff0cCUT (S,T)\u662f\u4e00\u4e2a\u5272\uff0c\u4e14f\u7684\u503c\u7b49\u4e8e\u5272CUT(S,T)\u7684\u5bb9\u91cf\uff0c\u90a3\u4e48f\u662f\u4e00\u4e2a\u6700\u5927\u6d41\uff0c CUT(S,T)\u662f\u4e00\u4e2a\u6700\u5c0f\u5272\u3002 \u8bc1\u660e\uff1a \u4ee4\u5272CUT\uff08S,T\uff09\u7684\u5bb9\u91cf\u4e3aC\uff0c\u6240\u4ee5\u6d41f\u7684\u6d41\u91cf\u4e5f\u4e3aC\u3002\u5047\u8bbe\u53e6\u5916\u7684\u4efb\u610f\u6d41f1\uff0c\u6d41\u91cf\u4e3ac1\uff0c\u6839\u636e\u6d41\u91cf\u4e0d\u8d85\u8fc7\u5272\u7684\u5bb9\u91cf\uff0c\u5219c1<=c,\u6240\u4ee5f\u662f\u6700\u5927\u6d41\u3002 \u5047\u8bbe\u53e6\u5916\u7684\u4efb\u610f\u5272CUT\uff08S1,T1\uff09\uff0c\u5bb9\u91cf\u4e3ac1\uff0c\u6839\u636e\u6d41\u91cf\u4e0d\u8d85\u8fc7\u5272\u7684\u5bb9\u91cf\uff0c\u6240\u4ee5\u6709c1>=c,\u6545\uff0cCUT\uff08S,T\uff09\u662f\u6700\u5c0f\u5272\u3002 \u6240\u4ee5\u6c42\u6700\u5c0f\u5272\u7684\u4ee3\u7801\u4e0e\u6700\u5927\u6d41\u76f8\u540c\uff0c\u6211\u4eec\u90fd\u91c7\u7528\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f18\u7684dinic\u7b97\u6cd5\u89e3\u51b3 class Graph { int cnt ; int inf = 0x3f3f3f ; const int maxM = 30000 ; int n ; const int maxN = 200 ; int Head [ maxN ]; int Next [ maxM ]; int W [ maxM ]; int V [ maxM ]; int Depth [ maxN ]; int cur [ maxN ]; //cur\u5c31\u662f\u8bb0\u5f55\u5f53\u524d\u70b9u\u5faa\u73af\u5230\u4e86\u54ea\u4e00\u6761\u8fb9 int s , t ; //\u6ce8\u610ft\u4e0d\u8981\u548c\u6d4b\u8bd5\u6837\u4f8b\u4e2a\u6570\u7528\u540c\u4e00\u4e2a\u53d8\u91cf void init () { cnt = -1 ; memset ( Head , -1 , sizeof ( Head )); memset ( Next , -1 , sizeof ( Next )); } void _Add ( int u , int v , int w ) { cnt ++ ; Next [ cnt ] = Head [ u ]; Head [ u ] = cnt ; V [ cnt ] = v ; W [ cnt ] = w ; } void Add_Edge ( int u , int v , int w ) { _Add ( u , v , w ); _Add ( v , u , 0 ); } int dfs ( int u , int flow ) { if ( u == t ) return flow ; for ( int & i = cur [ u ]; i != -1 ; i = Next [ i ]) //\u6ce8\u610f\u8fd9\u91cc\u7684&\u7b26\u53f7\uff0c\u8fd9\u6837i\u589e\u52a0\u7684\u540c\u65f6\u4e5f\u80fd\u6539\u53d8cur[u]\u7684\u503c\uff0c\u8fbe\u5230\u8bb0\u5f55\u5f53\u524d\u5f27\u7684\u76ee\u7684\uff0c\u4e0b\u4e00\u6b21dfs\u5c31\u53ef\u4ee5\u4ece\u4e0b\u4e00\u6761\u8fb9\u5f00\u59cb { if (( Depth [ V [ i ]] == Depth [ u ] + 1 ) && ( W [ i ] != 0 )) { int di = dfs ( V [ i ], min ( flow , W [ i ])); if ( di > 0 ) { W [ i ] -= di ; W [ i ^ 1 ] += di ; return di ; } } } return 0 ; } int bfs () { queue < int > Q ; while ( ! Q . empty ()) Q . pop (); memset ( Depth , 0 , sizeof ( Depth )); Depth [ s ] = 1 ; Q . push ( s ); do { int u = Q . front (); Q . pop (); for ( int i = Head [ u ]; i != -1 ; i = Next [ i ]) if (( Depth [ V [ i ]] == 0 ) && ( W [ i ] > 0 )) { Depth [ V [ i ]] = Depth [ u ] + 1 ; Q . push ( V [ i ]); if ( V [ i ] == t ) return 1 ; } } while ( ! Q . empty ()); if ( Depth [ t ] > 0 ) return 1 ; return 0 ; } int Dinic () { int Ans = 0 ; while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) //\u6bcf\u4e00\u6b21\u5efa\u7acb\u5b8c\u5206\u5c42\u56fe\u540e\u90fd\u8981\u628acur\u7f6e\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9 \u611f\u8c22@\u9752\u886b\u767d\u53d9\u6307\u51fa\u8fd9\u91cc\u4e4b\u524d\u7684\u4e00\u4e2a\u758f\u6f0f cur [ i ] = Head [ i ]; while ( int d = dfs ( s , inf )) { Ans += d ; } } return Ans ; } }; //\u4e00\u5b9a\u8981\u5728main\uff08\uff09\u4e2dinit()","title":"\u6700\u5c0f\u5272"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%B0%8F%E5%89%B2/#_1","text":"\u5f53\u4e00\u4e2a\u56fe\u88ab\u5272\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u65f6\uff0c\u4e0d\u518d\u5b58\u5728S\u5230T\u7684\u901a\u8def\uff0c\u6240\u4ee5\u5272\u7684\u4ee3\u4ef7\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e\u56fe\u7684\u6700\u5927\u6d41\uff08\u8fd9\u4e2a\u9700\u8981\u6dfb\u52a0\u989d\u5916\u8bf4\u660e\u5417\uff1f\u5e94\u8be5\u4e0d\u9700\u8981\u5427\uff0c\u7b97\u662f\u975e\u5e38\u660e\u663e\u7684\u7ed3\u8bba\u4e86\u5427\uff09\u3002\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5272\u7684\u4ee3\u7801\u6700\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u56fe\u7684\u6700\u5927\u6d41\uff0c\u4e5f\u5c31\u662f\u5272\u7684\u4ee3\u4ef7\u7b49\u4e8e\u56fe\u7684\u6700\u5927\u6d41\u3002 \u73b0\u5728\u786e\u5b9a\u4e86\u5272\u7684\u4ee3\u4ef7\uff0c\u4f46\u5982\u4f55\u53bb\u627e\u5230\u8fd9\u6837\u4e00\u7ec4\u5272\uff1f\u5728\u8fdb\u884c\u5177\u4f53\u7b97\u6cd5\u8bf4\u660e\u4e4b\u524d\uff0c\u7ed9\u51fa\u989d\u5916\u4e00\u4e2a\u6982\u5ff5\uff1a \u5f71\u54cd\u8fb9\uff1a\u5728\u8ba1\u7b97\u6700\u5927\u6d41\u7684\u7b97\u6cd5\u4e2d\uff0c\u4f1a\u5bf9\u8fb9\u7684\u5bb9\u91cf\u8fdb\u884c\u4fee\u6539\uff0c\u800c\u5c06\u4e00\u6761\u901a\u8def\u4e2d\u4fee\u6539\u540e\u5bb9\u91cf\u4e3a0\u7684\u8fb9\u79f0\u4e3a\u4fee\u6539\u540e\u5bb9\u91cf\u975e0\u8fb9\u7684\u5f71\u54cd\u8fb9\uff1b \u7b97\u6cd5\u63cf\u8ff0\uff1a Step1\uff1a \u521d\u59cb\u5316\u8fb9\u5f71\u54cd\u8fb9\u96c6\u5408\uff1b Step2\uff1a \u521d\u59cb\u5316\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\uff1b Step3\uff1a \u8bb0\u5f55\u8fb9\u7684\u539f\u59cb\u5bb9\u91cfRij=Cij\uff1b Step3\uff1a \u5bfb\u627e\u4e00\u4e2a\u901a\u8def\uff0c\u5982\u679c\u6ca1\u6709\u901a\u8def\uff0c\u5219\u7ed3\u675f\uff1b Step4\uff1a \u4fee\u6b63\u8fb9\u7684\u5bb9\u91cfCij = Cij-\u901a\u8def\u6d41\u91cf\uff1b Step5\uff1a \u5728\u901a\u8def\u7684\u8fb9\u4e2d\u627e\u4e00\u4e2aCij=0\u7684\u8fb9\uff0c\u4f5c\u4e3a\u9884\u5207\u5272\u8fb9\uff1b Step6\uff1a \u5982\u679c\u9884\u5207\u5272\u8fb9\u7684\u5bb9\u91cf\u7b49\u4e8e\u8be5\u8fb9\u7684\u539f\u59cb\u5bb9\u91cf\uff08Cij=Rij\uff09\uff0c\u90a3\u4e48\u5c06\u8be5\u8fb9\u52a0\u5165\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\uff1b\u5426\u5219\uff0c\u627e\u5230\u8be5\u8fb9\u7684\u6240\u6709\u5f71\u54cd\u8fb9\uff0c\u5c06\u5f71\u54cd\u8fb9\u4ece\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\u4e2d\u79fb\u51fa\uff0c\u5c06\u8be5\u8fb9\u52a0\u5165\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\uff1b Step7\uff1a \u5bf9\u901a\u8def\u5176\u4ed6\u8fb9\u8bb0\u5f55\u5f71\u54cd\u8fb9\uff1b \u7b97\u6cd5\u7684\u6709\u6548\u6027\u89e3\u8bfb \uff1a \u7b97\u6cd5\u7684\u6838\u5fc3\u539f\u7406\u5c31\u662f\u5728\u5bfb\u627e\u6700\u5927\u6d41\u7684\u8fc7\u7a0b\u4e2d\uff0c\u627e\u51fa\u4e00\u7ec4\u8fb9\u4ee3\u4ef7\u7b49\u4e8e\u6700\u5927\u6d41\uff0c\u5e76\u4e14\u80fd\u591f\u5c06\u904d\u5386\u7684\u901a\u8def\u6709\u6548\u5206\u5272\u7684\u8fb9\u3002","title":"\u5982\u4f55\u627e\u5230\u8fd9\u4e2a\u6700\u5c0f\u5272\uff1f"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%B0%8F%E5%89%B2/#_2","text":"\u6309\u672c\u6587\u63cf\u8ff0\u7b97\u6cd5\u5bf9\u6700\u521d\u7684\u56fe\u8fdb\u884c\u6700\u5c0f\u5272\u6c42\u89e3\u3002 \u6b65\u9aa41\uff1a\u5bfb\u627e\u7b2c\u4e00\u4e2a\u901a\u8def \u56fe4\uff1a\u7b2c\u4e00\u6761\u901a\u8def\u6807\u8bb0 \u7ea2\u8272\u5b57\u4f53\u8868\u793a\u8be5\u901a\u8def\u7684\u901a\u8def\u6d41\u91cf\u3002\u6839\u636e\u7b97\u6cd5\u8fdb\u884c\u5bb9\u91cf\u4fee\u6b63\uff1a \u56fe5\uff1a\u7b2c\u4e00\u6761\u901a\u8def\u5bb9\u91cf\u4fee\u6b63 \u4fee\u6539\u540e\u7684\u5bb9\u91cf\u662f\u7528\u7ea2\u8272\u5b57\u4f53\u8868\u793a\u3002\u5728\u6b64\u901a\u8def\u4e2d\uff0cAC\u8fb9\u5bb9\u91cf\u4e3a0\uff0c\u6240\u4ee5\u5c06\u8be5\u8fb9\u52a0\u5165\u6700\u5c0f\u5272\u8fb9\u96c6\u5408{AC}\uff0c\u540c\u65f6\u8bb0\u5f55\u5f71\u54cd\u8fb9\u4fe1\u606f\uff0cSA\u7684\u5f71\u54cd\u8fb9{AC},CT\u7684\u5f71\u54cd\u8fb9{AC}\u3002 \u6b65\u9aa42\uff1a\u5bfb\u627e\u7b2c\u4e8c\u6761\u901a\u8def\uff1a \u56fe6\uff1a\u7b2c\u4e8c\u6761\u901a\u8def\u6807\u8bb0 \u56fe7\uff1a\u7b2c\u4e8c\u6761\u901a\u8def\u5bb9\u91cf\u4fee\u6b63 \u6b64\u65f6\uff0c\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\u4e3a{AC\uff0cDT} \u6b65\u9aa43\uff1a\u5bfb\u627e\u7b2c\u4e09\u6761\u901a\u8def\uff1a \u56fe8\uff1a\u7b2c\u4e09\u6761\u901a\u8def\u6807\u8bb0 \u56fe9\uff1a\u7b2c\u4e09\u6761\u901a\u8def\u5bb9\u91cf\u4fee\u6b63 \u6b64\u65f6\u6700\u5c0f\u5272\u8fb9\u96c6\u5408\u4e3a\uff1a{AC\uff0cDT\uff0cDC}","title":"\u5b9e\u4f8b"},{"location":"algorithm/graph/Maximum_flow_minimum_cut_theorem/%E6%9C%80%E5%B0%8F%E5%89%B2/#_3","text":"\u5b9a\u7406\u4e00 \uff1a \u5982\u679cf\u662f\u7f51\u7edc\u4e2d\u7684\u4e00\u4e2a\u6d41\uff0cCUT(S,T)\u662f\u4efb\u610f\u4e00\u4e2a\u5272\uff0c\u90a3\u4e48f\u7684\u503c\u7b49\u4e8e\u6b63\u5411\u5272\u8fb9\u7684\u6d41\u91cf\u4e0e\u8d1f\u5411\u5272\u8fb9\u7684\u6d41\u91cf\u4e4b\u5dee\u3002 \u8bc1\u660e\uff1a \u8bbeX\u548cY\u662f\u7f51\u7edc\u4e2d\u7684\u4e24\u4e2a\u9876\u70b9\u96c6\u5408\uff0c\u7528f\uff08X,Y\uff09\u8868\u793a\u4eceX\u4e2d\u7684\u4e00\u4e2a\u9876\u70b9\u6307\u5411Y\u7684\u4e00\u4e2a\u9876\u70b9\u7684\u6240\u6709\u5f27\uff08\u5f27\u5c3e\u5728X\u4e2d\uff0c\u5f27\u5934\u5728Y\u4e2d\uff1a \uff09\u7684\u6d41\u91cf\u548c\u3002\u53ea\u9700\u8bc1\u660e\uff1af=f(S,T)-f(T,S) \u5373\u53ef\u3002 \u4e0b\u5217\u7ed3\u8bba\u6210\u7acb\uff1a \u5982\u679cX\u2229Y\u4e3a\u7a7a\uff0c\u90a3\u4e48\uff1af(X,(Y1\u222aY2))=f(X,Y1)+f(X,Y2) \uff0cf((X1\u222aX2),Y)=f(X1,Y)+f(X2,Y) \u6210\u7acb\u3002 \u6839\u636e\u7f51\u7edc\u6d41\u7684\u7279\u70b9\uff1a \u5982\u679cV\u65e2\u4e0d\u662f\u6e90\u70b9\u4e5f\u4e0d\u662f\u6c47\u70b9\uff0c\u90a3\u4e48\uff1a f({V},S\u222aT)-f(S\u222aT,{V})=0\uff1b\u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u6d41\u5165\u7684\u4e0e\u6d41\u51fa\u7684\u91cf\u76f8\u7b49\u3002 \u5982\u679cV\u662f\u6e90\uff0c\u90a3\u4e48\uff1af({V},S\u222aT)-f(S\u222aT,{V})=f\u3002 \u5bf9\u4e8eS\u4e2d\u7684\u6240\u6709\u70b9V\u90fd\u6709\u4e0a\u8ff0\u5173\u7cfb\u5f0f\uff0c\u76f8\u52a0\u5f97\u5230\uff1af(S,S\u222aT)-f(S\u222aT,S)=f \u3002 \u53c8\u56e0\u4e3a\uff1a f(S,S\u222aT)-f (S\u222aT,S)= (f(S,S)+f (S,T))-(f(S,S) +f (T,S))= f(S,T)- f(T,S)\uff0c \u6240\u4ee5\uff1af= f(S,T)- f(T,S) \u5b9a\u7406\u5f97\u8bc1 [2] \u3002 \u63a8\u8bba\u4e00 \uff1a \u5982\u679cf\u662f\u7f51\u7edc\u4e2d\u7684\u4e00\u4e2a\u6d41\uff0cCUT(S,T)\u662f\u4e00\u4e2a\u5272\uff0c\u90a3\u4e48f\u7684\u503c\u4e0d\u8d85\u8fc7\u5272CUT(S,T)\u7684\u5bb9\u91cf\u3002 \u63a8\u8bba\u4e8c \uff1a \u7f51\u7edc\u4e2d\u7684\u6700\u5927\u6d41\u4e0d\u8d85\u8fc7\u4efb\u4f55\u5272\u7684\u5bb9\u91cf\u3002 \u5b9a\u7406\u4e8c \uff1a \u5728\u7f51\u7edc\u4e2d\uff0c\u5982\u679cf\u662f\u4e00\u4e2a\u6d41\uff0cCUT (S,T)\u662f\u4e00\u4e2a\u5272\uff0c\u4e14f\u7684\u503c\u7b49\u4e8e\u5272CUT(S,T)\u7684\u5bb9\u91cf\uff0c\u90a3\u4e48f\u662f\u4e00\u4e2a\u6700\u5927\u6d41\uff0c CUT(S,T)\u662f\u4e00\u4e2a\u6700\u5c0f\u5272\u3002 \u8bc1\u660e\uff1a \u4ee4\u5272CUT\uff08S,T\uff09\u7684\u5bb9\u91cf\u4e3aC\uff0c\u6240\u4ee5\u6d41f\u7684\u6d41\u91cf\u4e5f\u4e3aC\u3002\u5047\u8bbe\u53e6\u5916\u7684\u4efb\u610f\u6d41f1\uff0c\u6d41\u91cf\u4e3ac1\uff0c\u6839\u636e\u6d41\u91cf\u4e0d\u8d85\u8fc7\u5272\u7684\u5bb9\u91cf\uff0c\u5219c1<=c,\u6240\u4ee5f\u662f\u6700\u5927\u6d41\u3002 \u5047\u8bbe\u53e6\u5916\u7684\u4efb\u610f\u5272CUT\uff08S1,T1\uff09\uff0c\u5bb9\u91cf\u4e3ac1\uff0c\u6839\u636e\u6d41\u91cf\u4e0d\u8d85\u8fc7\u5272\u7684\u5bb9\u91cf\uff0c\u6240\u4ee5\u6709c1>=c,\u6545\uff0cCUT\uff08S,T\uff09\u662f\u6700\u5c0f\u5272\u3002 \u6240\u4ee5\u6c42\u6700\u5c0f\u5272\u7684\u4ee3\u7801\u4e0e\u6700\u5927\u6d41\u76f8\u540c\uff0c\u6211\u4eec\u90fd\u91c7\u7528\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4f18\u7684dinic\u7b97\u6cd5\u89e3\u51b3 class Graph { int cnt ; int inf = 0x3f3f3f ; const int maxM = 30000 ; int n ; const int maxN = 200 ; int Head [ maxN ]; int Next [ maxM ]; int W [ maxM ]; int V [ maxM ]; int Depth [ maxN ]; int cur [ maxN ]; //cur\u5c31\u662f\u8bb0\u5f55\u5f53\u524d\u70b9u\u5faa\u73af\u5230\u4e86\u54ea\u4e00\u6761\u8fb9 int s , t ; //\u6ce8\u610ft\u4e0d\u8981\u548c\u6d4b\u8bd5\u6837\u4f8b\u4e2a\u6570\u7528\u540c\u4e00\u4e2a\u53d8\u91cf void init () { cnt = -1 ; memset ( Head , -1 , sizeof ( Head )); memset ( Next , -1 , sizeof ( Next )); } void _Add ( int u , int v , int w ) { cnt ++ ; Next [ cnt ] = Head [ u ]; Head [ u ] = cnt ; V [ cnt ] = v ; W [ cnt ] = w ; } void Add_Edge ( int u , int v , int w ) { _Add ( u , v , w ); _Add ( v , u , 0 ); } int dfs ( int u , int flow ) { if ( u == t ) return flow ; for ( int & i = cur [ u ]; i != -1 ; i = Next [ i ]) //\u6ce8\u610f\u8fd9\u91cc\u7684&\u7b26\u53f7\uff0c\u8fd9\u6837i\u589e\u52a0\u7684\u540c\u65f6\u4e5f\u80fd\u6539\u53d8cur[u]\u7684\u503c\uff0c\u8fbe\u5230\u8bb0\u5f55\u5f53\u524d\u5f27\u7684\u76ee\u7684\uff0c\u4e0b\u4e00\u6b21dfs\u5c31\u53ef\u4ee5\u4ece\u4e0b\u4e00\u6761\u8fb9\u5f00\u59cb { if (( Depth [ V [ i ]] == Depth [ u ] + 1 ) && ( W [ i ] != 0 )) { int di = dfs ( V [ i ], min ( flow , W [ i ])); if ( di > 0 ) { W [ i ] -= di ; W [ i ^ 1 ] += di ; return di ; } } } return 0 ; } int bfs () { queue < int > Q ; while ( ! Q . empty ()) Q . pop (); memset ( Depth , 0 , sizeof ( Depth )); Depth [ s ] = 1 ; Q . push ( s ); do { int u = Q . front (); Q . pop (); for ( int i = Head [ u ]; i != -1 ; i = Next [ i ]) if (( Depth [ V [ i ]] == 0 ) && ( W [ i ] > 0 )) { Depth [ V [ i ]] = Depth [ u ] + 1 ; Q . push ( V [ i ]); if ( V [ i ] == t ) return 1 ; } } while ( ! Q . empty ()); if ( Depth [ t ] > 0 ) return 1 ; return 0 ; } int Dinic () { int Ans = 0 ; while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) //\u6bcf\u4e00\u6b21\u5efa\u7acb\u5b8c\u5206\u5c42\u56fe\u540e\u90fd\u8981\u628acur\u7f6e\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9 \u611f\u8c22@\u9752\u886b\u767d\u53d9\u6307\u51fa\u8fd9\u91cc\u4e4b\u524d\u7684\u4e00\u4e2a\u758f\u6f0f cur [ i ] = Head [ i ]; while ( int d = dfs ( s , inf )) { Ans += d ; } } return Ans ; } }; //\u4e00\u5b9a\u8981\u5728main\uff08\uff09\u4e2dinit()","title":"\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u8bc1\u660e"},{"location":"algorithm/graph/bellman_ford_algorithm/","text":"Bellman Ford Algorithm \u00b6 Description : Given a graph and a source vertex src in graph, find shortest paths from src to all vertices in the given graph. The graph may contain negative edges. Time Complexity : O(VE) (where V is number of vertices & E is number of edges) A massive collaborative effort by OpenGenus Foundation","title":"Bellman Ford Algorithm"},{"location":"algorithm/graph/bellman_ford_algorithm/#bellman-ford-algorithm","text":"Description : Given a graph and a source vertex src in graph, find shortest paths from src to all vertices in the given graph. The graph may contain negative edges. Time Complexity : O(VE) (where V is number of vertices & E is number of edges) A massive collaborative effort by OpenGenus Foundation","title":"Bellman Ford Algorithm"},{"location":"algorithm/graph/breadth_first_search/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Breadth First Search Algorithm (BFS) \u00b6 In this algorithm, we search for a target node among the neighbouring nodes at a level in the graph before moving to next level. Thus, it is also called as level order traversal algorithm. It is similar to the BFS algorithm for a tree. However, it is possible to have cycles in a graph. Hence, we have to keep track of the visited nodes. We use a boolean visited for this purpose. Explanation \u00b6 S ------ level 0 / | \\ / | \\ A B C --- level 1 | | | | | | D E F --- level 2 \\ | / \\ | / G ------ level 3 Applying BFS algorithm for above graph will give us following output: S A B C D E F G Complexity \u00b6 Time complexity: O(V+E) Each node is enqueued and dequeued at most once. Thus O(V) part is justified. Finding all the adjacent nodes takes O(E) time. Space complexity: O(V), worst case we need to store all the nodes in the queue. V - number of nodes E - number of edges Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/breadth_first_search/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter","title":"cosmos"},{"location":"algorithm/graph/breadth_first_search/#breadth-first-search-algorithm-bfs","text":"In this algorithm, we search for a target node among the neighbouring nodes at a level in the graph before moving to next level. Thus, it is also called as level order traversal algorithm. It is similar to the BFS algorithm for a tree. However, it is possible to have cycles in a graph. Hence, we have to keep track of the visited nodes. We use a boolean visited for this purpose.","title":"Breadth First Search Algorithm (BFS)"},{"location":"algorithm/graph/breadth_first_search/#explanation","text":"S ------ level 0 / | \\ / | \\ A B C --- level 1 | | | | | | D E F --- level 2 \\ | / \\ | / G ------ level 3 Applying BFS algorithm for above graph will give us following output: S A B C D E F G","title":"Explanation"},{"location":"algorithm/graph/breadth_first_search/#complexity","text":"Time complexity: O(V+E) Each node is enqueued and dequeued at most once. Thus O(V) part is justified. Finding all the adjacent nodes takes O(E) time. Space complexity: O(V), worst case we need to store all the nodes in the queue. V - number of nodes E - number of edges Collaborative effort by OpenGenus","title":"Complexity"},{"location":"algorithm/graph/cycle_directed_graph/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/cycle_directed_graph/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/cycle_undirected_graph/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/cycle_undirected_graph/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/depth_first_search/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/depth_first_search/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/dfs_bfs/DFS%E7%AE%97%E6%B3%95%E4%B8%8EBFS%E7%AE%97%E6%B3%95/","text":"DFS\u7b97\u6cd5 \u00b6 DFS\u7b97\u6cd5\u5373\uff1aDepth First Search\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u662f\u89e3\u51b3\u201c\u5f53\u4e0b\u5982\u4f55\u505a\u201d\uff0c\u81f3\u4e8e\u4e0b\u4e00\u6b65\u5982\u4f55\u505a\u548c\u201c\u5f53\u4e0b\u5982\u4f55\u505a\u201d\u662f\u4e00\u6837\u7684\uff0c\u8be5\u7b97\u6cd5\u4ece\u4e00\u4e2a\u72b6\u6001DFS(n)\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001DFS\uff08n+1\uff09\uff0c\u76f4\u5230\u72b6\u6001\u65e0\u6cd5\u8f6c\u79fb\u5373\u5230\u8fbe\u4e34\u754c\u70b9\uff0c\u7136\u540e\u56de\u9000\u5230\u4e0a\u4e00\u4e2a\u72b6\u6001\uff0c\u5728\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u57fa\u7840\u4e0a\u7ee7\u7eed\u904d\u5386\u5176\u4ed6\u72b6\u6001\uff0c\u5982\u6b64\u4e0d\u65ad\u91cd\u590d\uff0c\u76f4\u5230\u627e\u5230\u6700\u7ec8\u89e3\u3002\u5982\u679c\u7b97\u6cd5\u6709M\u4e2a\u72b6\u6001\uff0c\u6bcf\u4e2a\u72b6\u6001\u6709N\u79cd\u53ef\u80fd\u53ef\u4ee5\u5c1d\u8bd5\uff0c\u90a3\u4e48\u603b\u7684\u5c1d\u8bd5\u6b21\u6570\u662fN^M \u5373M\u4e2aN\u76f8\u4e58\u3002 \u7b97\u6cd5\u7684\u5173\u6ce8\u70b9\uff1a \u5f53\u4e0b\u5982\u4f55\u505a\uff0c\u5f53\u4e0b\u7684\u72b6\u6001\u5982\u4f55\u5904\u7406 \u5982\u4f55\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u4e0b\u4e00\u4e2a\u72b6\u6001\u6709\u54ea\u4e9b\u53ef\u80fd\uff1f \u4e34\u754c\u6761\u4ef6\u8bbe\u5b9a\u548cdfs\u7ed3\u675f\u6761\u4ef6\u7684\u8bbe\u5b9a\u4ee5\u53ca\u5904\u7406 \u6807\u5fd7\u4f4d\u7684\u8bbe\u7f6e\u548c\u590d\u4f4d\uff0c\u6807\u8bb0\u8d44\u6e90\u88ab\u5360\u7528\uff0c\u4ee5\u53ca\u5f53\u524d\u4f7f\u7528\u540e\u53ca\u65f6\u91ca\u653e\uff0c\u7559\u7ed9\u4e0b\u4e00\u6b21\u4f7f\u7528\u3002 \u4e00\u822c\u5728\u8fdb\u884cDFS\u904d\u5386\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u4e00\u4e9b\u9650\u5236\u6761\u4ef6\uff0c\u5982\u5df2\u7ecf\u7528\u8fc7\u7684\u4e1c\u897f\u4e0d\u80fd\u518d\u4f7f\u7528\uff0c\u5219\u9700\u8981\u5bf9\u6bcf\u6b21\u7684\u4f7f\u7528\u505a\u4e00\u4e2a\u6807\u8bb0\uff0c\u7136\u540e\u8f6c\u5165\u5230\u4e0b\u4e00\u72b6\u6001\uff0c\u5e76\u4e14\u4ece\u4e0b\u4e00\u72b6\u6001\u8fd4\u56de\u65f6\u5019\u9700\u8981\u6e05\u9664\u6807\u8bb0\u3002 \u5173\u952e\u662f\u5206\u6e05**\u72b6\u6001**\u548c\u6bcf\u79cd\u72b6\u6001\u4e0b\u7684**\u53ef\u80fd**\u7684\u533a\u522b\u3002 BFS\u7b97\u6cd5 \u00b6 \u6211\u89c9\u5f97\u6709\u4e00\u79cd\u6bd4\u55bb\u5bf9\u4e8e DFS \u548c BFS \u4ece\u65b9\u6cd5\u8bba\u7684\u89d2\u5ea6\u89e3\u91ca\u5f88\u5230\u4f4d\uff0cDFS \u5c31\u50cf\u662f\u5c0f\u660e\u8981\u5728\u5bb6\u91cc\u627e\u5230\u94a5\u5319\uff0c\u56e0\u4e3a\u5bf9\u4f4d\u7f6e\u7684\u4e0d\u786e\u5b9a\uff0c\u6240\u4ee5\u4e00\u95f4\u4e00\u95f4\u7684\u6765\u627e\uff0c\u6df1\u5ea6\u904d\u5386\u80fd\u786e\u4fdd\u5c0f\u660e\u8d70\u8fc7\u6240\u6709\u7684\u5c4b\u5b50\u3002\u800c BFS \u50cf\u662f\u8fd1\u89c6\u7684\u5c0f\u660e\u7684\u773c\u955c\u6389\u5728\u4e86\u5730\u4e0a\uff0c\u5c0f\u660e\u80af\u5b9a\u662f\u5148\u6478\u7d22\u79bb\u624b\u6bd4\u8f83\u8fd1\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u624b\u6162\u6162\u5411\u8fdc\u65b9\u5ef6\u4f38\uff0c\u76f4\u81f3\u6478\u5230\u773c\u955c\uff0c\u50cf\u662f\u4ee5\u5c0f\u660e\u4e3a\u4e2d\u5fc3\u641c\u7d22\u5708\u4e0d\u65ad\u6269\u5927\u7684\u8fc7\u7a0b\u3002\u6240\u4ee5\u5982\u679c\u8bf4 DFS \u4ece\u904d\u5386\u7684\u5c42\u6b21\u7ed3\u6784\u4e0a\u7c7b\u4f3c\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c\u90a3\u4e48BFS\u7b97\u6cd5\u6309\u7167\u91cc\u5916\u987a\u5e8f\u9010\u6e10\u589e\u52a0\u6df1\u5ea6\u7684\u505a\u6cd5\uff0c\u5c31\u50cf\u6781\u4e86\u6734\u7d20\u7684\u5c42\u6b21\u904d\u5386\uff0c\u4f8b\u5982\uff1a \u628a\u5de6\u56fe\u62c9\u5e73\uff0c\u6309\u7167\u5c42\u5e8f\u628a\u7ed3\u70b9\u6392\u5217\u4e0b\u6765\uff0c\u5404\u8282\u70b9\u7684\u8fde\u63a5\u5173\u7cfb\u5e76\u6ca1\u6709\u53d8\uff0c\u56fe\u7ed3\u6784\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u662f\u8fd9\u65f6\uff0c\u6211\u4eec\u4eceA\u51fa\u53d1\uff0c\u6309\u5c42\u5e8f\u904d\u5386\u53ef\u4ee5\u5f97\u5230\u987a\u5e8f\u662f A B F C I G E D H \u7ed3\u5408\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7684 DFS \uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u79cd\u7b97\u6cd5\u7684\u533a\u522b\u5728\u6bcf\u4e00\u4e2a\u70b9\u4e0a\u90fd\u80fd\u5f97\u4ee5\u4f53\u73b0\uff0c\u6bd4\u5982 A \u70b9\uff0cDFS \u9f13\u52b1\u7ed3\u70b9\u5411\u7740\u4e00\u4e2a\u65b9\u5411\u51b2\uff0cBFS \u5219\u4f1a\u5728\u4e00\u4e2a\u70b9\u4e0a\u6309\u7167\u9876\u70b9\u4e0b\u6807\u6b21\u5e8f\u904d\u5386\u5b8c\u6240\u6709\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u6bd4\u5982A\u70b9\u904d\u5386\u5b8c\uff0c\u9a6c\u4e0a\u5f00\u59cb\u626b\u63cf\uff0c\u5982\u679c B F\u8fd9\u4e24\u4e2a\u70b9\u6ca1\u6709\u88ab\u5ba0\u5e78\u8fc7\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u7ffb\u5b8c B\u3001F \u8fd9\u4e24\u4e2a\u70b9\u7684\u724c\u5b50\u4e4b\u540e\uff0c\u624d\u4f1a\u7ee7\u7eed\u8bbf\u95ee\u7b2c\u4e8c\u5c42\uff0c\u5373\u628aA\u70b9\u76f8\u8fde\u7684\u7ed3\u70b9\u5168\u90e8\u904d\u5386\u5b8c\u6210\u624d\u884c\uff0c\u5f53\u7136\u5230\u4e86\u7b2c\u4e8c\u5c42 \u53d1\u73b0 B\u3001F \u65e9\u5c31\u88abA\u5b89\u6392\u8fc7\u4e86\uff0c\u5c31\u4e0d\u518d\u8fdb\u5165\u8fd9\u4e24\u4e2a\u70b9\u7684\u5faa\u73af\uff0c\u540e\u9762\u7684\u4e00\u6837\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002 \u6211\u4eec\u56de\u5fc6\u4e00\u4e0bDFS\u7b97\u6cd5\uff0cDFS\u6cbf\u7740\u4e00\u4e2a\u65b9\u5411\u8d70\u6700\u540e\u662f\u8981\u8d70\u56de\u5934\u8def\u7684\uff0c\u56e0\u4e3a\u5b83\u8fdf\u65e9\u4f1a\u904d\u5386\u5230\u4e00\u4e2a\u6240\u6709\u5206\u652f\u90fd\u88ab\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u90a3\u4e48\u8981\u8d70\u56de\u5934\u8def\u610f\u5473\u7740\u6211\u4eec\u5b9e\u73b0 DFS \u65f6\u5e94\u8be5\u9009\u62e9\u540e\u8fdb\u5148\u51fa\u7684\u6808\u7ed3\u6784\uff0c\u800c\u73b0\u5728\u7684 BFS \u7b97\u6cd5\u662f\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u5c31\u4f1a\u904d\u5386\u6240\u6709\u6ca1\u8bbf\u95ee\u8fc7\u7684\u70b9\uff0c\u540c\u65f6\uff0c\u4e00\u4e2a\u70b9\u5982\u679c\u5df2\u7ecf\u8bbf\u95ee\u5b8c\uff0c\u90a3\u4e48\u5b83\u5c31\u6ca1\u6709\u5229\u7528\u4ef7\u503c\u4e86\uff0c\u6240\u4ee5\u5e94\u8be5\u4f7f\u7528\u961f\u5217\u5148\u8fdb\u5148\u51fa\u7684\u7279\u70b9 \u4f8b\u9898\uff1a \u300a\u8ff7\u5bab\u95ee\u9898\u300b \u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff1a 0 0 1 0 1 //0\u8868\u793a\u53ef\u8d70\uff0c1\u8868\u793a\u5899 0 1 1 1 0 //\u53ea\u80fd\u2191\u2193\u2190\u2192\u8d70\uff0c\u4e0d\u80fd\u659c\u7740\u8d70 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 //\u9898\u76ee\u4fdd\u8bc1\u4e86\u8f93\u5165\u662f\u4e00\u5b9a\u6709\u89e3\u7684 \u6c42\u4ece\u5de6\u4e0a\u89d2\uff08 0 \uff0c 0 \uff09\u5230\u53f3\u4e0b\u89d2\uff08 4 \uff0c 4 \uff09\u7684\u6700\u77ed\u8def\u7ebf\u3002 bfs\u89e3\u9898\u6838\u5fc3\u903b\u8f91\u4f2a\u4ee3\u7801 \uff1a 1 \uff0c\u5c06\u8d77\u70b9\u63a8\u5165\u961f\u5217\u4e2d\uff1b 2 \uff0c\u5c06\u8d77\u70b9\u6807\u8bc6\u4e3a\u5df2\u8d70\u8fc7\uff1b while \uff08\u961f\u5217\u975e\u7a7a\uff09 { 3 \uff0c\u53d6\u961f\u5217\u9996\u8282\u70b9 vt \uff0c\u5e76\u4ece\u961f\u5217\u4e2d\u5f39\u51fa\uff1b 4 \uff0c\u63a2\u7d22\u4e0a\u9762\u53d6\u51fa\u5f97\u8282\u70b9\u7684\u5468\u56f4\u662f\u5426\u6709\u6ca1\u8d70\u8fc7\u7684\u8282\u70b9 vf \uff0c\u5982\u679c\u6709\u5c06\u6240\u6709\u80fd\u8d70\u7684 vf\u7684parents\u6307\u5411vt \uff0c\u5e76\u5c06 vf\u52a0\u5165\u961f\u5217 \uff08\u5982\u679c vf\u7b49\u4e8e\u7ec8\u70b9 \uff0c\u8bf4\u660e\u63a2\u7d22\u5b8c\u6210\uff0c\u9000\u51fa\u5faa\u73af\uff09\u3002 } \u5982\u679c\u961f\u5217\u4e3a\u7a7a\u81ea\u7136\u8df3\u51fa\uff0c\u8bf4\u660e\u65e0\u8def\u53ef\u8fbe\u7ec8\u70b9\u3002 \u5b9e\u9645 c ++ \u5b9e\u73b0\uff1a #include <vector> #include <iostream> #include <string> #include <algorithm> #include <map> #include <queue> using namespace std ; struct Node //\u5b9a\u4e49\u7ed3\u6784\u4f53Node { int xx ; //\u81ea\u8eab\u5904\u4e8e\u7ec4\u5185\u7684\u4f4d\u7f6e int yy ; bool qiang ; //\u662f\u5426\u662f\u5899 bool walked ; //\u662f\u5426\u8d70\u8fc7 Node * parents ; //\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488 }; int main () { int id = 0 ; //int xx, yy; queue < Node *> bfs ; //\u521b\u5efaNode\u6307\u9488\u961f\u5217 vector < vector < Node >> migong ; //\u521b\u5efa\u4e8c\u7ef4\u8ff7\u5bab\u7ec4 for ( int i = 0 ; i < 5 ; i ++ ) { vector < Node > hang ; for ( int j = 0 ; j < 5 ; j ++ ) { int ii ; cin >> ii ; Node node { i , j , ii , false }; hang . push_back ( node ); } migong . push_back ( hang ); } //\u8f93\u5165\u5b8c\u6bd5 int ax [ 4 ] = { -1 , 1 , 0 , 0 }; int by [ 4 ] = { 0 , 0 , 1 , -1 }; bfs . push ( & migong [ 0 ][ 0 ]); //\u5148\u5c06\u8d77\u70b9\u63a8\u8fdb\u53bb migong [ 0 ][ 0 ]. walked = true ; Node * vt ; //\u7b49\u4e0b\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488 Node * vf ; //\u7b49\u4e0b\u6307\u5411\u7236\u8282\u70b9\u5f15\u7533\u51fa\u7684\u5b50\u8282\u70b9 while ( ! bfs . empty ()) { vt = bfs . front (); bfs . pop (); if (( * vt ). xx >= 1 ) { //\u67e5\u8be2\u5de6\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). xx + ax [ 0 ]][( * vt ). yy + by [ 0 ]]; if ( ! ( * vf ). qiang && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; //\u5b50\u8282\u70b9\u6307\u5411\u7236\u8282\u70b9 if (( * vf ). xx == 4 && ( * vf ). yy == 4 ) break ; //\u5982\u679c\u662f\u7ec8\u70b9\u8282\u70b9\uff0c\u7ed3\u675f\u5bfb\u627e\uff0c\u8df3\u51fa\u5faa\u73af\u3002 } } if (( * vt ). xx <= 3 ) { //\u67e5\u8be2\u53f3\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). xx + ax [ 1 ]][( * vt ). yy + by [ 1 ]]; if ( ! ( * vf ). qiang && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). xx == 4 && ( * vf ). yy == 4 ) break ; } } if (( * vt ). yy <= 3 ) { //\u67e5\u8be2\u4e0b\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). xx + ax [ 2 ]][( * vt ). yy + by [ 2 ]]; if ( ! ( * vf ). qiang && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). xx == 4 && ( * vf ). yy == 4 ) break ; } } if (( * vt ). yy >= 1 ) { //\u67e5\u8be2\u4e0a\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). xx + ax [ 3 ]][( * vt ). yy + by [ 3 ]]; if ( ! ( * vf ). qiang && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). xx == 4 && ( * vf ). yy == 4 ) break ; } } } //\u7ed3\u675f\u7b97\u6cd5\uff0c\u4ecevf\u6307\u5411\u7684\u8282\u70b9\u5f00\u59cb\u5bfb\u627e\u7236\u8282\u70b9\u3002 vector < Node *> fin ; while ( true ) { fin . push_back ( vf ); vf = ( * vf ). parents ; if (( * vf ). xx == 0 && ( * vf ). yy == 0 ) { fin . push_back ( vf ); break ; } } //\u8f93\u51fa for ( int i = fin . size () -1 ; i >= 0 ; i -- ) { cout << ( * fin [ i ]). xx << \",\" << ( * fin [ i ]). yy << endl ; } return 0 ; } \u8f93\u51fa\u793a\u4f8b\uff1a 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 , 0 1 , 0 2 , 0 2 , 1 2 , 2 2 , 3 2 , 4 3 , 4 4 , 4 dfs\u89e3\u9898\u6838\u5fc3\u903b\u8f91\u4f2a\u4ee3\u7801 \uff1a 1 \uff0c\u6808\u521d\u59cb\u5316 2 \uff0c\u83b7\u5f97\u8d77\u70b9\uff0c\u5c06\u8d77\u70b9\u6807\u8bc6\u4e3a\u5df2\u8d70\u8fc7\uff0c\u5c06\u8d77\u70b9\u5165\u6808 while \uff08\u6808\u975e\u7a7a\uff09 { \u53d6\u6808\u9876\u5143\u7d20 vt \u5982\u679c vt\u5468\u56f4\u6709\u4e3a\u8d70\u8fc7\u7684\u8282\u70b9vf \uff0c\u5219\uff1a \u5c06 vf\u6539\u4e3a\u5df2\u8d70 vf\u5165\u6808 \u6ca1\u6709\u80fd\u8d70\u7684\u8282\u70b9\uff0c vt\u51fa\u6808 } \u4ee3\u7801\uff1a #include <iostream> #include <vector> #include <list> #include <algorithm> #include <queue> #include <string> #include <stack> #include <time.h> #include <windows.h> #include <set> using namespace std ; struct Node { int x ; int y ; bool walked ; int g ; int f ; //f = g+h int h ; Node * parents ; }; int main () { vector < vector < Node >> migong ; //\u521b\u5efa\u4e8c\u7ef4\u8ff7\u5bab\u7ec4 for ( int i = 0 ; i < 5 ; i ++ ) { vector < Node > hang ; for ( int j = 0 ; j < 5 ; j ++ ) { int ii ; cin >> ii ; Node node { i , j , ii }; hang . push_back ( node ); } migong . push_back ( hang ); } /*-----------------------------------dfs----------------------------------------------*/ vector < vector < Node >> migong2 = migong ; stack < Node *> f ; f . push ( & migong2 [ 0 ][ 0 ]); migong2 [ 0 ][ 0 ]. walked = true ; while ( ! f . empty ()) { Node * vt = f . top (); bool can = true ; if ( vt -> x >= 1 ) { Node * vf = & migong2 [ vt -> x - 1 ][ vt -> y ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> x <= 3 ) { Node * vf = & migong2 [ vt -> x + 1 ][ vt -> y ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> y >= 1 ) { Node * vf = & migong2 [ vt -> x ][ vt -> y - 1 ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> y <= 3 ) { Node * vf = & migong2 [ vt -> x ][ vt -> y + 1 ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( can ) { f . pop (); } } vector < Node *> fin2 ; Node * bb = & migong2 [ 4 ][ 4 ]; while ( true ) { fin2 . push_back ( aa ); if ( bb == & migong2 [ 0 ][ 0 ]) { break ; } bb = bb -> parents ; } int count2 = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { cout << migong2 [ i ][ j ]. walked ; if ( migong2 [ i ][ j ]. walked ) count2 ++ ; } cout << endl ; } reverse ( fin2 . begin (), fin2 . end ()); for ( int i = 0 ; i < fin . size (); i ++ ) { cout << fin [ i ] -> x << \" \" << fin [ i ] -> y << endl ; } return 0 ; } \u8f93\u51fa\uff1a 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 11000 11111 11111 11111 00011 0 0 1 0 2 0 2 1 2 2 2 3 2 4 3 4 4 4 \u4e24\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u5bf9\u6bd4\u4ee5\u53ca\u8def\u5f84\u5206\u6790\uff1a #include <iostream> #include <vector> #include <list> #include <algorithm> #include <queue> #include <string> #include <stack> #include <time.h> #include <windows.h> #include <set> using namespace std ; struct Node { int x ; int y ; bool walked ; int g ; int f ; //f = g+h int h ; Node * parents ; }; int main () { int qiang = 0 ; vector < vector < Node >> migong ; //\u521b\u5efa\u4e8c\u7ef4\u8ff7\u5bab\u7ec4 for ( int i = 0 ; i < 5 ; i ++ ) { vector < Node > hang ; for ( int j = 0 ; j < 5 ; j ++ ) { int ii ; cin >> ii ; if ( ii ) qiang ++ ; Node node { i , j , ii }; hang . push_back ( node ); } migong . push_back ( hang ); } int a [ 10002 ]; int i = 0 ; double run_time ; _LARGE_INTEGER time_start ; //\u5f00\u59cb\u65f6\u95f4 _LARGE_INTEGER time_over ; //\u7ed3\u675f\u65f6\u95f4 double dqFreq ; //\u8ba1\u65f6\u5668\u9891\u7387 LARGE_INTEGER ff ; //\u8ba1\u65f6\u5668\u9891\u7387 QueryPerformanceFrequency ( & ff ); dqFreq = ( double ) ff . QuadPart ; QueryPerformanceCounter ( & time_start ); /*-----------------------------------dfs----------------------------------------------*/ vector < vector < Node >> migong2 = migong ; stack < Node *> f ; f . push ( & migong2 [ 0 ][ 0 ]); migong2 [ 0 ][ 0 ]. walked = true ; while ( ! f . empty ()) { Node * vt = f . top (); bool can = true ; if ( vt -> x >= 1 ) { Node * vf = & migong2 [ vt -> x - 1 ][ vt -> y ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> x <= 3 ) { Node * vf = & migong2 [ vt -> x + 1 ][ vt -> y ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> y >= 1 ) { Node * vf = & migong2 [ vt -> x ][ vt -> y - 1 ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> y <= 3 ) { Node * vf = & migong2 [ vt -> x ][ vt -> y + 1 ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( can ) { f . pop (); } } QueryPerformanceCounter ( & time_over ); //\u8ba1\u65f6\u7ed3\u675f run_time = 1000000 * ( time_over . QuadPart - time_start . QuadPart ) / dqFreq ; float time1 = run_time ; QueryPerformanceFrequency ( & ff ); dqFreq = ( double ) ff . QuadPart ; QueryPerformanceCounter ( & time_start ); /*-----------------------------------bfs----------------------------------------------*/ int ax [ 4 ] = { -1 , 1 , 0 , 0 }; int by [ 4 ] = { 0 , 0 , 1 , -1 }; queue < Node *> bfs ; bfs . push ( & migong [ 0 ][ 0 ]); //\u5148\u5c06\u8d77\u70b9\u63a8\u8fdb\u53bb migong [ 0 ][ 0 ]. walked = true ; Node * vt ; //\u7b49\u4e0b\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488 Node * vf ; //\u7b49\u4e0b\u6307\u5411\u7236\u8282\u70b9\u5f15\u7533\u51fa\u7684\u5b50\u8282\u70b9 while ( ! bfs . empty ()) { vt = bfs . front (); bfs . pop (); if (( * vt ). x >= 1 ) { //\u67e5\u8be2\u5de6\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). x + ax [ 0 ]][( * vt ). y + by [ 0 ]]; if ( ! ( * vf ). walked && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; //\u5b50\u8282\u70b9\u6307\u5411\u7236\u8282\u70b9 if (( * vf ). x == 4 && ( * vf ). y == 4 ) break ; //\u5982\u679c\u662f\u7ec8\u70b9\u8282\u70b9\uff0c\u7ed3\u675f\u5bfb\u627e\uff0c\u8df3\u51fa\u5faa\u73af\u3002 } } if (( * vt ). x <= 3 ) { //\u67e5\u8be2\u53f3\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). x + ax [ 1 ]][( * vt ). y + by [ 1 ]]; if ( ! ( * vf ). walked && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). x == 4 && ( * vf ). y == 4 ) break ; } } if (( * vt ). y <= 3 ) { //\u67e5\u8be2\u4e0b\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). x + ax [ 2 ]][( * vt ). y + by [ 2 ]]; if ( ! ( * vf ). walked && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). x == 4 && ( * vf ). y == 4 ) break ; } } if (( * vt ). y >= 1 ) { //\u67e5\u8be2\u4e0a\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). x + ax [ 3 ]][( * vt ). y + by [ 3 ]]; if ( ! ( * vf ). walked && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). x == 4 && ( * vf ). y == 4 ) break ; } } } QueryPerformanceCounter ( & time_over ); //\u8ba1\u65f6\u7ed3\u675f run_time = 1000000 * ( time_over . QuadPart - time_start . QuadPart ) / dqFreq ; float time2 = run_time ; /*-----------------------------------A*----------------------------------------------*/ vector < vector < Node >> migong3 = migong ; set < Node *> openNode ; set < Node *> closeNode ; openNode . insert ( & migong3 [ 0 ][ 0 ]); /*-----------------------------------\u7ed3\u675f----------------------------------------------*/ vector < Node *> fin ; Node * aa = & migong [ 4 ][ 4 ]; while ( true ) { fin . push_back ( aa ); if ( aa == & migong [ 0 ][ 0 ]) { break ; } aa = aa -> parents ; } vector < Node *> fin2 ; Node * bb = & migong2 [ 4 ][ 4 ]; while ( true ) { fin2 . push_back ( bb ); if ( bb == & migong2 [ 0 ][ 0 ]) { break ; } bb = bb -> parents ; } cout << \"bfs\u8fd0\u884c\u540e\u77e9\u9635\" << endl ; int count = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { cout << migong [ i ][ j ]. walked ; if ( migong [ i ][ j ]. walked ) count ++ ; } cout << endl ; } reverse ( fin . begin (), fin . end ()); cout << \"dfs\u8fd0\u884c\u540e\u77e9\u9635\" << endl ; int count2 = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { cout << migong2 [ i ][ j ]. walked ; if ( migong2 [ i ][ j ]. walked ) count2 ++ ; } cout << endl ; } reverse ( fin2 . begin (), fin2 . end ()); for ( int i = 0 ; i < fin . size (); i ++ ) { cout << fin [ i ] -> x << \" \" << fin [ i ] -> y << endl ; } cout << \"Totle Time of dfs : \" << time1 << \"s\" << endl ; cout << \"Totle Time of bfs: \" << time2 << \"s\" << endl ; cout << \"bfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570\uff1a\" << count - qiang << endl ; cout << \"dfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570\uff1a\" << count2 - qiang << endl ; return 0 ; //https://blog.csdn.net/u012878643/article/details/46723375 } \u8f93\u51fa\u793a\u4f8b 1 \uff1a 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 bfs\u8fd0\u884c\u540e\u77e9\u9635 11001 11111 11111 11111 11111 dfs\u8fd0\u884c\u540e\u77e9\u9635 11000 11111 11111 11111 00011 bfs\u8def\u5f84 0 0 1 0 2 0 2 1 2 2 2 3 2 4 3 4 4 4 dfs\u8def\u5f84 0 0 1 0 2 0 2 1 2 2 2 3 2 4 3 4 4 4 Totle Time of dfs : 65.5013 s Totle Time of bfs : 67.3427 s bfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 15 dfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 11 \u8f93\u51fa\u793a\u4f8b 2 \uff1a 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 bfs\u8fd0\u884c\u540e\u77e9\u9635 11111 11111 11111 11111 11111 dfs\u8fd0\u884c\u540e\u77e9\u9635 11111 11111 11111 11111 11111 bfs\u8def\u5f84 0 0 1 0 2 0 3 0 4 0 4 1 4 2 4 3 4 4 dfs\u8def\u5f84 0 0 0 1 0 2 0 3 0 4 1 4 2 4 2 3 2 2 2 1 2 0 3 0 4 0 4 1 4 2 4 3 4 4 Totle Time of dfs : 133.107 s Totle Time of bfs : 131.792 s bfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 25 dfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 25 \u8f93\u51fa\u793a\u4f8b 3 \uff1a 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 bfs\u8fd0\u884c\u540e\u77e9\u9635 11111 11111 11111 11111 11111 dfs\u8fd0\u884c\u540e\u77e9\u9635 11111 11111 11111 11111 11111 bfs\u8def\u5f84 0 0 1 0 2 0 3 0 4 0 4 1 4 2 4 3 4 4 dfs\u8def\u5f84 0 0 0 1 0 2 0 3 0 4 1 4 2 4 2 3 2 2 2 1 2 0 3 0 4 0 4 1 4 2 4 3 4 4 Totle Time of dfs : 120.217 s Totle Time of bfs : 99.1726 s bfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 19 dfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 19","title":"DFS\u7b97\u6cd5"},{"location":"algorithm/graph/dfs_bfs/DFS%E7%AE%97%E6%B3%95%E4%B8%8EBFS%E7%AE%97%E6%B3%95/#dfs","text":"DFS\u7b97\u6cd5\u5373\uff1aDepth First Search\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5173\u952e\u662f\u89e3\u51b3\u201c\u5f53\u4e0b\u5982\u4f55\u505a\u201d\uff0c\u81f3\u4e8e\u4e0b\u4e00\u6b65\u5982\u4f55\u505a\u548c\u201c\u5f53\u4e0b\u5982\u4f55\u505a\u201d\u662f\u4e00\u6837\u7684\uff0c\u8be5\u7b97\u6cd5\u4ece\u4e00\u4e2a\u72b6\u6001DFS(n)\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001DFS\uff08n+1\uff09\uff0c\u76f4\u5230\u72b6\u6001\u65e0\u6cd5\u8f6c\u79fb\u5373\u5230\u8fbe\u4e34\u754c\u70b9\uff0c\u7136\u540e\u56de\u9000\u5230\u4e0a\u4e00\u4e2a\u72b6\u6001\uff0c\u5728\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u57fa\u7840\u4e0a\u7ee7\u7eed\u904d\u5386\u5176\u4ed6\u72b6\u6001\uff0c\u5982\u6b64\u4e0d\u65ad\u91cd\u590d\uff0c\u76f4\u5230\u627e\u5230\u6700\u7ec8\u89e3\u3002\u5982\u679c\u7b97\u6cd5\u6709M\u4e2a\u72b6\u6001\uff0c\u6bcf\u4e2a\u72b6\u6001\u6709N\u79cd\u53ef\u80fd\u53ef\u4ee5\u5c1d\u8bd5\uff0c\u90a3\u4e48\u603b\u7684\u5c1d\u8bd5\u6b21\u6570\u662fN^M \u5373M\u4e2aN\u76f8\u4e58\u3002 \u7b97\u6cd5\u7684\u5173\u6ce8\u70b9\uff1a \u5f53\u4e0b\u5982\u4f55\u505a\uff0c\u5f53\u4e0b\u7684\u72b6\u6001\u5982\u4f55\u5904\u7406 \u5982\u4f55\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u4e0b\u4e00\u4e2a\u72b6\u6001\u6709\u54ea\u4e9b\u53ef\u80fd\uff1f \u4e34\u754c\u6761\u4ef6\u8bbe\u5b9a\u548cdfs\u7ed3\u675f\u6761\u4ef6\u7684\u8bbe\u5b9a\u4ee5\u53ca\u5904\u7406 \u6807\u5fd7\u4f4d\u7684\u8bbe\u7f6e\u548c\u590d\u4f4d\uff0c\u6807\u8bb0\u8d44\u6e90\u88ab\u5360\u7528\uff0c\u4ee5\u53ca\u5f53\u524d\u4f7f\u7528\u540e\u53ca\u65f6\u91ca\u653e\uff0c\u7559\u7ed9\u4e0b\u4e00\u6b21\u4f7f\u7528\u3002 \u4e00\u822c\u5728\u8fdb\u884cDFS\u904d\u5386\u7684\u65f6\u5019\uff0c\u4f1a\u6709\u4e00\u4e9b\u9650\u5236\u6761\u4ef6\uff0c\u5982\u5df2\u7ecf\u7528\u8fc7\u7684\u4e1c\u897f\u4e0d\u80fd\u518d\u4f7f\u7528\uff0c\u5219\u9700\u8981\u5bf9\u6bcf\u6b21\u7684\u4f7f\u7528\u505a\u4e00\u4e2a\u6807\u8bb0\uff0c\u7136\u540e\u8f6c\u5165\u5230\u4e0b\u4e00\u72b6\u6001\uff0c\u5e76\u4e14\u4ece\u4e0b\u4e00\u72b6\u6001\u8fd4\u56de\u65f6\u5019\u9700\u8981\u6e05\u9664\u6807\u8bb0\u3002 \u5173\u952e\u662f\u5206\u6e05**\u72b6\u6001**\u548c\u6bcf\u79cd\u72b6\u6001\u4e0b\u7684**\u53ef\u80fd**\u7684\u533a\u522b\u3002","title":"DFS\u7b97\u6cd5"},{"location":"algorithm/graph/dfs_bfs/DFS%E7%AE%97%E6%B3%95%E4%B8%8EBFS%E7%AE%97%E6%B3%95/#bfs","text":"\u6211\u89c9\u5f97\u6709\u4e00\u79cd\u6bd4\u55bb\u5bf9\u4e8e DFS \u548c BFS \u4ece\u65b9\u6cd5\u8bba\u7684\u89d2\u5ea6\u89e3\u91ca\u5f88\u5230\u4f4d\uff0cDFS \u5c31\u50cf\u662f\u5c0f\u660e\u8981\u5728\u5bb6\u91cc\u627e\u5230\u94a5\u5319\uff0c\u56e0\u4e3a\u5bf9\u4f4d\u7f6e\u7684\u4e0d\u786e\u5b9a\uff0c\u6240\u4ee5\u4e00\u95f4\u4e00\u95f4\u7684\u6765\u627e\uff0c\u6df1\u5ea6\u904d\u5386\u80fd\u786e\u4fdd\u5c0f\u660e\u8d70\u8fc7\u6240\u6709\u7684\u5c4b\u5b50\u3002\u800c BFS \u50cf\u662f\u8fd1\u89c6\u7684\u5c0f\u660e\u7684\u773c\u955c\u6389\u5728\u4e86\u5730\u4e0a\uff0c\u5c0f\u660e\u80af\u5b9a\u662f\u5148\u6478\u7d22\u79bb\u624b\u6bd4\u8f83\u8fd1\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u624b\u6162\u6162\u5411\u8fdc\u65b9\u5ef6\u4f38\uff0c\u76f4\u81f3\u6478\u5230\u773c\u955c\uff0c\u50cf\u662f\u4ee5\u5c0f\u660e\u4e3a\u4e2d\u5fc3\u641c\u7d22\u5708\u4e0d\u65ad\u6269\u5927\u7684\u8fc7\u7a0b\u3002\u6240\u4ee5\u5982\u679c\u8bf4 DFS \u4ece\u904d\u5386\u7684\u5c42\u6b21\u7ed3\u6784\u4e0a\u7c7b\u4f3c\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c\u90a3\u4e48BFS\u7b97\u6cd5\u6309\u7167\u91cc\u5916\u987a\u5e8f\u9010\u6e10\u589e\u52a0\u6df1\u5ea6\u7684\u505a\u6cd5\uff0c\u5c31\u50cf\u6781\u4e86\u6734\u7d20\u7684\u5c42\u6b21\u904d\u5386\uff0c\u4f8b\u5982\uff1a \u628a\u5de6\u56fe\u62c9\u5e73\uff0c\u6309\u7167\u5c42\u5e8f\u628a\u7ed3\u70b9\u6392\u5217\u4e0b\u6765\uff0c\u5404\u8282\u70b9\u7684\u8fde\u63a5\u5173\u7cfb\u5e76\u6ca1\u6709\u53d8\uff0c\u56fe\u7ed3\u6784\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u662f\u8fd9\u65f6\uff0c\u6211\u4eec\u4eceA\u51fa\u53d1\uff0c\u6309\u5c42\u5e8f\u904d\u5386\u53ef\u4ee5\u5f97\u5230\u987a\u5e8f\u662f A B F C I G E D H \u7ed3\u5408\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7684 DFS \uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u79cd\u7b97\u6cd5\u7684\u533a\u522b\u5728\u6bcf\u4e00\u4e2a\u70b9\u4e0a\u90fd\u80fd\u5f97\u4ee5\u4f53\u73b0\uff0c\u6bd4\u5982 A \u70b9\uff0cDFS \u9f13\u52b1\u7ed3\u70b9\u5411\u7740\u4e00\u4e2a\u65b9\u5411\u51b2\uff0cBFS \u5219\u4f1a\u5728\u4e00\u4e2a\u70b9\u4e0a\u6309\u7167\u9876\u70b9\u4e0b\u6807\u6b21\u5e8f\u904d\u5386\u5b8c\u6240\u6709\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u6bd4\u5982A\u70b9\u904d\u5386\u5b8c\uff0c\u9a6c\u4e0a\u5f00\u59cb\u626b\u63cf\uff0c\u5982\u679c B F\u8fd9\u4e24\u4e2a\u70b9\u6ca1\u6709\u88ab\u5ba0\u5e78\u8fc7\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u7ffb\u5b8c B\u3001F \u8fd9\u4e24\u4e2a\u70b9\u7684\u724c\u5b50\u4e4b\u540e\uff0c\u624d\u4f1a\u7ee7\u7eed\u8bbf\u95ee\u7b2c\u4e8c\u5c42\uff0c\u5373\u628aA\u70b9\u76f8\u8fde\u7684\u7ed3\u70b9\u5168\u90e8\u904d\u5386\u5b8c\u6210\u624d\u884c\uff0c\u5f53\u7136\u5230\u4e86\u7b2c\u4e8c\u5c42 \u53d1\u73b0 B\u3001F \u65e9\u5c31\u88abA\u5b89\u6392\u8fc7\u4e86\uff0c\u5c31\u4e0d\u518d\u8fdb\u5165\u8fd9\u4e24\u4e2a\u70b9\u7684\u5faa\u73af\uff0c\u540e\u9762\u7684\u4e00\u6837\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002 \u6211\u4eec\u56de\u5fc6\u4e00\u4e0bDFS\u7b97\u6cd5\uff0cDFS\u6cbf\u7740\u4e00\u4e2a\u65b9\u5411\u8d70\u6700\u540e\u662f\u8981\u8d70\u56de\u5934\u8def\u7684\uff0c\u56e0\u4e3a\u5b83\u8fdf\u65e9\u4f1a\u904d\u5386\u5230\u4e00\u4e2a\u6240\u6709\u5206\u652f\u90fd\u88ab\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u90a3\u4e48\u8981\u8d70\u56de\u5934\u8def\u610f\u5473\u7740\u6211\u4eec\u5b9e\u73b0 DFS \u65f6\u5e94\u8be5\u9009\u62e9\u540e\u8fdb\u5148\u51fa\u7684\u6808\u7ed3\u6784\uff0c\u800c\u73b0\u5728\u7684 BFS \u7b97\u6cd5\u662f\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u5c31\u4f1a\u904d\u5386\u6240\u6709\u6ca1\u8bbf\u95ee\u8fc7\u7684\u70b9\uff0c\u540c\u65f6\uff0c\u4e00\u4e2a\u70b9\u5982\u679c\u5df2\u7ecf\u8bbf\u95ee\u5b8c\uff0c\u90a3\u4e48\u5b83\u5c31\u6ca1\u6709\u5229\u7528\u4ef7\u503c\u4e86\uff0c\u6240\u4ee5\u5e94\u8be5\u4f7f\u7528\u961f\u5217\u5148\u8fdb\u5148\u51fa\u7684\u7279\u70b9 \u4f8b\u9898\uff1a \u300a\u8ff7\u5bab\u95ee\u9898\u300b \u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff1a 0 0 1 0 1 //0\u8868\u793a\u53ef\u8d70\uff0c1\u8868\u793a\u5899 0 1 1 1 0 //\u53ea\u80fd\u2191\u2193\u2190\u2192\u8d70\uff0c\u4e0d\u80fd\u659c\u7740\u8d70 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 //\u9898\u76ee\u4fdd\u8bc1\u4e86\u8f93\u5165\u662f\u4e00\u5b9a\u6709\u89e3\u7684 \u6c42\u4ece\u5de6\u4e0a\u89d2\uff08 0 \uff0c 0 \uff09\u5230\u53f3\u4e0b\u89d2\uff08 4 \uff0c 4 \uff09\u7684\u6700\u77ed\u8def\u7ebf\u3002 bfs\u89e3\u9898\u6838\u5fc3\u903b\u8f91\u4f2a\u4ee3\u7801 \uff1a 1 \uff0c\u5c06\u8d77\u70b9\u63a8\u5165\u961f\u5217\u4e2d\uff1b 2 \uff0c\u5c06\u8d77\u70b9\u6807\u8bc6\u4e3a\u5df2\u8d70\u8fc7\uff1b while \uff08\u961f\u5217\u975e\u7a7a\uff09 { 3 \uff0c\u53d6\u961f\u5217\u9996\u8282\u70b9 vt \uff0c\u5e76\u4ece\u961f\u5217\u4e2d\u5f39\u51fa\uff1b 4 \uff0c\u63a2\u7d22\u4e0a\u9762\u53d6\u51fa\u5f97\u8282\u70b9\u7684\u5468\u56f4\u662f\u5426\u6709\u6ca1\u8d70\u8fc7\u7684\u8282\u70b9 vf \uff0c\u5982\u679c\u6709\u5c06\u6240\u6709\u80fd\u8d70\u7684 vf\u7684parents\u6307\u5411vt \uff0c\u5e76\u5c06 vf\u52a0\u5165\u961f\u5217 \uff08\u5982\u679c vf\u7b49\u4e8e\u7ec8\u70b9 \uff0c\u8bf4\u660e\u63a2\u7d22\u5b8c\u6210\uff0c\u9000\u51fa\u5faa\u73af\uff09\u3002 } \u5982\u679c\u961f\u5217\u4e3a\u7a7a\u81ea\u7136\u8df3\u51fa\uff0c\u8bf4\u660e\u65e0\u8def\u53ef\u8fbe\u7ec8\u70b9\u3002 \u5b9e\u9645 c ++ \u5b9e\u73b0\uff1a #include <vector> #include <iostream> #include <string> #include <algorithm> #include <map> #include <queue> using namespace std ; struct Node //\u5b9a\u4e49\u7ed3\u6784\u4f53Node { int xx ; //\u81ea\u8eab\u5904\u4e8e\u7ec4\u5185\u7684\u4f4d\u7f6e int yy ; bool qiang ; //\u662f\u5426\u662f\u5899 bool walked ; //\u662f\u5426\u8d70\u8fc7 Node * parents ; //\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488 }; int main () { int id = 0 ; //int xx, yy; queue < Node *> bfs ; //\u521b\u5efaNode\u6307\u9488\u961f\u5217 vector < vector < Node >> migong ; //\u521b\u5efa\u4e8c\u7ef4\u8ff7\u5bab\u7ec4 for ( int i = 0 ; i < 5 ; i ++ ) { vector < Node > hang ; for ( int j = 0 ; j < 5 ; j ++ ) { int ii ; cin >> ii ; Node node { i , j , ii , false }; hang . push_back ( node ); } migong . push_back ( hang ); } //\u8f93\u5165\u5b8c\u6bd5 int ax [ 4 ] = { -1 , 1 , 0 , 0 }; int by [ 4 ] = { 0 , 0 , 1 , -1 }; bfs . push ( & migong [ 0 ][ 0 ]); //\u5148\u5c06\u8d77\u70b9\u63a8\u8fdb\u53bb migong [ 0 ][ 0 ]. walked = true ; Node * vt ; //\u7b49\u4e0b\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488 Node * vf ; //\u7b49\u4e0b\u6307\u5411\u7236\u8282\u70b9\u5f15\u7533\u51fa\u7684\u5b50\u8282\u70b9 while ( ! bfs . empty ()) { vt = bfs . front (); bfs . pop (); if (( * vt ). xx >= 1 ) { //\u67e5\u8be2\u5de6\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). xx + ax [ 0 ]][( * vt ). yy + by [ 0 ]]; if ( ! ( * vf ). qiang && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; //\u5b50\u8282\u70b9\u6307\u5411\u7236\u8282\u70b9 if (( * vf ). xx == 4 && ( * vf ). yy == 4 ) break ; //\u5982\u679c\u662f\u7ec8\u70b9\u8282\u70b9\uff0c\u7ed3\u675f\u5bfb\u627e\uff0c\u8df3\u51fa\u5faa\u73af\u3002 } } if (( * vt ). xx <= 3 ) { //\u67e5\u8be2\u53f3\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). xx + ax [ 1 ]][( * vt ). yy + by [ 1 ]]; if ( ! ( * vf ). qiang && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). xx == 4 && ( * vf ). yy == 4 ) break ; } } if (( * vt ). yy <= 3 ) { //\u67e5\u8be2\u4e0b\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). xx + ax [ 2 ]][( * vt ). yy + by [ 2 ]]; if ( ! ( * vf ). qiang && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). xx == 4 && ( * vf ). yy == 4 ) break ; } } if (( * vt ). yy >= 1 ) { //\u67e5\u8be2\u4e0a\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). xx + ax [ 3 ]][( * vt ). yy + by [ 3 ]]; if ( ! ( * vf ). qiang && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). xx == 4 && ( * vf ). yy == 4 ) break ; } } } //\u7ed3\u675f\u7b97\u6cd5\uff0c\u4ecevf\u6307\u5411\u7684\u8282\u70b9\u5f00\u59cb\u5bfb\u627e\u7236\u8282\u70b9\u3002 vector < Node *> fin ; while ( true ) { fin . push_back ( vf ); vf = ( * vf ). parents ; if (( * vf ). xx == 0 && ( * vf ). yy == 0 ) { fin . push_back ( vf ); break ; } } //\u8f93\u51fa for ( int i = fin . size () -1 ; i >= 0 ; i -- ) { cout << ( * fin [ i ]). xx << \",\" << ( * fin [ i ]). yy << endl ; } return 0 ; } \u8f93\u51fa\u793a\u4f8b\uff1a 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 , 0 1 , 0 2 , 0 2 , 1 2 , 2 2 , 3 2 , 4 3 , 4 4 , 4 dfs\u89e3\u9898\u6838\u5fc3\u903b\u8f91\u4f2a\u4ee3\u7801 \uff1a 1 \uff0c\u6808\u521d\u59cb\u5316 2 \uff0c\u83b7\u5f97\u8d77\u70b9\uff0c\u5c06\u8d77\u70b9\u6807\u8bc6\u4e3a\u5df2\u8d70\u8fc7\uff0c\u5c06\u8d77\u70b9\u5165\u6808 while \uff08\u6808\u975e\u7a7a\uff09 { \u53d6\u6808\u9876\u5143\u7d20 vt \u5982\u679c vt\u5468\u56f4\u6709\u4e3a\u8d70\u8fc7\u7684\u8282\u70b9vf \uff0c\u5219\uff1a \u5c06 vf\u6539\u4e3a\u5df2\u8d70 vf\u5165\u6808 \u6ca1\u6709\u80fd\u8d70\u7684\u8282\u70b9\uff0c vt\u51fa\u6808 } \u4ee3\u7801\uff1a #include <iostream> #include <vector> #include <list> #include <algorithm> #include <queue> #include <string> #include <stack> #include <time.h> #include <windows.h> #include <set> using namespace std ; struct Node { int x ; int y ; bool walked ; int g ; int f ; //f = g+h int h ; Node * parents ; }; int main () { vector < vector < Node >> migong ; //\u521b\u5efa\u4e8c\u7ef4\u8ff7\u5bab\u7ec4 for ( int i = 0 ; i < 5 ; i ++ ) { vector < Node > hang ; for ( int j = 0 ; j < 5 ; j ++ ) { int ii ; cin >> ii ; Node node { i , j , ii }; hang . push_back ( node ); } migong . push_back ( hang ); } /*-----------------------------------dfs----------------------------------------------*/ vector < vector < Node >> migong2 = migong ; stack < Node *> f ; f . push ( & migong2 [ 0 ][ 0 ]); migong2 [ 0 ][ 0 ]. walked = true ; while ( ! f . empty ()) { Node * vt = f . top (); bool can = true ; if ( vt -> x >= 1 ) { Node * vf = & migong2 [ vt -> x - 1 ][ vt -> y ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> x <= 3 ) { Node * vf = & migong2 [ vt -> x + 1 ][ vt -> y ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> y >= 1 ) { Node * vf = & migong2 [ vt -> x ][ vt -> y - 1 ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> y <= 3 ) { Node * vf = & migong2 [ vt -> x ][ vt -> y + 1 ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( can ) { f . pop (); } } vector < Node *> fin2 ; Node * bb = & migong2 [ 4 ][ 4 ]; while ( true ) { fin2 . push_back ( aa ); if ( bb == & migong2 [ 0 ][ 0 ]) { break ; } bb = bb -> parents ; } int count2 = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { cout << migong2 [ i ][ j ]. walked ; if ( migong2 [ i ][ j ]. walked ) count2 ++ ; } cout << endl ; } reverse ( fin2 . begin (), fin2 . end ()); for ( int i = 0 ; i < fin . size (); i ++ ) { cout << fin [ i ] -> x << \" \" << fin [ i ] -> y << endl ; } return 0 ; } \u8f93\u51fa\uff1a 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 11000 11111 11111 11111 00011 0 0 1 0 2 0 2 1 2 2 2 3 2 4 3 4 4 4 \u4e24\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u5bf9\u6bd4\u4ee5\u53ca\u8def\u5f84\u5206\u6790\uff1a #include <iostream> #include <vector> #include <list> #include <algorithm> #include <queue> #include <string> #include <stack> #include <time.h> #include <windows.h> #include <set> using namespace std ; struct Node { int x ; int y ; bool walked ; int g ; int f ; //f = g+h int h ; Node * parents ; }; int main () { int qiang = 0 ; vector < vector < Node >> migong ; //\u521b\u5efa\u4e8c\u7ef4\u8ff7\u5bab\u7ec4 for ( int i = 0 ; i < 5 ; i ++ ) { vector < Node > hang ; for ( int j = 0 ; j < 5 ; j ++ ) { int ii ; cin >> ii ; if ( ii ) qiang ++ ; Node node { i , j , ii }; hang . push_back ( node ); } migong . push_back ( hang ); } int a [ 10002 ]; int i = 0 ; double run_time ; _LARGE_INTEGER time_start ; //\u5f00\u59cb\u65f6\u95f4 _LARGE_INTEGER time_over ; //\u7ed3\u675f\u65f6\u95f4 double dqFreq ; //\u8ba1\u65f6\u5668\u9891\u7387 LARGE_INTEGER ff ; //\u8ba1\u65f6\u5668\u9891\u7387 QueryPerformanceFrequency ( & ff ); dqFreq = ( double ) ff . QuadPart ; QueryPerformanceCounter ( & time_start ); /*-----------------------------------dfs----------------------------------------------*/ vector < vector < Node >> migong2 = migong ; stack < Node *> f ; f . push ( & migong2 [ 0 ][ 0 ]); migong2 [ 0 ][ 0 ]. walked = true ; while ( ! f . empty ()) { Node * vt = f . top (); bool can = true ; if ( vt -> x >= 1 ) { Node * vf = & migong2 [ vt -> x - 1 ][ vt -> y ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> x <= 3 ) { Node * vf = & migong2 [ vt -> x + 1 ][ vt -> y ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> y >= 1 ) { Node * vf = & migong2 [ vt -> x ][ vt -> y - 1 ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( vt -> y <= 3 ) { Node * vf = & migong2 [ vt -> x ][ vt -> y + 1 ]; if ( vf -> walked == false ) { vf -> parents = vt ; vf -> walked = true ; if ( vf == & migong2 [ 4 ][ 4 ]) { break ; } f . push ( vf ); can = false ; } } if ( can ) { f . pop (); } } QueryPerformanceCounter ( & time_over ); //\u8ba1\u65f6\u7ed3\u675f run_time = 1000000 * ( time_over . QuadPart - time_start . QuadPart ) / dqFreq ; float time1 = run_time ; QueryPerformanceFrequency ( & ff ); dqFreq = ( double ) ff . QuadPart ; QueryPerformanceCounter ( & time_start ); /*-----------------------------------bfs----------------------------------------------*/ int ax [ 4 ] = { -1 , 1 , 0 , 0 }; int by [ 4 ] = { 0 , 0 , 1 , -1 }; queue < Node *> bfs ; bfs . push ( & migong [ 0 ][ 0 ]); //\u5148\u5c06\u8d77\u70b9\u63a8\u8fdb\u53bb migong [ 0 ][ 0 ]. walked = true ; Node * vt ; //\u7b49\u4e0b\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488 Node * vf ; //\u7b49\u4e0b\u6307\u5411\u7236\u8282\u70b9\u5f15\u7533\u51fa\u7684\u5b50\u8282\u70b9 while ( ! bfs . empty ()) { vt = bfs . front (); bfs . pop (); if (( * vt ). x >= 1 ) { //\u67e5\u8be2\u5de6\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). x + ax [ 0 ]][( * vt ). y + by [ 0 ]]; if ( ! ( * vf ). walked && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; //\u5b50\u8282\u70b9\u6307\u5411\u7236\u8282\u70b9 if (( * vf ). x == 4 && ( * vf ). y == 4 ) break ; //\u5982\u679c\u662f\u7ec8\u70b9\u8282\u70b9\uff0c\u7ed3\u675f\u5bfb\u627e\uff0c\u8df3\u51fa\u5faa\u73af\u3002 } } if (( * vt ). x <= 3 ) { //\u67e5\u8be2\u53f3\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). x + ax [ 1 ]][( * vt ). y + by [ 1 ]]; if ( ! ( * vf ). walked && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). x == 4 && ( * vf ). y == 4 ) break ; } } if (( * vt ). y <= 3 ) { //\u67e5\u8be2\u4e0b\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). x + ax [ 2 ]][( * vt ). y + by [ 2 ]]; if ( ! ( * vf ). walked && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). x == 4 && ( * vf ). y == 4 ) break ; } } if (( * vt ). y >= 1 ) { //\u67e5\u8be2\u4e0a\u8282\u70b9\u662f\u5426\u53ef\u4ee5 vf = & migong [( * vt ). x + ax [ 3 ]][( * vt ). y + by [ 3 ]]; if ( ! ( * vf ). walked && ! ( * vf ). walked ) { bfs . push ( vf ); ( * vf ). walked = true ; ( * vf ). parents = vt ; if (( * vf ). x == 4 && ( * vf ). y == 4 ) break ; } } } QueryPerformanceCounter ( & time_over ); //\u8ba1\u65f6\u7ed3\u675f run_time = 1000000 * ( time_over . QuadPart - time_start . QuadPart ) / dqFreq ; float time2 = run_time ; /*-----------------------------------A*----------------------------------------------*/ vector < vector < Node >> migong3 = migong ; set < Node *> openNode ; set < Node *> closeNode ; openNode . insert ( & migong3 [ 0 ][ 0 ]); /*-----------------------------------\u7ed3\u675f----------------------------------------------*/ vector < Node *> fin ; Node * aa = & migong [ 4 ][ 4 ]; while ( true ) { fin . push_back ( aa ); if ( aa == & migong [ 0 ][ 0 ]) { break ; } aa = aa -> parents ; } vector < Node *> fin2 ; Node * bb = & migong2 [ 4 ][ 4 ]; while ( true ) { fin2 . push_back ( bb ); if ( bb == & migong2 [ 0 ][ 0 ]) { break ; } bb = bb -> parents ; } cout << \"bfs\u8fd0\u884c\u540e\u77e9\u9635\" << endl ; int count = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { cout << migong [ i ][ j ]. walked ; if ( migong [ i ][ j ]. walked ) count ++ ; } cout << endl ; } reverse ( fin . begin (), fin . end ()); cout << \"dfs\u8fd0\u884c\u540e\u77e9\u9635\" << endl ; int count2 = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { cout << migong2 [ i ][ j ]. walked ; if ( migong2 [ i ][ j ]. walked ) count2 ++ ; } cout << endl ; } reverse ( fin2 . begin (), fin2 . end ()); for ( int i = 0 ; i < fin . size (); i ++ ) { cout << fin [ i ] -> x << \" \" << fin [ i ] -> y << endl ; } cout << \"Totle Time of dfs : \" << time1 << \"s\" << endl ; cout << \"Totle Time of bfs: \" << time2 << \"s\" << endl ; cout << \"bfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570\uff1a\" << count - qiang << endl ; cout << \"dfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570\uff1a\" << count2 - qiang << endl ; return 0 ; //https://blog.csdn.net/u012878643/article/details/46723375 } \u8f93\u51fa\u793a\u4f8b 1 \uff1a 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 bfs\u8fd0\u884c\u540e\u77e9\u9635 11001 11111 11111 11111 11111 dfs\u8fd0\u884c\u540e\u77e9\u9635 11000 11111 11111 11111 00011 bfs\u8def\u5f84 0 0 1 0 2 0 2 1 2 2 2 3 2 4 3 4 4 4 dfs\u8def\u5f84 0 0 1 0 2 0 2 1 2 2 2 3 2 4 3 4 4 4 Totle Time of dfs : 65.5013 s Totle Time of bfs : 67.3427 s bfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 15 dfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 11 \u8f93\u51fa\u793a\u4f8b 2 \uff1a 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 bfs\u8fd0\u884c\u540e\u77e9\u9635 11111 11111 11111 11111 11111 dfs\u8fd0\u884c\u540e\u77e9\u9635 11111 11111 11111 11111 11111 bfs\u8def\u5f84 0 0 1 0 2 0 3 0 4 0 4 1 4 2 4 3 4 4 dfs\u8def\u5f84 0 0 0 1 0 2 0 3 0 4 1 4 2 4 2 3 2 2 2 1 2 0 3 0 4 0 4 1 4 2 4 3 4 4 Totle Time of dfs : 133.107 s Totle Time of bfs : 131.792 s bfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 25 dfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 25 \u8f93\u51fa\u793a\u4f8b 3 \uff1a 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 bfs\u8fd0\u884c\u540e\u77e9\u9635 11111 11111 11111 11111 11111 dfs\u8fd0\u884c\u540e\u77e9\u9635 11111 11111 11111 11111 11111 bfs\u8def\u5f84 0 0 1 0 2 0 3 0 4 0 4 1 4 2 4 3 4 4 dfs\u8def\u5f84 0 0 0 1 0 2 0 3 0 4 1 4 2 4 2 3 2 2 2 1 2 0 3 0 4 0 4 1 4 2 4 3 4 4 Totle Time of dfs : 120.217 s Totle Time of bfs : 99.1726 s bfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 19 dfs\u5171\u641c\u7d22\u8fc7\u7684\u8282\u70b9\u6570 \uff1a 19","title":"BFS\u7b97\u6cd5"},{"location":"algorithm/graph/dijkstra_shortest_path/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus \u95ee\u9898\u89e3\u91ca\uff1a \u4ece\u56fe\u4e2d\u7684\u67d0\u4e2a\u9876\u70b9\u51fa\u53d1\u5230\u8fbe\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\u7684\u6240\u7ecf\u8fc7\u7684\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5c0f\u7684\u4e00\u6761\u8def\u5f84\uff0c\u79f0\u4e3a\u6700\u77ed\u8def\u5f84 \u7b97\u6cd5\u7279\u70b9\uff1a \u8fea\u79d1\u65af\u5f7b\u7b97\u6cd5\u4f7f\u7528\u4e86\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u89e3\u51b3\u8d4b\u6743\u6709\u5411\u56fe\u6216\u8005\u65e0\u5411\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u7b97\u6cd5\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\u6811\u3002\u8be5\u7b97\u6cd5\u5e38\u7528\u4e8e\u8def\u7531\u7b97\u6cd5\u6216\u8005\u4f5c\u4e3a\u5176\u4ed6\u56fe\u7b97\u6cd5\u7684\u4e00\u4e2a\u5b50\u6a21\u5757\u3002 \u7b97\u6cd5\u7684\u601d\u8def Dijkstra\u7b97\u6cd5\u91c7\u7528\u7684\u662f\u4e00\u79cd\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4dis\u6765\u4fdd\u5b58\u6e90\u70b9\u5230\u5404\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u548c\u4e00\u4e2a\u4fdd\u5b58\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u7684\u96c6\u5408\uff1aT\uff0c\u521d\u59cb\u65f6\uff0c\u539f\u70b9 s \u7684\u8def\u5f84\u6743\u91cd\u88ab\u8d4b\u4e3a 0 \uff08dis[s] = 0\uff09\u3002\u82e5\u5bf9\u4e8e\u9876\u70b9 s \u5b58\u5728\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u8fb9\uff08s,m\uff09\uff0c\u5219\u628adis[m]\u8bbe\u4e3aw\uff08s, m\uff09,\u540c\u65f6\u628a\u6240\u6709\u5176\u4ed6\uff08s\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\uff09\u9876\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u8bbe\u4e3a\u65e0\u7a77\u5927\u3002\u521d\u59cb\u65f6\uff0c\u96c6\u5408T\u53ea\u6709\u9876\u70b9s\u3002 \u7136\u540e\uff0c\u4ecedis\u6570\u7ec4\u9009\u62e9\u6700\u5c0f\u503c\uff0c\u5219\u8be5\u503c\u5c31\u662f\u6e90\u70b9s\u5230\u8be5\u503c\u5bf9\u5e94\u7684\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u628a\u8be5\u70b9\u52a0\u5165\u5230T\u4e2d\uff0cOK\uff0c\u6b64\u65f6\u5b8c\u6210\u4e00\u4e2a\u9876\u70b9\uff0c \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u770b\u770b\u65b0\u52a0\u5165\u7684\u9876\u70b9\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u9876\u70b9\u5e76\u4e14\u770b\u770b\u901a\u8fc7\u8be5\u9876\u70b9\u5230\u8fbe\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u662f\u5426\u6bd4\u6e90\u70b9\u76f4\u63a5\u5230\u8fbe\u77ed\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5c31\u66ff\u6362\u8fd9\u4e9b\u9876\u70b9\u5728dis\u4e2d\u7684\u503c\u3002 \u7136\u540e\uff0c\u53c8\u4ecedis\u4e2d\u627e\u51fa\u6700\u5c0f\u503c\uff0c\u91cd\u590d\u4e0a\u8ff0\u52a8\u4f5c\uff0c\u76f4\u5230T\u4e2d\u5305\u542b\u4e86\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002","title":"cosmos"},{"location":"algorithm/graph/dijkstra_shortest_path/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus \u95ee\u9898\u89e3\u91ca\uff1a \u4ece\u56fe\u4e2d\u7684\u67d0\u4e2a\u9876\u70b9\u51fa\u53d1\u5230\u8fbe\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\u7684\u6240\u7ecf\u8fc7\u7684\u8fb9\u7684\u6743\u91cd\u548c\u6700\u5c0f\u7684\u4e00\u6761\u8def\u5f84\uff0c\u79f0\u4e3a\u6700\u77ed\u8def\u5f84 \u7b97\u6cd5\u7279\u70b9\uff1a \u8fea\u79d1\u65af\u5f7b\u7b97\u6cd5\u4f7f\u7528\u4e86\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u89e3\u51b3\u8d4b\u6743\u6709\u5411\u56fe\u6216\u8005\u65e0\u5411\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u7b97\u6cd5\u6700\u7ec8\u5f97\u5230\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\u6811\u3002\u8be5\u7b97\u6cd5\u5e38\u7528\u4e8e\u8def\u7531\u7b97\u6cd5\u6216\u8005\u4f5c\u4e3a\u5176\u4ed6\u56fe\u7b97\u6cd5\u7684\u4e00\u4e2a\u5b50\u6a21\u5757\u3002 \u7b97\u6cd5\u7684\u601d\u8def Dijkstra\u7b97\u6cd5\u91c7\u7528\u7684\u662f\u4e00\u79cd\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4dis\u6765\u4fdd\u5b58\u6e90\u70b9\u5230\u5404\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u548c\u4e00\u4e2a\u4fdd\u5b58\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u7684\u96c6\u5408\uff1aT\uff0c\u521d\u59cb\u65f6\uff0c\u539f\u70b9 s \u7684\u8def\u5f84\u6743\u91cd\u88ab\u8d4b\u4e3a 0 \uff08dis[s] = 0\uff09\u3002\u82e5\u5bf9\u4e8e\u9876\u70b9 s \u5b58\u5728\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u8fb9\uff08s,m\uff09\uff0c\u5219\u628adis[m]\u8bbe\u4e3aw\uff08s, m\uff09,\u540c\u65f6\u628a\u6240\u6709\u5176\u4ed6\uff08s\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\uff09\u9876\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u8bbe\u4e3a\u65e0\u7a77\u5927\u3002\u521d\u59cb\u65f6\uff0c\u96c6\u5408T\u53ea\u6709\u9876\u70b9s\u3002 \u7136\u540e\uff0c\u4ecedis\u6570\u7ec4\u9009\u62e9\u6700\u5c0f\u503c\uff0c\u5219\u8be5\u503c\u5c31\u662f\u6e90\u70b9s\u5230\u8be5\u503c\u5bf9\u5e94\u7684\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u628a\u8be5\u70b9\u52a0\u5165\u5230T\u4e2d\uff0cOK\uff0c\u6b64\u65f6\u5b8c\u6210\u4e00\u4e2a\u9876\u70b9\uff0c \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u770b\u770b\u65b0\u52a0\u5165\u7684\u9876\u70b9\u662f\u5426\u53ef\u4ee5\u5230\u8fbe\u5176\u4ed6\u9876\u70b9\u5e76\u4e14\u770b\u770b\u901a\u8fc7\u8be5\u9876\u70b9\u5230\u8fbe\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u957f\u5ea6\u662f\u5426\u6bd4\u6e90\u70b9\u76f4\u63a5\u5230\u8fbe\u77ed\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5c31\u66ff\u6362\u8fd9\u4e9b\u9876\u70b9\u5728dis\u4e2d\u7684\u503c\u3002 \u7136\u540e\uff0c\u53c8\u4ecedis\u4e2d\u627e\u51fa\u6700\u5c0f\u503c\uff0c\u91cd\u590d\u4e0a\u8ff0\u52a8\u4f5c\uff0c\u76f4\u5230T\u4e2d\u5305\u542b\u4e86\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002","title":"cosmos"},{"location":"algorithm/graph/dijkstra_shortest_path/%E5%9B%BE%E8%AE%BA%281%29dijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%281%29/","text":"Dijkstra \u7b97\u6cd5 \uff0c\u662f\u7531\u8377\u5170\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Edsger Wybe Dijkstra \u57281956\u5e74\u53d1\u73b0\u7684\u7b97\u6cd5\uff0c\u6234\u514b\u65af\u7279\u62c9\u7b97\u6cd5\u4f7f\u7528\u7c7b\u4f3c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u65b9\u6cd5\u89e3\u51b3**\u8d4b\u6743\u56fe\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u95ee\u9898**\u3002Dijkstra \u7b97\u6cd5\u539f\u59cb\u7248\u672c\u4ec5\u9002\u7528\u4e8e\u627e\u5230\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u540e\u6765\u66f4\u5e38\u89c1\u7684\u53d8\u4f53\u56fa\u5b9a\u4e86\u4e00\u4e2a\u9876\u70b9\u4f5c\u4e3a\u6e90\u7ed3\u70b9\u7136\u540e\u627e\u5230\u8be5\u9876\u70b9\u5230\u56fe\u4e2d\u6240\u6709\u5176\u5b83\u7ed3\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4ea7\u751f\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\u6811\u3002\u672c\u7b97\u6cd5\u6bcf\u6b21\u53d6\u51fa\u672a\u8bbf\u95ee\u7ed3\u70b9\u4e2d\u8ddd\u79bb\u6700\u5c0f\u7684\uff0c\u7528\u8be5\u7ed3\u70b9\u66f4\u65b0\u5176\u4ed6\u7ed3\u70b9\u7684\u8ddd\u79bb\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7edd\u5927\u591a\u6570\u7684Dijkstra \u7b97\u6cd5\u4e0d\u80fd\u6709\u6548\u5904\u7406\u5e26\u6709**\u8d1f\u6743\u8fb9**\u7684\u56fe\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u4ece\u4e00\u4e2a\u8d4b\u6743\u7684\u6709\u5411\u56fe\u4e3a\u4f8b\u5f00\u59cb\u89e3\u91caDijkstra \u7b97\u6cd5\u3002 \u8bbe\u4e00\u4e2a\u8d4b\u6743\u6709\u5411\u56fe \u3002\u5176\u4e2d\u7684\u6bcf\u6761\u8fb9 \u7684\u6743\u503c\u4e3a\u4e00\u4e2a\u975e\u8d1f\u7684\u5b9e\u6570 \uff0c \u8be5\u6743\u503c\u8868\u793a\u4ece\u9876\u70b9 \u5230\u9876\u70b9 \u7684\u8ddd\u79bb \u3002\u5e76\u8bbe\u4e00\u5355\u6e90\u70b9 \u3002\u73b0\u5728\u6211\u4eec\u7684\u4efb\u52a1\u662f\uff1a\u627e\u51fa\u4ece\u6e90\u70b9 \u51fa\u53d1\uff0c\u5230 \u4e2d\u6240\u6709\u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a \u56fe\u72471\uff1a\u4f8b\u56fe\u3002 \u8fd9\u662f\u4e00\u4e2a\u5177\u6709 \u4e2a\u9876\u70b9\u7684\u8d4b\u6743\u6709\u5411\u56fe\uff0c\u5176\u9876\u70b9\u96c6\u5408\u4e3a \uff0c\u5176\u6743\u503c\u5206\u522b\u4e3a\uff1a \u73b0\u5728\u6211\u4eec\u9009\u5b9a \u4e3a\u539f\u70b9 \uff1a \u56fe\u72472\uff1a\u9009\u62e9v_1\u4f5c\u4e3a\u539f\u70b9s\u3002 \u5219\u4ece\u6e90\u70b9 \u51fa\u53d1\uff0c\u5230 \u4e2d\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5206\u522b\u4e3a\uff1a \u56fe\u72473\uff1aV\u4e2d\u7684\u6e90\u70b9s(v_1)\u5230V\u4e2d\u5176\u4f59\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002 \u5373\uff1a \u5176\u4e2d\uff0c \u8868\u793a\u4ece\u6e90\u70b9 \u51fa\u53d1\uff0c\u5230 \u4e2d\u7684\u9876\u70b9 \u7684\u6700\u77ed\u8def\u5f84\u3002 \u6ce8\uff1a \u6700\u77ed\u8def\u5f84\u53ef\u4ee5\u7406\u89e3\u4e3a\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\u4e2d\u603b\u6743\u548c\u6700\u5c0f\u7684\u90a3\u4e00\u6761\u8def\u5f84 \u3002\u4e3e\u4e00\u4e2a\u518d\u7b80\u5355\u4e0d\u8fc7\u7684\u4f8b\u5b50\uff1a\u4f60\u5f00\u8f66\u4ece\u57ce\u5e02 \u5230\u57ce\u5e02 \uff0c\u5047\u8bbe\u6709\u5f88\u591a\u6761\u8def\u53ef\u4ee5\u8d70\uff0c\u6700\u77ed\u7684\u90a3\u6761\u8def\u5c31\u662f\u6700\u77ed\u8def\u5f84\uff0c\u603b\u6743\u548c\u53ef\u4ee5\u7406\u89e3\u4e3a\u603b\u7684\u516c\u91cc\u6570\u3002 \u4ee5\u4e0a\u662f\u6211\u4eec\u901a\u8fc7\u89c2\u5bdf\u548c\u8ba1\u7b97\u6bd4\u5bf9\u51fa\u6765\u7684\u6700\u77ed\u8def\u5f84\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u6765\u770b\u770bDijkstra \u7b97\u6cd5\u662f\u5982\u4f55\u5e2e\u52a9\u6211\u4eec\u627e\u5230\u8fd9\u4e9b\u6240\u6709\u7684\u6700\u77ed\u8def\u5f84\u7684\u3002 \u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6709\u51e0\u4e2a\u6982\u5ff5\u9700\u8981\u660e\u786e\u4e00\u4e0b\u3002 \u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408 \uff0c\u5982\u679c\u96c6\u5408 \u4e2d\u7684\u67d0\u4e2a\u9876\u70b9 \u5728\u96c6\u5408 \u4e2d\u4e86\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u4ece\u6e90\u70b9 \u5230\u9876\u70b9 \u7684\u6700\u77ed\u8def\u5f84\u5df2\u7ecf\u88ab\u627e\u5230\uff0c\u800c\u5728\u7b97\u6cd5\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u96c6\u5408 \u4e2d\u53ea\u6709\u6e90\u70b9 \u3002\u5373\uff1a \u800c\u4e14\uff0c\u5f53\u4e14\u4ec5\u5f53 \u7684\u65f6\u5019\u7b97\u6cd5\u6267\u884c\u5b8c\u6bd5\u3002\u6b64\u65f6\u9876\u70b9\u96c6 \u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u88ab\u653e\u8fdb\u4e86\u96c6\u5408 \u79cd\uff0c\u4e5f\u5c31\u662f\u8bf4\u9664\u4e86\u6e90\u70b9\u4ee5\u5916\u7684\u6240\u6709\u4ece\u6e90\u70b9\u51fa\u53d1\u5230\u5176\u4f59\u6240\u6709\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5df2\u88ab\u627e\u5230\u3002 \u6ce8\uff1a\u5f53\u7136\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u6e90\u70b9\u5230\u81ea\u5df1\u672c\u8eab\u7684\u6700\u77ed\u8def\u5f84\u4e5f\u88ab\u627e\u5230\u4e86\u3002\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a**\u65e0\u81ea\u73af\u7684**\u6e90\u70b9\uff0c\u5b83\u5230\u81ea\u5df1\u672c\u8eab\u7684\u6700\u77ed\u8def\u5f84\u90fd\u662f \u3002 \u4e0b\u9762\u8fd9\u4e2a\u6982\u5ff5\u53ef\u80fd\u7a0d\u5fae\u6709\u4e9b\u62bd\u8c61\uff0c\u4e0d\u8fc7\u6ca1\u6709\u5173\u7cfb\uff0c\u8fd9\u91cc\u7406\u89e3\u4e0d\u4e86\u7684\u8bdd\u6211\u4eec\u4e00\u4f1a\u8bb2\u4f8b\u5b50\u7684\u65f6\u5019\u4f1a\u8fdb\u884c\u5177\u4f53\u8bf4\u660e\u3002\u8fd9\u4e2a\u6982\u5ff5\u53eb\u505a**\u4ece\u6e90\u70b9 \u5230\u9876\u70b9 ** \uff08\u4e00\u5f00\u59cb \uff09 \u7684\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84 \u3002 \u5373\u4ece\u6e90\u70b9 \u5230\u9876\u70b9 \u7684\u8def\u5f84**\u4e2d\u95f4**\u53ea\u80fd\u7ecf\u8fc7\u5df2\u7ecf\u5305\u542b\u5728\u96c6\u5408 \u4e2d\u7684\u9876\u70b9\uff0c\u800c\u4e0d\u80fd\u7ecf\u8fc7\u5176\u4f59\u7684\u8fd8\u672a\u5728\u96c6\u5408 \u4e2d\u7684\u9876\u70b9\u3002\u800c\u8fd9\u4e2a\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u6211\u4eec\u8bb0\u4f5c\uff1a \u800c\u6211\u4eec\u4e4b\u524d\u7684 \u8868\u793a\u7684\u662f**\u5168\u5c40\u7684**\u4ece\u6e90\u70b9 \u5230\u9876\u70b9 \u7684\u6700\u77ed\u8def\u5f84\uff0c\u8fd9\u4e2a\u6700\u77ed\u8def\u5f84\u6ca1\u6709\u9650\u5236\u201c\u5fc5\u987b\u5728\u8def\u5f84\u4e2d\u95f4\u53ea\u80fd\u7ecf\u8fc7\u5df2\u7ecf\u5305\u542b\u5728\u96c6\u5408 \u4e2d\u7684\u9876\u70b9\u201d\uff0c\u8fd9\u4e2a\u5168\u5c40\u7684\u6700\u77ed\u8def\u5f84\u624d\u662f\u6211\u4eec\u8981\u7684\u6700\u7ec8\u89e3\u3002\u6240\u4ee5\uff0c\u4e00\u822c\u6709\u5173\u7cfb\uff1a \u800c\u6211\u4eec\u7684Dijkstra \u7b97\u6cd5\u8981\u505a\u7684\u5c31\u662f\u901a\u8fc7\u4e0d\u65ad\u8ba1\u7b97 \u8fdb\u800c\u4e0d\u65ad\u7684\u6269\u5145\u96c6\u5408 \uff0c\u5f53\u96c6\u5408 \u4e0d\u65ad\u88ab\u6269\u5145\u7684\u65f6\u5019\uff0c\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u4f1a\u8d8a\u6765\u8d8a\u77ed\uff0c\u76f4\u5230 \u5165\u96c6\u5408 \u4e4b\u65f6\uff0c\u6b64\u65f6\u6211\u4eec\u4fbf\u5f97\u5230\u4e86 \uff0c\u4e14\u6b64\u65f6\u6709 \u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u770b\u7b97\u6cd5\u7684\u8bbe\u8ba1\u601d\u60f3\uff1a \u8f93\u5165 \uff1a\u8d4b\u6743\u6709\u5411\u56fe \u3002 \u8f93\u51fa \uff1a\u4ece\u6e90\u70b9 \u5230\u6240\u6709\u7684 \u7684\u6700\u77ed\u8def\u5f84\u3002 \u521d\u59cb \uff1b \u5bf9\u4e8e \uff0c\u8ba1\u7b97 \uff1b \u9009\u62e9 \uff0c\u5e76\u5c06\u8fd9\u4e2a \u653e\u8fdb\u96c6\u5408 \u4e2d\uff0c\u66f4\u65b0 \u4e2d\u7684\u9876\u70b9\u7684 \u503c\uff1b \u91cd\u590d \uff0c\u76f4\u5230 \u3002 \u7136\u540e\u662fDijkstra \u7b97\u6cd5\u7684\u4f2a\u7801\uff1a \u4e0b\u9762\u6211\u4eec\u6765\u89e3\u91ca\u4e00\u4e0b\u8fd9\u4e2a\u4f2a\u7801\uff1a \u7b97\u6cd5\u521d\u59cb\uff0c\u5c06\u9009\u62e9\u7684\u6e90\u70b9 \u653e\u8fdb\u96c6\u5408 \u4e2d\uff1b \u65e0\u81ea\u73af\u7684\u6e90\u70b9 \u5230\u81ea\u5df1\u7684\u6700\u77ed\u8def\u5f84\u4e3a \uff1b \u5f53\u9876\u70b9 \u4e0d\u5728\u96c6\u5408 \u4e2d\u65f6\uff08\u6b64\u65f6\u96c6\u5408 \u4e2d\u4ecd\u53ea\u6709\u6e90\u70b9 \uff09\uff0c\u5f00\u59cb\u8fdb\u5165\u5faa\u73af\uff1b \u5c06\u6e90\u70b9 \u4e0e\u70b9 \u4e4b\u95f4\u7684\u6743\u503c\u8d4b\u7ed9 \u3002\u7531\u4e8e\u662f\u6709\u5411\u56fe\uff0c\u6240\u4ee5\u5f53\u6e90\u70b9 \u4e0d\u6307\u5411\u4efb\u4f55\u5176\u4ed6\u96c6\u5408 \u5916\u7684\u9876\u70b9\u65f6\uff0c \u3002\u53ef\u4ee5\u7406\u89e3\u4e3a**\u6b64\u65f6**\u4ece\u6e90\u70b9 \u51fa\u53d1\uff0c**\u6682\u65f6**\u662f\u8fbe\u5230\u4e0d\u4e86 \u7684\u3002\u4e0d\u8fc7\u540e\u6765\u968f\u7740\u96c6\u5408 \u7684\u6269\u5145\uff0c\u4ece\u6e90\u70b9 \u51fa\u53d1\u4e00\u5b9a\u80fd\u5230\u8fbe\u6240\u6709\u7684\u9876\u70b9\u3002\u4e00\u4f1a\u6211\u4eec\u8bb2\u89e3\u4f8b\u5b50\u65f6\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002\u6b64\u65f6\u7b2c\u4e00\u4e2a \u5faa\u73af\u7ed3\u675f\u3002 \u5982\u679c\u96c6\u5408 \u4e0d\u662f\u7a7a\u96c6\uff0c\u5219\u8fdb\u5165\u5faa\u73af\uff1b \u9009\u51fa\u7ecf\u8fc7\u7b2c\u4e00\u4e2a \u5faa\u73af\u4e4b\u540e\u7684\uff0c\u5728\u96c6\u5408 \u4e2d\u7684\uff0c\u4e14\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u4e2d\u8ddd\u79bb\u6700\u77ed\u7684\u90a3\u4e2a\u9876\u70b9 ; \u5c06\u8fd9\u4e2a\u9876\u70b9 \u5e76\u5165\u96c6\u5408 \uff0c\u4ece\u800c\u8fbe\u5230\u6269\u5145\u96c6\u5408 \u7684\u76ee\u7684\uff1b \u5c06\u9876\u70b9 \u5e76\u5165\u96c6\u5408 \u4e4b\u540e\u53ef\u80fd\u4f1a\u5bf9\u5176\u4ed6\u9876\u70b9\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u4f1a\u6709\u5f71\u54cd\uff0c\u6240\u4ee5\u8fdb\u5165\u5185 \u5faa\u73af\u5bf9\u6709\u5f71\u54cd\u7684\u8fdb\u884c\u66f4\u65b0\uff1b \u5373\u5982\u679c\u4ece\u6e90\u70b9 \u5230\u6211\u4eec\u5728\u7b2c \u6b65\u9009\u51fa\u7684\u9876\u70b9 \u7684\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u518d\u52a0\u4e0a\u9876\u70b9 \u5230\u9876\u70b9 \u4e4b\u95f4\u7684\u8ddd\u79bb \u8fd8\u8981\u5c0f\u4e8e\u6e90\u70b9 \u5230\u9876\u70b9 \u7684\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u8fd8\u8981\u77ed\u7684\u8bdd\uff1b \u5219\u5c06\u6e90\u70b9 \u5230\u9876\u70b9 \u7684\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u66f4\u65b0\u6210\u6e90\u70b9 \u5230\u6211\u4eec\u5728\u7b2c \u6b65\u9009\u51fa\u7684\u9876\u70b9 \u7684\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u518d\u52a0\u4e0a\u9876\u70b9 \u5230\u9876\u70b9 \u4e4b\u95f4\u7684\u6743\u503c \u3002 \u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u8bb2\u4f8b\u5b50\uff0c\u6211\u4eec\u8fd8\u662f\u4ee5\u56fe\u72471\u4e2d\u7684\u8d4b\u6743\u6709\u5411\u56fe\u8fdb\u884c\u8bf4\u660e\u3002 \u56fe\u72474 \u9996\u5148\u6211\u4eec\u8fd8\u662f\u9009\u62e9 \u4e3a\u539f\u70b9 \uff0c\u90a3\u4e48\u5728\u7b97\u6cd5\u7684\u5f00\u59cb\uff0c \u3002\u4e4b\u540e\u6211\u4eec\u8ba1\u7b97\u9664\u4e86 \u4ee5\u5916\u7684\u5176\u4f59\u9876\u70b9\u5230 \u7684\u8ddd\u79bb \uff0c\u5373\u5bfb\u627e\u6240\u6709\u7684\u9664\u4e86 \u4ee5\u5916\u7684\u6240\u6709\u9876\u70b9\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\uff0c\u5373\u4ece \u51fa\u53d1\uff0c\u5230\u8fbe\u6240\u6709\u9876\u70b9\u4e14\u53ea\u5141\u8bb8\u901a\u8fc7\u9876\u70b9 \uff08\u56e0\u4e3a\u6b64\u65f6\u96c6\u5408 \u4e2d\u53ea\u6709 \u8fd9\u4e00\u4e2a\u5143\u7d20\uff09\u7684\u6700\u77ed\u8def\u5f84\u3002\u8fd9\u662f\u6211\u4eec\u7684\u7b97\u6cd5\u4e2d\u7684\u7b2c\u4e00\u4e2a \u5faa\u73af\u5728\u505a\u7684\u4e8b\u60c5\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53d1\u73b0\u60f3\u8981**\u53ea\u901a\u8fc7**\u9876\u70b9 \u800c\u5230\u8fbe\u9876\u70b9 \u90fd\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6709\uff1a \u800c \u5c31\u662f\u7b97\u6cd5\u4e2d\u6240\u8bf4\u7684\u6682\u65f6\u5230\u8fbe\u4e0d\u4e86\u7684\u9876\u70b9\u4e86\u3002\u73b0\u5728\u7b97\u6cd5\u7684\u524d\u56db\u6b65\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u73b0\u5728\u5f00\u59cb\u7b2c\u4e94\u6b65\u68c0\u9a8c\u96c6\u5408 \u662f\u5426\u662f\u7a7a\u96c6\uff0c\u8fd9\u91cc\u663e\u7136\u4e0d\u662f\uff0c\u8fd9\u91cc\uff1a \u73b0\u5728\u8fdb\u884c\u7b2c\u516d\u6b65\u3002\u7b2c\u516d\u6b65\u662f\u9009\u51fa\u7ecf\u8fc7\u7b2c\u4e00\u4e2a \u5faa\u73af\u4e4b\u540e\u7684\uff0c\u5728\u96c6\u5408 \u4e2d\u7684\uff0c\u4e14\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u4e2d\u8ddd\u79bb\u6700\u77ed\u7684\u90a3\u4e2a\u9876\u70b9 \u3002\u90a3\u6211\u4eec\u770b\u770b\u5728\u5f0f \u4e2d\u90a3\u4e2a\u9876\u70b9\u8ddd\u79bb\u6e90\u70b9 \u6700\u77ed\u5c31\u597d\u4e86\uff0c\u663e\u7136\u662f \uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u8fd9\u91cc\u9009\u62e9\u7684 \u3002 \u90a3\u4e48\u7b2c\u4e03\u6b65\u5c31\u662f\u5c06 \u653e\u8fdb\u96c6\u5408 \u4e2d\u4e86\u3002\u6b64\u65f6\u96c6\u5408 \u3002\u8fd9\u5c31\u662f\u8bf4\u660e\u4ece\u6e90\u70b9 \u51fa\u53d1\uff0c\u5230\u9876\u70b9 \u7684\u6700\u77ed\u8def\u5f84\u5df2\u7ecf\u88ab\u627e\u5230\u4e86\u3002 \u4e0b\u9762\u6211\u7528\u7eff\u8272\u8868\u793a\u88ab\u653e\u5165\u96c6\u5408 \u4e2d\u7684\u9876\u70b9\uff1a \u56fe\u72475\uff1a\u9876\u70b9v_6\u88ab\u52a0\u8fdb\u96c6\u5408S\u4e2d\u3002 \u7684\u989c\u8272\u6211\u5c31\u4e0d\u53d8\u4e86\uff0c\u56e0\u4e3a\u5b83\u4e00\u76f4\u90fd\u5728\u96c6\u5408 \u4e2d\u3002\u6b64\u65f6\uff1a \u8fd9\u5c31\u8bf4\u660e\u4e0b\u6b21\u5728\u627e\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u7684\u65f6\u5019 \u4e2d\u5c31\u6709\u4e24\u4e2a\u70b9\u53ef\u4ee5\u88ab\u901a\u8fc7\u4e86\uff0c\u8fd9\u6837\u4e5f\u8bb8\u5c31\u4f1a\u4f7f\u5f97\u4e00\u4e9b\u539f\u6765\u5230\u8fbe\u4e0d\u4e86\u7684\u9876\u70b9\u7531\u4e8e\u53ef\u4ee5\u591a\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u800c\u5230\u8fbe\uff0c\u8fd9\u4e5f\u5c31\u662f\u7b97\u6cd5\u4e2d\u6240\u8bf4\u7684\u5f53\u6211\u5c06\u4e00\u4e2a\u65b0\u7684\u9876\u70b9\u5e76\u5165\u96c6\u5408 \u4e4b\u540e\uff0c\u5176\u4ed6\u7684\u5728\u96c6\u5408 \u4ee5\u5916\u7684\u9876\u70b9\u7684\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u53ef\u80fd\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u56e0\u4e3a\u6709\u4e9b\u539f\u6765\u6682\u65f6\u5230\u8fbe\u4e0d\u4e86\u7684\u9876\u70b9\u73b0\u5728\u53ef\u4ee5\u5230\u8fbe\u4e86\u3002\u5177\u4f53\u7684\u6765\u8bb2\uff0c\u6211\u4eec\u6709\uff1a \u8fd9\u4e2a\u66f4\u65b0\u6b65\u9aa4\u6211\u4e5f\u6765\u8be6\u7ec6\u662f\u8bf4\u4e00\u4e0b\uff0c\u8fd9\u662f\u7b97\u6cd5\u7b2c\u516b\u5230\u7b2c\u5341\u6b65\u6240\u505a\u7684\u4e8b\u60c5\u3002\u6bd4\u5982 \uff0c\u4e00\u5f00\u59cb\u5728\u96c6\u5408 \u4e2d\u53ea\u6709\u6e90\u70b9 \uff0c\u800c\u627e\u5230 \u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u53ea\u80fd\u901a\u8fc7\u9876\u70b9 \uff0c\u8fd9\u6837\u6211\u4eec\u5728\u5f0f \u4e2d\u6240\u5f97\u5230 \u3002\u4f46\u662f\u5f53\u9876\u70b9 \u4e5f\u8fdb\u5165\u5230\u96c6\u5408 \u4e4b\u540e\u6211\u4eec\u518d\u627e \u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u65f6\u5c31\u53ef\u4ee5\u5148\u901a\u8fc7\u9876\u70b9 \u7136\u540e\u5230\u9876\u70b9 \uff0c\u6700\u540e\u518d\u5230 \u3002\u73b0\u5728\u8fd9\u4e24\u79cd\u8d70\u6cd5\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\u7b97\u6cd5\u7a76\u7adf\u9009\u62e9\u54ea\u79cd\u7b97\u6cd5\u8fd8\u662f\u8981\u5224\u65ad\u54ea\u79cd\u8d70\u6cd5\u8ddd\u79bb\u6700\u77ed\uff0c\u5373\u6bd4\u8f83 \uff1a \u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u8c01\u5c0f\u7b97\u6cd5\u5c31\u9009\u62e9\u8c01\u3002\u7ecf\u8fc7\u6bd4\u8f83\u53d1\u73b0\uff1a \u6240\u4ee5\u9009\u62e9\u540e\u8005\u3002\u518d\u6bd4\u5982\u539f\u6765\u8fbe\u5230\u4e0d\u4e86\u7684 \uff0c\u73b0\u5728\u7531\u4e8e\u96c6\u5408 \u4e2d\u591a\u4e86\u9876\u70b9 \u53d8\u5f97\u53ef\u4ee5\u8fbe\u5230\u4e86\uff0c\u5373\uff1a \u6240\u4ee5\u7b97\u6cd5\u80af\u5b9a\u9009\u62e9\u540e\u8005\u3002\u4e0d\u8fc7\u6b64\u65f6\u7b97\u6cd5\u4e5f\u6ca1\u5f97\u53ef\u9009\uff0c\u5148\u8981\u5230\u8fbe\u9876\u70b9 \u5c31\u5fc5\u987b\u8d70\u8fd9\u6761\u8def\u3002 \u5176\u4f59\u53d1\u751f\u53d8\u5316\u7684\u9876\u70b9\u5206\u6790\u7c7b\u4f3c\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u8bd5\u8bd5\u3002 \u73b0\u5728\u7b97\u6cd5\u4ece\u5934\u5230\u5c3e\u88ab\u6267\u884c\u4e86\u4e00\u904d\u4e86\uff0c\u7136\u540e\u6211\u4eec\u56de\u5230\u7b2c\u4e94\u6b65\u5224\u65ad \u5faa\u73af\u7684\u6761\u4ef6\u8fd8\u662f\u5426\u4e3a\u771f\uff0c\u6b64\u65f6\uff1a \u6240\u4ee5\u518d\u6267\u884c \u5faa\u73af\uff0c\u7531\u7b2c\u516d\u6b65\u4ece\u5f0f \u4e2d\u9009\u62e9\u51fa\u5c5e\u4e8e\u96c6\u5408 \uff0c\u4e14\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u4e2d\u8ddd\u79bb\u6700\u77ed\u7684\u90a3\u4e2a\u9876\u70b9\u4e3a \uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7684 \u3002\u7136\u540e\u7b2c\u4e03\u6b65 \u5c06 \u653e\u8fdb\u96c6\u5408 \u3002\u6b64\u65f6\uff0c\u96c6\u5408 \uff1a \u56fe\u72476\uff1av_5\u88ab\u653e\u8fdb\u96c6\u5408S\u4e2d\u3002 \u6b64\u65f6\u6211\u4eec\u6709\uff1a \u53ef\u89c1\u8fd9\u6b21\u6ca1\u6709\u53d1\u751f\u66f4\u65b0\uff0c\u4e14\u6b64\u65f6\u7684\uff1a \u6240\u4ee5\u518d\u6267\u884c \u5faa\u73af\uff0c\u7531\u7b2c\u516d\u6b65\u4ece\u5f0f \u4e2d\u9009\u62e9\u51fa\u5c5e\u4e8e\u96c6\u5408 \uff0c\u4e14\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u4e2d\u8ddd\u79bb\u6700\u77ed\u7684\u90a3\u4e2a\u9876\u70b9\u4e3a \uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7684 \u3002\u7136\u540e\u7b2c\u4e03\u6b65 \u5c06 \u653e\u8fdb\u96c6\u5408 \u3002\u6b64\u65f6\uff0c\u96c6\u5408 \uff1a \u56fe\u72477\uff1av_2\u88ab\u653e\u8fdb\u96c6\u5408S\u4e2d\u3002 \u6b64\u65f6\u6211\u4eec\u6709\uff1a \u53ef\u89c1\u8fd9\u6b21\u5728\u9876\u70b9 \u5904\u53d1\u751f\u4e86\u66f4\u65b0\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48 \u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u5206\u6790\u4e00\u4e0b\u8bd5\u8bd5\uff09\uff0c\u4e14\u6b64\u65f6\u7684\uff1a \u6240\u4ee5\u518d\u6267\u884c \u5faa\u73af\uff0c\u7531\u7b2c\u516d\u6b65\u4ece\u5f0f \u4e2d\u9009\u62e9\u51fa\u5c5e\u4e8e\u96c6\u5408 \uff0c\u4e14\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u4e2d\u8ddd\u79bb\u6700\u77ed\u7684\u90a3\u4e2a\u9876\u70b9\u4e3a \uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7684 \u3002\u7136\u540e\u7b2c\u4e03\u6b65 \u5c06 \u653e\u8fdb\u96c6\u5408 \u3002\u6b64\u65f6\uff0c\u96c6\u5408 \uff1a \u56fe\u72478\uff1av_4\u88ab\u653e\u8fdb\u96c6\u5408S\u4e2d\u3002 \u6b64\u65f6\u6211\u4eec\u6709\uff1a \u53ef\u89c1\u8fd9\u6b21\u5e76\u672a\u53d1\u751f\u66f4\u65b0\uff0c\u4e14\u6b64\u65f6\u7684\uff1a \u6240\u4ee5\u518d\u6267\u884c \u5faa\u73af\uff0c\u7531\u7b2c\u516d\u6b65\u4ece\u5f0f \u4e2d\u9009\u62e9\u51fa\u5c5e\u4e8e\u96c6\u5408 \uff0c\u4e14\u76f8\u5bf9\u4e8e\u96c6\u5408 \u7684\u6700\u77ed\u8def\u5f84\u4e2d\u8ddd\u79bb\u6700\u77ed\u7684\u90a3\u4e2a\u9876\u70b9\u4e3a \uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7684 \uff08\u81f3\u5269\u4e0b \u53ef\u4ee5\u88ab\u9009\u62e9\u4e86\uff09\u3002\u7136\u540e\u7b2c\u4e03\u6b65 \u5c06 \u653e\u8fdb\u96c6\u5408 \u3002\u6b64\u65f6\uff0c\u96c6\u5408 \uff1a \u56fe\u72479\uff1av_4\u88ab\u653e\u8fdb\u96c6\u5408S\u4e2d\u3002 \u6b64\u65f6\u6211\u4eec\u6709\uff1a \u8fd9\u662f\u6700\u540e\u4e00\u6b21\u4e86\uff0c\u4e14\u8fd9\u6b21\u5e76\u672a\u53d1\u751f\u66f4\u65b0\uff0c\u4e14\u6b64\u65f6\u7684\uff1a \u5219\u4e0d\u6ee1\u8db3\u7b97\u6cd5\u4e2d\u7684 \u5faa\u73af\u7684\u6761\u4ef6\uff0c\u5faa\u73af\u7ed3\u675f\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\u663e\u7136\uff0c\u6b64\u65f6\u6709 \u3002 \u6700\u540e\u6211\u4eec\u6765\u770b\u4e00\u770bDijkstra \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 Dijkstra \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \u3002\u5176\u4e2d\uff1a \u5206\u522b\u4e3a\u8d4b\u6743\u6709\u5411\u56fe\u4e2d\u7684\u9876\u70b9\u4e2a\u6570\u548c\u8fb9\u7684\u4e2a\u6570\u3002Dijkstra \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \u662f\u56e0\u4e3a\u7b97\u6cd5\u603b\u5171\u8fdb\u884c \u6b65\uff0c\u6bcf\u4e00\u6b65\u9009\u51fa\u4e00\u4e2a\u5177\u6709\u6700\u5c0f \u503c\u7684\u9876\u70b9\u653e\u5165\u96c6\u5408 \u4e2d\uff0c\u9700\u8981 \u7684\u65f6\u95f4\u3002 \u800c\u9009\u62e9\u57fa\u4e8e\u5806\u5b9e\u73b0\u7684\u4f18\u5148\u961f\u5217\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u5c06Dijkstra \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a \u3002 #include <bits/stdc++.h> const int MaxN = 100010 , MaxM = 500010 ; struct edge { int to , dis , next ; }; edge e [ MaxM ]; int head [ MaxN ], dis [ MaxN ], cnt ; bool vis [ MaxN ]; int n , m , s ; inline void add_edge ( int u , int v , int d ) { cnt ++ ; e [ cnt ]. dis = d ; e [ cnt ]. to = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ; } struct node { int dis ; int pos ; bool operator < ( const node & x ) const { return x . dis < dis ; } }; std :: priority_queue < node > q ; inline void dijkstra () { dis [ s ] = 0 ; q . push ( ( node ){ 0 , s } ); while ( ! q . empty () ) { node tmp = q . top (); q . pop (); int x = tmp . pos , d = tmp . dis ; if ( vis [ x ] ) continue ; vis [ x ] = 1 ; for ( int i = head [ x ]; i ; i = e [ i ]. next ) { int y = e [ i ]. to ; if ( dis [ y ] > dis [ x ] + e [ i ]. dis ) { dis [ y ] = dis [ x ] + e [ i ]. dis ; if ( ! vis [ y ] ) { q . push ( ( node ){ dis [ y ], y } ); } } } } } int main () { scanf ( \"%d%d%d\" , & n , & m , & s ); for ( int i = 1 ; i <= n ; i ++ ) dis [ i ] = 0x7fffffff ; for ( int i = 0 ; i < m ; i ++ ) { int u , v , d ; scanf ( \"%d%d%d\" , & u , & v , & d ); add_edge ( u , v , d ); } dijkstra (); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d \" , dis [ i ] ); return 0 ; }","title":"\u56fe\u8bba(1)dijkstra\u5355\u6e90\u6700\u77ed\u8def(1)"},{"location":"algorithm/graph/eulerian_path/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/eulerian_path/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/fleury_algorithm_euler_path/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/fleury_algorithm_euler_path/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/floyd_warshall_algorithm/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/floyd_warshall_algorithm/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/floyd_warshall_algorithm/%E5%9B%BE%E8%AE%BA%282%29Floyd%E7%AE%97%E6%B3%95%E6%B1%82%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/","text":"Floyd\u7b97\u6cd5\u6c42\u591a\u6e90\u6700\u77ed\u8def \u00b6 \u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u4f5c\u4e3a\u6c42\u6700\u77ed\u8def\u5f84\u7684\u7ecf\u5178\u7b97\u6cd5\uff0c\u5176\u7b97\u6cd5\u5b9e\u73b0\u76f8\u6bd4\u8fea\u6770\u65af\u7279\u62c9\u7b49\u7b97\u6cd5\u662f\u975e\u5e38\u4f18\u96c5\u7684\uff0c\u53ef\u8bfb\u6027\u548c\u7406\u89e3\u90fd\u975e\u5e38\u597d\u3002 \u57fa\u672c\u601d\u60f3\uff1a \u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u5b9a\u4e49\u4e86\u4e24\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff1a \u77e9\u9635D\u8bb0\u5f55\u9876\u70b9\u95f4\u7684\u6700\u5c0f\u8def\u5f84 \u4f8b\u5982D [0] [3]= 10\uff0c\u8bf4\u660e\u9876\u70b90 \u5230 3 \u7684\u6700\u77ed\u8def\u5f84\u4e3a10\uff1b \u77e9\u9635P\u8bb0\u5f55\u9876\u70b9\u95f4\u6700\u5c0f\u8def\u5f84\u4e2d\u7684\u4e2d\u8f6c\u70b9 \u4f8b\u5982P[0] [3]= 1 \u8bf4\u660e\uff0c0 \u5230 3\u7684\u6700\u77ed\u8def\u5f84\u8f68\u8ff9\u4e3a\uff1a0 -> 1 -> 3\u3002 \u5b83\u901a\u8fc73\u91cd\u5faa\u73af\uff0ck\u4e3a\u4e2d\u8f6c\u70b9\uff0cv\u4e3a\u8d77\u70b9\uff0cw\u4e3a\u7ec8\u70b9\uff0c\u5faa\u73af\u6bd4\u8f83D[v] [w] \u548c D[v] [k] + D[k] [w] \u6700\u5c0f\u503c\uff0c\u5982\u679cD[v] [k] + D[k] [w] \u4e3a\u66f4\u5c0f\u503c\uff0c\u5219\u628aD[v] [k] + D[k] [w] \u8986\u76d6\u4fdd\u5b58\u5728D[v] [w]\u4e2d \u3002 \u6982\u5ff5\u662f\u6bd4\u8f83\u96be\u7406\u89e3\u7684\uff0c\u6211\u4eec\u6765\u770b\u56fe\uff1a \u9876\u70b9\u540d\u79f0\u548c\u4e0b\u6807\u7684\u5bf9\u5e94 A B C D E F G 0 1 2 3 4 5 6 \u7b2c2\u6b65\uff1a \u4ee5A\u4e3a\u4e2d\u95f4\u70b9\uff0c\u539fD\u77e9\u9635\u4e2d\uff0cD[B] [G]\u7684 \u503c\u4e3aINF\uff0c\u5373\u4e0d\u5b58\u5728B->G\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u4f46\u662f\u901a\u8fc7A\u4e3a\u4e2d\u95f4\u70b9\uff0cD[B] [A] + D[A] [G] = 12 + 14 = 26 \u5c0f\u4e8e D[B] [G] = INF\uff0c \u6240\u4ee5D[B] [A] + D[A] [G] \u4e3a B -> G\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u8986\u76d6D[B] [G] \u4e3a 26\u3002 \u7b2c3\u6b65\uff1a \u4ee5B\u4e3a\u4e2d\u95f4\u70b9\uff0c\u7b2c2\u6b65\u540e\u7684D\u77e9\u9635\u4e2d\uff0cD[A] [C]\u7684\u503c\u4e3aINF\uff0c \u4f46\u662f\u901a\u8fc7B\uff0cD[A] [B] + D[B] [C] = 12 + 10 = 22 \u5c0f\u4e8e D[A] [C] = INF\uff0c\u6240\u4ee5D[A] [B] + D[B] [C] \u4e3a A->C\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u8986\u76d6D[A] [C]\u7684\u503c\u4e3a22\uff0c \u4ee5\u6b64\u7c7b\u63a8\u3002 \u7b2c4\u6b65: \u2026. \u6211\u4eec\u5c31\u5bf9\u4e0a\u9762\u7684\u56fe\u8fdb\u884c\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u6211\u4eec\u6c42A\u5230D\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u5373v = 0\uff0c w = 3\uff1b \u7ed3\u6784\u5b9a\u4e49 \u00b6 typedef struct struct_graph { char vexs [ MAXN ]; int vexnum ; //\u9876\u70b9\u6570 int edgnum ; //\u8fb9\u6570 int matirx [ MAXN ][ MAXN ]; //\u90bb\u63a5\u77e9\u9635 } Graph ; \u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5 \u00b6 //\u8fd9\u91cc\u662f\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u7684\u6838\u5fc3\u90e8\u5206 //k\u4e3a\u4e2d\u95f4\u70b9 for ( k = 0 ; k < G . vexnum ; k ++ ){ //v\u4e3a\u8d77\u70b9 for ( v = 0 ; v < G . vexnum ; v ++ ){ //w\u4e3a\u7ec8\u70b9 for ( w = 0 ; w < G . vexnum ; w ++ ){ if ( D [ v ][ w ] > ( D [ v ][ k ] + D [ k ][ w ])){ D [ v ][ w ] = D [ v ][ k ] + D [ k ][ w ]; //\u66f4\u65b0\u6700\u5c0f\u8def\u5f84 P [ v ][ w ] = P [ v ][ k ]; //\u66f4\u65b0\u6700\u5c0f\u8def\u5f84\u4e2d\u95f4\u9876\u70b9 } } } } \u6c42A \u5230 D\u7684\u6700\u77ed\u8def\u5f84 \u00b6 v = 0 ; w = 3 ; //\u6c42 0 \u5230 3\u7684\u6700\u5c0f\u8def\u5f84 printf ( \" \\n %d -> %d \u7684\u6700\u5c0f\u8def\u5f84\u4e3a\uff1a%d \\n \" , v , w , D [ v ][ w ]); k = P [ v ][ w ]; printf ( \"path: %d\" , v ); //\u6253\u5370\u8d77\u70b9 while ( k != w ){ printf ( \"-> %d\" , k ); //\u6253\u5370\u4e2d\u95f4\u70b9 k = P [ k ][ w ]; } printf ( \"-> %d \\n \" , w ); \u5b8c\u6574\u4ee3\u7801 \u00b6 #include <stdio.h> #include <stdlib.h> #define MAXN 10 #define INF = 1000 typedef struct struct_graph { char vexs [ MAXN ]; int vexnum ; //\u9876\u70b9\u6570 int edgnum ; //\u8fb9\u6570 int matirx [ MAXN ][ MAXN ]; //\u90bb\u63a5\u77e9\u9635 } Graph ; int pathmatirx [ MAXN ][ MAXN ]; //\u8bb0\u5f55\u5bf9\u5e94\u70b9\u7684\u6700\u5c0f\u8def\u5f84\u7684\u524d\u9a71\u70b9\uff0c\u4f8b\u5982p(1,3) = 2 \u8bf4\u660e\u9876\u70b91\u5230\u9876\u70b93\u7684\u6700\u5c0f\u8def\u5f84\u8981\u7ecf\u8fc72 int shortPath [ MAXN ][ MAXN ]; //\u8bb0\u5f55\u9876\u70b9\u95f4\u7684\u6700\u5c0f\u8def\u5f84\u503c void short_path_floyd ( Graph G , int P [ MAXN ][ MAXN ], int D [ MAXN ][ MAXN ]){ int v , w , k ; //\u521d\u59cb\u5316floyd\u7b97\u6cd5\u7684\u4e24\u4e2a\u77e9\u9635 for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ D [ v ][ w ] = G . matirx [ v ][ w ]; P [ v ][ w ] = w ; } } //\u8fd9\u91cc\u662f\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u7684\u6838\u5fc3\u90e8\u5206 //k\u4e3a\u4e2d\u95f4\u70b9 for ( k = 0 ; k < G . vexnum ; k ++ ){ //v\u4e3a\u8d77\u70b9 for ( v = 0 ; v < G . vexnum ; v ++ ){ //w\u4e3a\u7ec8\u70b9 for ( w = 0 ; w < G . vexnum ; w ++ ){ if ( D [ v ][ w ] > ( D [ v ][ k ] + D [ k ][ w ])){ D [ v ][ w ] = D [ v ][ k ] + D [ k ][ w ]; //\u66f4\u65b0\u6700\u5c0f\u8def\u5f84 P [ v ][ w ] = P [ v ][ k ]; //\u66f4\u65b0\u6700\u5c0f\u8def\u5f84\u4e2d\u95f4\u9876\u70b9 } } } } printf ( \" \\n \u521d\u59cb\u5316\u7684D\u77e9\u9635 \\n \" ); for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ printf ( \"%d \" , D [ v ][ w ]); } printf ( \" \\n \" ); } printf ( \" \\n \u521d\u59cb\u5316\u7684P\u77e9\u9635 \\n \" ); for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ printf ( \"%d\" , P [ v ][ w ]); } printf ( \" \\n \" ); } v = 0 ; w = 3 ; //\u6c42 0 \u5230 3\u7684\u6700\u5c0f\u8def\u5f84 printf ( \" \\n %d -> %d \u7684\u6700\u5c0f\u8def\u5f84\u4e3a\uff1a%d \\n \" , v , w , D [ v ][ w ]); k = P [ v ][ w ]; printf ( \"path: %d\" , v ); //\u6253\u5370\u8d77\u70b9 while ( k != w ){ printf ( \"-> %d\" , k ); //\u6253\u5370\u4e2d\u95f4\u70b9 k = P [ k ][ w ]; } printf ( \"-> %d \\n \" , w ); } int main (){ int v , w ; Graph G ; printf ( \"\u8bf7\u8f93\u5165\u9876\u70b9\u6570: \\n \" ); scanf ( \"%d\" , & G . vexnum ); printf ( \"\u8bf7\u8f93\u5165\u521d\u59cb\u77e9\u9635\u503c\uff1a \\n \" ); for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ scanf ( \"%d\" , & G . matirx [ v ][ w ]); } } printf ( \" \\n \u8f93\u5165\u7684\u77e9\u9635\u503c\uff1a \\n \" ); for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ printf ( \"%d \" , G . matirx [ v ][ w ]); } printf ( \" \\n \" ); } short_path_floyd ( G , pathmatirx , shortPath ); }","title":"Floyd\u7b97\u6cd5\u6c42\u591a\u6e90\u6700\u77ed\u8def"},{"location":"algorithm/graph/floyd_warshall_algorithm/%E5%9B%BE%E8%AE%BA%282%29Floyd%E7%AE%97%E6%B3%95%E6%B1%82%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#floyd","text":"\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u4f5c\u4e3a\u6c42\u6700\u77ed\u8def\u5f84\u7684\u7ecf\u5178\u7b97\u6cd5\uff0c\u5176\u7b97\u6cd5\u5b9e\u73b0\u76f8\u6bd4\u8fea\u6770\u65af\u7279\u62c9\u7b49\u7b97\u6cd5\u662f\u975e\u5e38\u4f18\u96c5\u7684\uff0c\u53ef\u8bfb\u6027\u548c\u7406\u89e3\u90fd\u975e\u5e38\u597d\u3002 \u57fa\u672c\u601d\u60f3\uff1a \u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u5b9a\u4e49\u4e86\u4e24\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff1a \u77e9\u9635D\u8bb0\u5f55\u9876\u70b9\u95f4\u7684\u6700\u5c0f\u8def\u5f84 \u4f8b\u5982D [0] [3]= 10\uff0c\u8bf4\u660e\u9876\u70b90 \u5230 3 \u7684\u6700\u77ed\u8def\u5f84\u4e3a10\uff1b \u77e9\u9635P\u8bb0\u5f55\u9876\u70b9\u95f4\u6700\u5c0f\u8def\u5f84\u4e2d\u7684\u4e2d\u8f6c\u70b9 \u4f8b\u5982P[0] [3]= 1 \u8bf4\u660e\uff0c0 \u5230 3\u7684\u6700\u77ed\u8def\u5f84\u8f68\u8ff9\u4e3a\uff1a0 -> 1 -> 3\u3002 \u5b83\u901a\u8fc73\u91cd\u5faa\u73af\uff0ck\u4e3a\u4e2d\u8f6c\u70b9\uff0cv\u4e3a\u8d77\u70b9\uff0cw\u4e3a\u7ec8\u70b9\uff0c\u5faa\u73af\u6bd4\u8f83D[v] [w] \u548c D[v] [k] + D[k] [w] \u6700\u5c0f\u503c\uff0c\u5982\u679cD[v] [k] + D[k] [w] \u4e3a\u66f4\u5c0f\u503c\uff0c\u5219\u628aD[v] [k] + D[k] [w] \u8986\u76d6\u4fdd\u5b58\u5728D[v] [w]\u4e2d \u3002 \u6982\u5ff5\u662f\u6bd4\u8f83\u96be\u7406\u89e3\u7684\uff0c\u6211\u4eec\u6765\u770b\u56fe\uff1a \u9876\u70b9\u540d\u79f0\u548c\u4e0b\u6807\u7684\u5bf9\u5e94 A B C D E F G 0 1 2 3 4 5 6 \u7b2c2\u6b65\uff1a \u4ee5A\u4e3a\u4e2d\u95f4\u70b9\uff0c\u539fD\u77e9\u9635\u4e2d\uff0cD[B] [G]\u7684 \u503c\u4e3aINF\uff0c\u5373\u4e0d\u5b58\u5728B->G\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u4f46\u662f\u901a\u8fc7A\u4e3a\u4e2d\u95f4\u70b9\uff0cD[B] [A] + D[A] [G] = 12 + 14 = 26 \u5c0f\u4e8e D[B] [G] = INF\uff0c \u6240\u4ee5D[B] [A] + D[A] [G] \u4e3a B -> G\u7684\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u8986\u76d6D[B] [G] \u4e3a 26\u3002 \u7b2c3\u6b65\uff1a \u4ee5B\u4e3a\u4e2d\u95f4\u70b9\uff0c\u7b2c2\u6b65\u540e\u7684D\u77e9\u9635\u4e2d\uff0cD[A] [C]\u7684\u503c\u4e3aINF\uff0c \u4f46\u662f\u901a\u8fc7B\uff0cD[A] [B] + D[B] [C] = 12 + 10 = 22 \u5c0f\u4e8e D[A] [C] = INF\uff0c\u6240\u4ee5D[A] [B] + D[B] [C] \u4e3a A->C\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u8986\u76d6D[A] [C]\u7684\u503c\u4e3a22\uff0c \u4ee5\u6b64\u7c7b\u63a8\u3002 \u7b2c4\u6b65: \u2026. \u6211\u4eec\u5c31\u5bf9\u4e0a\u9762\u7684\u56fe\u8fdb\u884c\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4e14\u6211\u4eec\u6c42A\u5230D\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u5373v = 0\uff0c w = 3\uff1b","title":"Floyd\u7b97\u6cd5\u6c42\u591a\u6e90\u6700\u77ed\u8def"},{"location":"algorithm/graph/floyd_warshall_algorithm/%E5%9B%BE%E8%AE%BA%282%29Floyd%E7%AE%97%E6%B3%95%E6%B1%82%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#_1","text":"typedef struct struct_graph { char vexs [ MAXN ]; int vexnum ; //\u9876\u70b9\u6570 int edgnum ; //\u8fb9\u6570 int matirx [ MAXN ][ MAXN ]; //\u90bb\u63a5\u77e9\u9635 } Graph ;","title":"\u7ed3\u6784\u5b9a\u4e49"},{"location":"algorithm/graph/floyd_warshall_algorithm/%E5%9B%BE%E8%AE%BA%282%29Floyd%E7%AE%97%E6%B3%95%E6%B1%82%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#_2","text":"//\u8fd9\u91cc\u662f\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u7684\u6838\u5fc3\u90e8\u5206 //k\u4e3a\u4e2d\u95f4\u70b9 for ( k = 0 ; k < G . vexnum ; k ++ ){ //v\u4e3a\u8d77\u70b9 for ( v = 0 ; v < G . vexnum ; v ++ ){ //w\u4e3a\u7ec8\u70b9 for ( w = 0 ; w < G . vexnum ; w ++ ){ if ( D [ v ][ w ] > ( D [ v ][ k ] + D [ k ][ w ])){ D [ v ][ w ] = D [ v ][ k ] + D [ k ][ w ]; //\u66f4\u65b0\u6700\u5c0f\u8def\u5f84 P [ v ][ w ] = P [ v ][ k ]; //\u66f4\u65b0\u6700\u5c0f\u8def\u5f84\u4e2d\u95f4\u9876\u70b9 } } } }","title":"\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5"},{"location":"algorithm/graph/floyd_warshall_algorithm/%E5%9B%BE%E8%AE%BA%282%29Floyd%E7%AE%97%E6%B3%95%E6%B1%82%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#a-d","text":"v = 0 ; w = 3 ; //\u6c42 0 \u5230 3\u7684\u6700\u5c0f\u8def\u5f84 printf ( \" \\n %d -> %d \u7684\u6700\u5c0f\u8def\u5f84\u4e3a\uff1a%d \\n \" , v , w , D [ v ][ w ]); k = P [ v ][ w ]; printf ( \"path: %d\" , v ); //\u6253\u5370\u8d77\u70b9 while ( k != w ){ printf ( \"-> %d\" , k ); //\u6253\u5370\u4e2d\u95f4\u70b9 k = P [ k ][ w ]; } printf ( \"-> %d \\n \" , w );","title":"\u6c42A \u5230 D\u7684\u6700\u77ed\u8def\u5f84"},{"location":"algorithm/graph/floyd_warshall_algorithm/%E5%9B%BE%E8%AE%BA%282%29Floyd%E7%AE%97%E6%B3%95%E6%B1%82%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/#_3","text":"#include <stdio.h> #include <stdlib.h> #define MAXN 10 #define INF = 1000 typedef struct struct_graph { char vexs [ MAXN ]; int vexnum ; //\u9876\u70b9\u6570 int edgnum ; //\u8fb9\u6570 int matirx [ MAXN ][ MAXN ]; //\u90bb\u63a5\u77e9\u9635 } Graph ; int pathmatirx [ MAXN ][ MAXN ]; //\u8bb0\u5f55\u5bf9\u5e94\u70b9\u7684\u6700\u5c0f\u8def\u5f84\u7684\u524d\u9a71\u70b9\uff0c\u4f8b\u5982p(1,3) = 2 \u8bf4\u660e\u9876\u70b91\u5230\u9876\u70b93\u7684\u6700\u5c0f\u8def\u5f84\u8981\u7ecf\u8fc72 int shortPath [ MAXN ][ MAXN ]; //\u8bb0\u5f55\u9876\u70b9\u95f4\u7684\u6700\u5c0f\u8def\u5f84\u503c void short_path_floyd ( Graph G , int P [ MAXN ][ MAXN ], int D [ MAXN ][ MAXN ]){ int v , w , k ; //\u521d\u59cb\u5316floyd\u7b97\u6cd5\u7684\u4e24\u4e2a\u77e9\u9635 for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ D [ v ][ w ] = G . matirx [ v ][ w ]; P [ v ][ w ] = w ; } } //\u8fd9\u91cc\u662f\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\u7684\u6838\u5fc3\u90e8\u5206 //k\u4e3a\u4e2d\u95f4\u70b9 for ( k = 0 ; k < G . vexnum ; k ++ ){ //v\u4e3a\u8d77\u70b9 for ( v = 0 ; v < G . vexnum ; v ++ ){ //w\u4e3a\u7ec8\u70b9 for ( w = 0 ; w < G . vexnum ; w ++ ){ if ( D [ v ][ w ] > ( D [ v ][ k ] + D [ k ][ w ])){ D [ v ][ w ] = D [ v ][ k ] + D [ k ][ w ]; //\u66f4\u65b0\u6700\u5c0f\u8def\u5f84 P [ v ][ w ] = P [ v ][ k ]; //\u66f4\u65b0\u6700\u5c0f\u8def\u5f84\u4e2d\u95f4\u9876\u70b9 } } } } printf ( \" \\n \u521d\u59cb\u5316\u7684D\u77e9\u9635 \\n \" ); for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ printf ( \"%d \" , D [ v ][ w ]); } printf ( \" \\n \" ); } printf ( \" \\n \u521d\u59cb\u5316\u7684P\u77e9\u9635 \\n \" ); for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ printf ( \"%d\" , P [ v ][ w ]); } printf ( \" \\n \" ); } v = 0 ; w = 3 ; //\u6c42 0 \u5230 3\u7684\u6700\u5c0f\u8def\u5f84 printf ( \" \\n %d -> %d \u7684\u6700\u5c0f\u8def\u5f84\u4e3a\uff1a%d \\n \" , v , w , D [ v ][ w ]); k = P [ v ][ w ]; printf ( \"path: %d\" , v ); //\u6253\u5370\u8d77\u70b9 while ( k != w ){ printf ( \"-> %d\" , k ); //\u6253\u5370\u4e2d\u95f4\u70b9 k = P [ k ][ w ]; } printf ( \"-> %d \\n \" , w ); } int main (){ int v , w ; Graph G ; printf ( \"\u8bf7\u8f93\u5165\u9876\u70b9\u6570: \\n \" ); scanf ( \"%d\" , & G . vexnum ); printf ( \"\u8bf7\u8f93\u5165\u521d\u59cb\u77e9\u9635\u503c\uff1a \\n \" ); for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ scanf ( \"%d\" , & G . matirx [ v ][ w ]); } } printf ( \" \\n \u8f93\u5165\u7684\u77e9\u9635\u503c\uff1a \\n \" ); for ( v = 0 ; v < G . vexnum ; v ++ ){ for ( w = 0 ; w < G . vexnum ; w ++ ){ printf ( \"%d \" , G . matirx [ v ][ w ]); } printf ( \" \\n \" ); } short_path_floyd ( G , pathmatirx , shortPath ); }","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"algorithm/graph/graph_coloring/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/graph_coloring/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/hamiltonian_cycle/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/hamiltonian_cycle/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/topological_sort/","text":"cosmos \u00b6 Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/topological_sort/#cosmos","text":"Your personal library of every algorithm and data structure code that you will ever encounter Collaborative effort by OpenGenus","title":"cosmos"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/","text":"1.\u6709\u5411\u56fe\u7684\u6982\u5ff5\u548c\u8868\u793a \u00b6 \u6982\u5ff5 \u00b6 \u4e00\u5e45\u6709\u65b9\u5411\u7684\u56fe\uff08\u6216\u6709\u5411\u56fe\uff09\u662f\u7531\u4e00\u7ec4\u9876\u70b9\u548c\u4e00\u7ec4\u6709\u65b9\u5411\u7684\u8fb9\u7ec4\u6210\u7684\uff0c\u6bcf\u6761\u6709\u65b9\u5411\u7684\u8fb9\u90fd\u8fde\u63a5\u7740\u4e00\u5bf9\u6709\u5e8f\u7684\u9876\u70b9\u3002 \u5176\u5b9e\u5728\u6709\u5411\u56fe\u7684\u5b9a\u4e49\u8fd9\u91cc\uff0c\u6211\u4eec\u6ca1\u6709\u5f88\u591a\u8981\u8bf4\u660e\u7684\uff0c\u56e0\u4e3a\u5927\u5bb6\u4f1a\u89c9\u5f97\u8fd9\u79cd\u5b9a\u4e49\u90fd\u662f\u5f88\u81ea\u7136\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8981\u59cb\u7ec8\u8bb0\u5f97**\u6709\u65b9\u5411**\u8fd9\u4ef6\u4e8b\uff01 \u6570\u636e\u8868\u793a \u00b6 \u6211\u4eec\u4f9d\u7136\u4f7f\u7528**\u90bb\u63a5\u8868**\u5b58\u50a8\u6709\u5411\u56fe\uff0c\u5176\u4e2d v-->w \u8868\u793a\u4e3a \u9876\u70b9v \u7684\u90bb\u63a5\u94fe\u8868\u4e2d\u5305\u542b\u4e00\u4e2a \u9876\u70b9w \u3002\u6ce8\u610f\u56e0\u4e3a\u65b9\u5411\u6027\uff0c\u8fd9\u91cc\u6bcf\u6761\u8fb9\u53ea\u51fa\u73b0\u4e00\u6b21\uff01 \u5982\u679c\u4f60\u5df2\u7ecf\u638c\u63e1\u4e86\u65e0\u5411\u56fe\u7684\u6570\u636e\u8868\u793a\uff0c\u4f60\u4f1a\u53d1\u73b0\u6709\u5411\u56fe\u53ea\u662f\u6539\u4e86\u4e2a\u540d\u5b57\u800c\u5df2\uff0c\u53ea\u6709\u4e24\u5904\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a addEdge(v,w)\u65b9\u6cd5 \u4e0e reverse()\u65b9\u6cd5 \u3002\u5728\u6dfb\u52a0\u4e00\u6761\u8fb9\u65f6\u56e0\u4e3a\u6709\u4e86\u65b9\u5411\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u90bb\u63a5\u8868\u4e2d\u589e\u52a0\u4e00\u6b21\uff1b reverse()\u65b9\u6cd5 \u80fd\u591f\u8fd4\u56de\u4e00\u5e45\u56fe\u7684\u53d6\u53cd\uff08\u5373\u6bcf\u4e2a\u65b9\u5411\u90fd\u98a0\u5012\u8fc7\u6765\uff09\uff0c\u5b83\u4f1a\u5728\u4ee5\u540e\u7684\u5e94\u7528\u4e2d\u53d1\u6325\u4f5c\u7528\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u8981\u6709\u4e2a\u5370\u8c61\u5c31\u884c\u3002 2.\u6709\u5411\u56fe\u7684\u53ef\u8fbe\u6027 \u00b6 \u5728\u65e0\u5411\u56fe\uff08\u4e0a\u4e00\u7bc7\u6587\u7ae0\uff09\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u53ef\u4ee5\u627e\u5230\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u5b83\u4eec\u662f\u5426\u5bf9\u6709\u5411\u56fe\u9002\u7528\u5462\uff1f\u662f\u7684\uff0c \u540c\u6837\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u7684\u6539\u52a8\uff08\u9664\u4e86Graph\u6362\u6210Digraph\uff09 \u3002 \u56e0\u4e3a\u8fd9\u4e9b\u5185\u5bb9\u5728\u4e0a\u7bc7\u6587\u7ae0\u4e2d\u90fd\u5df2\u7ecf\u8be6\u7ec6\u4ecb\u7ecd\u8fc7\uff0c\u6240\u4ee5\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u6709\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u7ffb\u4e00\u4e0b\u4e0a\u7bc7\u6587\u7ae0\uff0c\u6709\u8be6\u7ec6\u7684\u56fe\u793a\u8bb2\u89e3\u3002 3.\u73af\u548c\u6709\u5411\u65e0\u73af\u56fe \u00b6 \u6211\u4eec\u5728\u5b9e\u9645\u751f\u6d3b\u4e2d\u53ef\u80fd\u4f1a\u9762\u4e34\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u4f18\u5148\u7ea7\u9650\u5236\u4e0b\u7684\u8c03\u5ea6\u95ee\u9898\u3002\u8bf4\u4eba\u8bdd\u5c31\u662f\u4f60\u9700\u8981\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u6bd4\u5982 A , B , C \uff0c\u4f46\u662f\u505a\u8fd9\u4e09\u4ef6\u4e8b\u60c5\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\u9650\u5236\uff0c\u505a B \u4e4b\u524d\u5fc5\u987b\u5b8c\u6210 A ,\u505a C \u4e4b\u524d\u5fc5\u987b\u5b8c\u6210 B \u2026\u2026\u2026\u2026\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u7ed9\u51fa\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff08\u5982\u4f55\u5b89\u6392\u5404\u79cd\u4e8b\u60c5\u7684\u987a\u5e8f\uff09\uff0c\u4f7f\u5f97\u9650\u5236\u90fd\u4e0d\u51b2\u7a81\u3002 image image image \u5982\u4e0a\u56fe\uff0c\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u90fd\u6bd4\u8f83\u597d\u529e\uff0c\u4f46\u662f\u7b2c\u4e09\u79cd\uff1f \u662f\u4e0d\u662f\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\uff01\uff01\uff01 \u5bf9\u4e8e\u4e0a\u9762\u7684\u8c03\u5ea6\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6709\u5411\u56fe\u6765\u62bd\u8c61\uff0c\u9876\u70b9\u8868\u793a\u4efb\u52a1\uff0c\u7bad\u5934\u7684\u65b9\u5411\u8868\u793a\u4f18\u5148\u7ea7\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u8981\u6709\u5411\u56fe\u4e2d\u5b58\u5728\u6709\u5411\u73af\uff0c\u4efb\u52a1\u8c03\u5ea6\u95ee\u9898\u5c31\u4e0d\u53ef\u80fd\u5b9e\u73b0\uff01\u6240\u4ee5\uff0c\u6211\u4eec\u4e0b\u9762\u8981\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898\uff1a \u5982\u4f55\u68c0\u6d4b\u6709\u5411\u73af\uff08\u53ea\u68c0\u67e5\u5b58\u5728\u6027\uff0c\u4e0d\u8003\u8651\u6709\u591a\u5c11\u4e2a\uff09 \u5bf9\u4e8e\u4e00\u4e2a\u4e0d\u5b58\u5728\u6709\u5411\u73af\u7684\u6709\u5411\u56fe\uff0c\u5982\u4f55\u6392\u5e8f\u627e\u5230\u89e3\u51b3\u65b9\u6848\uff08\u4efb\u52a1\u8c03\u5ea6\u95ee\u9898\uff09 1.\u5bfb\u627e\u6709\u5411\u73af \u00b6 \u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u662f\u91c7\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u56e0\u4e3a\u7531\u7cfb\u7edf\u7ef4\u62a4\u7684\u9012\u5f52\u8c03\u7528\u6808\u8868\u793a\u7684\u6b63\u662f\u201c\u5f53\u524d\u201d\u6b63\u5728\u904d\u5386\u7684\u6709\u5411\u8def\u5f84\u3002\u4e00\u65e6\u6211\u4eec\u627e\u5230\u4e86\u4e00\u6761\u6709\u5411\u8fb9 v-->w ,\u5e76\u4e14 w \u5df2\u7ecf\u5b58\u5728\u4e8e\u6808\u4e2d\uff0c\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u73af\u3002\u56e0\u4e3a\u6808\u8868\u793a\u7684\u662f\u4e00\u6761\u7531 w \u6307\u5411 v \u7684\u6709\u5411\u8def\u5f84\uff0c\u800c v-->w \u6b63\u597d\u8865\u5168\u4e86\u8fd9\u4e2a\u73af\u3002\u540c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u6837\u7684\u8fb9\uff0c\u5219\u610f\u5473\u7740\u8fd9\u5e45\u6709\u5411\u8fb9\u662f\u65e0\u73af\u7684\u3002 \u6211\u4eec\u6240\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\uff1a \u57fa\u672c\u7684 dfs \u7b97\u6cd5 \u65b0\u589e\u4e00\u4e2a onStack[] \u6570\u7ec4\u7528\u6765\u663e\u5f0f\u5730\u8bb0\u5f55\u6808\u4e0a\u7684\u9876\u70b9\uff08\u5373\u4e00\u4e2a\u9876\u70b9\u662f\u5426\u5728\u6808\u4e0a\uff09 \u6211\u4eec\u8fd8\u662f\u4ee5\u4e00\u4e2a\u5177\u4f53\u7684\u8fc7\u7a0b\u4e3a\u4f8b\u8bb2\u89e3 image image image image image image \u8be5\u7c7b\u4e3a\u6807\u51c6\u7684\u9012\u5f52 dfs() \u65b9\u6cd5\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u6570\u7ec4 onStack[] \u6765\u4fdd\u5b58\u9012\u5f52\u8c03\u7528\u671f\u95f4\u6808\u4e0a\u7684 \u6240\u6709\u9876\u70b9\u3002\u5f53\u5b83\u627e\u5230\u4e00\u6761\u8fb9 v \u2192 w \u4e14 w \u5728\u6808\u4e2d\u65f6\uff0c\u5b83\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u5411\u73af\u3002\u73af\u4e0a\u7684\u6240\u6709\u9876\u70b9\u53ef\u4ee5\u901a\u8fc7 edgeTo[] \u4e2d\u7684\u94fe\u63a5\u5f97\u5230\u3002 \u5728\u6267\u884c dfs(G,v) \u65f6\uff0c\u67e5\u627e\u7684\u662f\u4e00\u6761\u7531\u8d77\u70b9\u5230 v \u7684\u6709\u5411\u8def\u5f84\u3002\u8981\u4fdd\u5b58\u8fd9\u6761\u8def\u5f84, DirectedCycle \u7ef4\u62a4\u4e86\u4e00\u4e2a\u7531\u9876\u70b9\u7d22\u5f15\u7684\u6570\u7ec4 onStack[] \uff0c\u4ee5\u6807\u8bb0\u9012\u5f52\u8c03\u7528\u7684\u6808\u4e0a\u7684\u6240\u6709\u9876\u70b9\uff08\u5728\u8c03\u7528 dfs(G,v) \u65f6\u5c06 onStack[v] \u8bbe\u4e3a True \uff0c\u5728\u8c03\u7528\u7ed3\u675f\u65f6\u5c06\u5176\u8bbe\u4e3a false \uff09\u3002 DirectedCycle \u540c\u65f6\u4e5f \u4f7f\u7528\u4e86\u4e00\u4e2a edgeTo[] \u6570\u7ec4\uff0c\u5728\u627e\u5230\u6709\u5411\u73af\u65f6\u8fd4\u56de\u73af\u4e2d\u7684\u6240\u6709\u9876\u70b9\uff0c 2.\u62d3\u6251\u6392\u5e8f \u00b6 \u5982\u4f55\u89e3\u51b3\u4f18\u5148\u7ea7\u9650\u5236\u4e0b\u7684\u8c03\u5ea6\u95ee\u9898\uff1f\u5176\u5b9e\u8fd9\u5c31\u662f\u62d3\u6251\u6392\u5e8f \u62d3\u6251\u6392\u5e8f\u7684\u5b9a\u4e49\uff1a\u7ed9\u5b9a\u4e00\u5e45\u6709\u5411\u56fe\uff0c\u5c06\u6240\u6709\u7684\u9876\u70b9\u6392\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u6709\u5411\u8fb9\u5747\u4ece\u6392\u5728\u524d\u9762\u7684\u5143\u7d20\u6307\u5411\u6392\u5728\u540e\u9762\u7684\u5143\u7d20\uff08\u6216\u8005\u8bf4\u660e\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff09 \u4e0b\u9762\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\uff08\u6392\u8bfe\u95ee\u9898\uff09 \u5b83\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5178\u578b\u5e94\u7528\uff0c\u6bd4\u5982\uff1a \u73b0\u5728\uff0c\u51c6\u5907\u5de5\u4f5c\u5df2\u7ecf\u5dee\u4e0d\u591a\u4e86\uff0c\u8bf7\u96c6\u4e2d\u6ce8\u610f\u529b\uff0c\u8fd9\u91cc\u7684\u601d\u60f3\u53ef\u80fd\u4e0d\u662f\u5f88\u597d\u7406\u89e3\u3002\u7d27\u8ddf\u6211\u7684\u601d\u8def\u3002 \u73b0\u5728\u9996\u5148\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u526f**\u6709\u5411\u65e0\u73af\u56fe**\uff0c\u786e\u4fdd\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff1b\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\uff0c\u6211\u4eec\u6700\u7ec8\u5e0c\u671b\u5f97\u5230\u4e00\u7ec4\u9876\u70b9\u7684\u5148\u540e\u5173\u7cfb\uff0c\u6392\u5728\u524d\u9762\u7684\u5143\u7d20\u6307\u5411\u6392\u5728\u540e\u9762\u7684\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4efb\u610f\u7684\u4e00\u6761\u8fb9 v\u2014\u2014>w \uff0c\u6211\u4eec\u5f97\u5230\u7684\u7ed3\u679c\u5e94\u8be5\u4fdd\u8bc1 \u9876\u70b9v \u5728 \u9876\u70b9w \u524d\u9762\uff1b \u6211\u4eec\u4f7f\u7528 dfs \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c \u5728\u8c03\u7528 dfs(v) \u65f6 \uff0c\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\u5fc5\u6709\u5176\u4e00\uff1a dfs(w) \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7\u4e14\u5df2\u7ecf\u8fd4\u56de\u4e86\uff08\u6b64\u65f6 w \u5df2\u7ecf\u88ab\u6807\u8bb0\uff09 dfs(w) \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7\u4e14\u8fd8\u6ca1\u6709\u8fd4\u56de\uff08\u4ed4\u7ec6\u60f3\u60f3\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\uff09 dfs(w) \u8fd8\u6ca1\u6709\u88ab\u8c03\u7528\uff08 w \u8fd8\u6ca1\u6709\u88ab\u6807\u8bb0\uff09\uff0c\u6b64\u65f6\u60c5\u51b5\u5e76\u4e0d\u590d\u6742\uff0c\u63a5\u4e0b\u6765\u4f1a\u8c03\u7528 dfs(w) \uff0c\u7136\u540e\u8fd4\u56de dfs(w) \uff0c\u7136\u540e\u8c03\u7528 dfs(v) \u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7ed3\u8bba\uff1a dfs(w) \u59cb\u7ec8\u4f1a\u5728 dfs(v) \u4e4b\u524d\u5b8c\u6210\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5148\u5b8c\u6210 dfs \u7684\u9876\u70b9\u6392\u5728\u540e\u9762 \u8bf7\u786e\u4fdd\u4f60\u5b8c\u5168\u7406\u89e3\u4e86\u4e0a\u9762\u7684\u601d\u60f3\uff0c\u63a5\u4e0b\u6765\u5176\u5b9e\u5c31\u76f8\u5bf9\u5bb9\u6613\u4e86\u3002 \u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6808\uff0c\u6bcf\u5f53\u4e00\u4e2a\u9876\u70b9 dfs \u5b8c\u6210\u65f6\uff0c\u5c31\u5c06\u8fd9\u4e2a\u9876\u70b9\u538b\u5165\u6808\u3002 \u6700\u540e\uff0c\u51fa\u6808\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u987a\u5e8f \u5176\u5b9e\u5230\u8fd9\u91cc\u62d3\u6251\u6392\u5e8f\u57fa\u672c\u4e0a\u5c31\u5df2\u7ecf\u88ab\u6211\u4eec\u89e3\u51b3\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u62d3\u5c55\u4e00\u4e0b\uff0c\u7ed9\u51fa\u4e00\u4e9b\u5e38\u89c1\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c\u5176\u4e2d\u6211\u4eec\u521a\u624d\u8bf4\u5230\u7684\u5176\u5b9e\u53eb\u505a**\u9006\u540e\u5e8f\u6392\u5e8f**\u3002\u5b83\u4eec\u90fd\u662f\u57fa\u4e8e dfs \u3002 \u524d\u5e8f\uff1a\u5728\u9012\u5f52\u8c03\u7528\u4e4b\u524d\u5c06\u9876\u70b9\u52a0\u5165\u961f\u5217 \u540e\u5e8f\uff1a\u5728\u9012\u5f52\u8c03\u7528\u4e4b\u540e\u5c06\u9876\u70b9\u52a0\u5165\u961f\u5217 \u9006\u540e\u5e8f\uff1a\u5728\u9012\u5f52\u8c03\u7528\u4e4b\u540e\u5c06\u9876\u70b9\u538b\u5165\u6808 \u6211\u4eec\u5728\u8fd9\u91cc\u4e00\u5e76\u5b9e\u73b0\u8fd9\u4e09\u4e2a\u6392\u5e8f\u65b9\u6cd5\uff0c\u5728\u9012\u5f52\u4e2d\u5b83\u4eec\u8868\u73b0\u5f97\u5341\u5206\u7b80\u5355 \u606d\u559c\u4f60\uff0c\u5230\u8fd9\u513f\u6211\u4eec\u5df2\u7ecf\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0**\u62d3\u6251\u6392\u5e8f**\u3002 #include <stdio.h> #include <stdlib.h> #define MAXN 100001 #define MAXM 500001 #define true 1 #define false 0 typedef int status ; typedef int ElemType ; //\u8282\u70b9\u6570\u636e\u7ed3\u6784 typedef struct Node { ElemType elem ; struct Node * next ; } Node , * pNode ; //\u961f\u5217\u6570\u636e\u7ed3\u6784 typedef struct Queue { pNode front ; //\u6307\u5411\u961f\u5217\u5934\u90e8 pNode rear ; //\u6307\u5411\u961f\u5217\u5c3e\u90e8 int size ; //\u961f\u5217\u957f\u5ea6 } Queue , * pQueue ; //\u90bb\u63a5\u8868 typedef struct Vnode { pNode firstArc ; //\u8fb9\u8868\u5934\u6307\u9488 int innum ; //\u5165\u5ea6 } Vnode ; //\u56fe\u6570\u636e\u7ed3\u6784 typedef struct ALGraph { Vnode * adjList ; int vexnum ; //\u5b9a\u70b9\u6570 int arcnum ; //\u8fb9\u6570 } ALGraph , * pALGraph ; //\u521b\u5efa\u4e00\u4e2a\u961f\u5217 pQueue CreateQueue (); //\u5c06\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u961f\u5c3e ElemType AddNode ( pQueue queue , ElemType elem ); //\u5c06\u961f\u5934\u5143\u7d20\u51fa\u961f status DeleteQueueNode ( pQueue queue ); //\u5224\u65ad\u5f53\u524d\u961f\u5217\u662f\u5426\u4e3a\u7a7a int IsQueueEmpty ( pQueue queue ); //\u5220\u9664\u961f\u5217 void DeleteQueue ( pQueue queue ); //\u521b\u5efa\u4e00\u4e2a\u56fe\u7684\u90bb\u63a5\u8868\u7ed3\u6784 pALGraph CreateALGraph ( int n , int m ); //\u5220\u9664\u90bb\u63a5\u8868 status DeleteALGraph ( pALGraph G ); //\u8fdb\u884c\u62d3\u6251\u6392\u5e8f status TopSort ( pALGraph G , pQueue queue ); int main () { int T ; printf ( \"\u8bf7\u8f93\u5165T\uff1a\" ); scanf ( \"%d\" , & T ); while ( T -- ) { //\u8f93\u5165\u7684N\u548cM\u503c,\u5373\u9876\u70b9\u6570\u548c\u8fb9\u6570 int n , m ; printf ( \"\u8bf7\u8f93\u5165N\u548cM\u503c\" ); scanf ( \"%d %d\" , & n , & m ); pALGraph G = CreateALGraph ( n , m ); pQueue queue = CreateQueue (); if ( TopSort ( G , queue )){ printf ( \"Correct \\n \" ); } else { printf ( \"Wrong \\n \" ); } } return 0 ; } //\u521b\u5efa\u4e00\u4e2a\u961f\u5217 pQueue CreateQueue (){ //\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4 pQueue queue = ( pQueue ) malloc ( sizeof ( Queue )); if ( queue != NULL ){ queue -> front = NULL ; queue -> rear = NULL ; queue -> size = 0 ; } //\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\u5931\u8d25 else { printf ( \"\u5206\u914d\u5931\u8d25\" ); exit ( -1 ); } return queue ; } //\u5c06\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u961f\u5c3e ElemType AddNode ( pQueue queue , ElemType elem ){ //\u5206\u914d\u5185\u5b58\u7a7a\u95f4 pNode node = ( pNode ) malloc ( sizeof ( Node )); //\u5206\u914d\u6210\u529f if ( node != NULL ){ node -> elem = elem ; node -> next = NULL ; if ( IsQueueEmpty ( queue )){ queue -> front = node ; } else { queue -> rear -> next = node ; } queue -> rear = node ; queue -> size ++ ; } return elem ; } //\u5c06\u961f\u5934\u5143\u7d20\u51fa\u961f ElemType DeleteQueueNode ( pQueue queue ){ pNode node = queue -> front ; int elem = node -> elem ; //\u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a\u5219\u5220\u9664\u5934\u7ed3\u70b9 if ( IsQueueEmpty ( queue ) == false ){ queue -> front = queue -> front -> next ; free ( node ); //\u961f\u5217\u5927\u5c0f\u51cf\u4e00 queue -> size -- ; return elem ; } else { printf ( \"\u5220\u9664\u5931\u8d25\uff0c\u961f\u5217\u5df2\u7ecf\u4e3a\u7a7a\" ); return -1 ; } } //\u5224\u65ad\u5f53\u524d\u961f\u5217\u662f\u5426\u4e3a\u7a7a status IsQueueEmpty ( pQueue queue ){ //\u5982\u679c\u961f\u5217\u957f\u5ea6\u4e3a0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u961f\u5217\u5c31\u662f\u7a7a\u961f\u5217 if ( queue -> size == 0 ){ return true ; } //\u5982\u679c\u4e0d\u4e3a0\uff0c\u5219\u4e0d\u662f\u7a7a\u961f\u5217 else { return false ; } } //\u9500\u6bc1\u4e00\u4e2a\u961f\u5217 void DeleteQueue ( pQueue queue ){ while ( IsQueueEmpty ( queue ) == false ) { DeleteQueueNode ( queue ); } free ( queue ); } //\u521b\u5efa\u4e00\u4e2a\u56fe\u7684\u90bb\u63a5\u8868\u7ed3\u6784 pALGraph CreateALGraph ( int n , int m ){ //\u5faa\u73af\u53d8\u91cf int i ; //\u6bcf\u884c\u8f93\u5165\u7684\u4e24\u4e2a\u9876\u70b9 int u , v ; pNode node = ( pNode ) malloc ( sizeof ( Node )); Vnode * nodeHead = ( Vnode * ) malloc ( sizeof ( Vnode ) * MAXN ); nodeHead -> firstArc = node ; pALGraph G = ( pALGraph ) malloc ( sizeof ( ALGraph )); G -> vexnum = n ; G -> arcnum = m ; G -> adjList = nodeHead ; //\u521d\u59cb\u5316\u5165\u5ea6\u4e3a0 for ( i = 0 ; i < m ; i ++ ) { G -> adjList [ i ]. innum = 0 ; } for ( i = 0 ; i < m ; i ++ ) { //\u8f93\u5165\u4e24\u4e2a\u8bfe\u7a0b scanf ( \"%d %d\" , & u , & v ); //\u8f93\u5165\u7684\u8bfe\u7a0b\u5e8f\u53f7\u662f1-N\uff0c\u6240\u4ee5\u8981\u51cf\u4e00 u -- ; v -- ; pNode p = ( pNode ) malloc ( sizeof ( Node )); p -> elem = v ; p -> next = G -> adjList [ u ]. firstArc ; G -> adjList [ u ]. firstArc = p ; G -> adjList [ v ]. innum = G -> adjList [ v ]. innum + 1 ; } return G ; } status DeleteALGraph ( pALGraph G ){ int i ; pNode p ; for ( i = 0 ; i < G -> vexnum ; i ++ ) { p = G -> adjList [ i ]. firstArc ; while ( p != NULL ) { G -> adjList [ i ]. firstArc = p -> next ; free ( p ); p = G -> adjList [ i ]. firstArc ; } } printf ( \"delete ok!!\" ); return true ; } status TopSort ( pALGraph G , pQueue queue ){ int i ; //\u8bb0\u5f55\u88ab\u5220\u9664\u7684\u8282\u70b9 int count = 0 ; //\u961f\u5217 //\u628a\u5165\u5ea6\u4e3a0\u7684\u52a0\u5165\u5230\u961f\u5217 for ( i = 0 ; i < G -> vexnum ; i ++ ) { if ( G -> adjList [ i ]. innum == 0 ) { AddNode ( queue , i ); } } while ( ! IsQueueEmpty ( queue )){ //\u5220\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9 int elem = DeleteQueueNode ( queue ); count ++ ; int index ; pNode p ; //\u83b7\u53d6\u4e0eelem\u76f8\u8fde\u7684\u70b9 for ( p = G -> adjList [ elem ]. firstArc ; p != NULL ; p = p -> next ) { index = p -> elem ; int num = G -> adjList [ index ]. innum - 1 ; if ( num == 0 ){ AddNode ( queue , index ); } } } if ( count == G -> vexnum ) return true ; else return false ; } \u5230\u8fd9\u513f\uff0c\u6709\u5411\u73af\u7684\u68c0\u6d4b\u4e0e\u62d3\u6251\u6392\u5e8f\u7684\u5185\u5bb9\u5c31\u7ed3\u675f\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8003\u8651\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u6027\u95ee\u9898 4.\u5f3a\u8fde\u901a\u5206\u91cf \u00b6 1.\u5f3a\u8fde\u901a\u7684\u5b9a\u4e49 \u00b6 \u56de\u60f3\u4e00\u4e0b\u6211\u4eec\u5728\u65e0\u5411\u56fe\u7684\u65f6\u5019\uff0c\u5f53\u65f6\u6211\u4eec\u5c31\u5229\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u89e3\u51b3\u4e86\u4e00\u5e45\u65e0\u5411\u56fe\u7684\u8fde\u901a\u95ee\u9898\u3002\u6839\u636e\u6df1\u641c\u80fd\u591f\u5230\u8fbe\u6240\u6709\u8fde\u901a\u7684\u9876\u70b9\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\uff0c\u95ee\u9898\u53d8\u6210\u6709\u5411\u56fe\uff0c\u5c31\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u4e86\uff01\u4e0b\u9762\u5206\u522b\u662f\u65e0\u5411\u56fe\u548c\u6709\u5411\u56fe\u7684\u4e24\u4e2a\u4f8b\u5b50\uff1a \u65e0\u5411\u56fe\u7684\u5404\u8fde\u901a\u5206\u91cf \u5b9a\u4e49\u3002\u5982\u679c\u4e24\u4e2a\u9876\u70b9 v \u548c w \u662f\u4e92\u76f8\u53ef\u8fbe\u7684\uff0c\u5219\u79f0\u5b83\u4eec\u4e3a\u5f3a\u8fde\u901a\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65e2\u5b58\u5728\u4e00\u6761\u4ece v \u5230 w \u7684\u6709\u5411\u8def\u5f84\uff0c\u4e5f\u5b58\u5728\u4e00\u6761\u4ece w \u5230 v \u7684\u6709\u5411\u8def\u5f84\u3002\u5982\u679c\u4e00\u5e45\u6709\u5411\u56fe\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u90fd\u662f\u5f3a \u8fde\u901a\u7684\uff0c\u5219\u79f0\u8fd9\u5e45\u6709\u5411\u56fe\u4e5f\u662f\u5f3a\u8fde\u901a\u7684\u3002 \u4ee5\u4e0b\u662f\u53e6\u4e00\u4e9b\u5f3a\u8fde\u901a\u7684\u4f8b\u5b50\uff1a \u5f3a\u8fde\u901a\u7684\u6709\u5411\u56fe 2.\u5f3a\u8fde\u901a\u5206\u91cf \u00b6 \u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5f3a\u8fde\u901a\u6027\u5176\u5b9e\u662f\u9876\u70b9\u4e4b\u95f4\u7684\u4e00\u79cd\u7b49\u4ef7\u5173\u7cfb\uff0c\u56e0\u4e3a\u5b83\u6709\u4ee5\u4e0b\u6027\u8d28 \u81ea\u53cd\u6027\uff1a\u4efb\u610f\u9876\u70b9 v \u548c\u81ea\u5df1\u90fd\u662f\u5f3a\u8fde\u901a\u7684 \u5bf9\u79f0\u6027\uff1a\u5982\u679c v \u548c w \u662f\u5f3a\u8fde\u901a\u7684\uff0c\u90a3\u4e48 w \u548c v \u4e5f\u662f\u5f3a\u8fde\u901a\u7684 \u4f20\u9012\u6027\uff1a\u5982\u679c v \u548c w \u662f\u5f3a\u8fde\u901a\u7684\u4e14 w \u548c x \u4e5f\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u90a3 \u4e48 v \u548c x \u4e5f\u662f\u5f3a\u8fde\u901a\u7684 \u56e0\u4e3a\u7b49\u4ef7\uff0c\u6240\u4ee5\u548c\u65e0\u5411\u56fe\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u5e45\u56fe\u5206\u4e3a\u82e5\u5e72\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u9876\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684\u3002\u8fd9\u6837\u7684\u8bdd\uff0c \u4efb\u610f\u7ed9\u5b9a\u4e24\u4e2a\u9876\u70b9\u5224\u65ad\u5b83\u4eec\u4e4b\u95f4\u7684\u5f3a\u8fde\u901a\u5173\u7cfb\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u5224\u65ad\u5b83\u4eec\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u5c31\u53ef\u4ee5\u4e86\uff01 \u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u8ba1\u4e00\u79cd\u7b97\u6cd5\u6765\u5b9e\u73b0\u6211\u4eec\u7684\u76ee\u6807\u2014\u2014\u2014\u2014 \u5c06\u4e00\u5e45\u56fe\u5206\u4e3a\u82e5\u5e72\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf \u3002\u6211\u4eec\u5148\u6765\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u7684\u76ee\u6807\uff1a image 3.Kosaraju\u7b97\u6cd5 \u00b6 Kosaraju\u7b97\u6cd5\u5c31\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u89e3\u51b3\u5f3a\u8fde\u901a\u6027\u95ee\u9898\u7684\u7b97\u6cd5\uff0c\u5b83\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u4e0d\u597d\u7406\u89e3**why**\uff0c\u5e0c\u671b\u4f60\u6253\u8d77\u7cbe\u795e\uff0c\u6211\u5e0c\u671b\u6211\u80fd\u591f\u628a\u5b83\u8bb2\u660e\u767d\uff08\u4e5f\u53ea\u662f\u5e0c\u671b\uff0c\u6211\u4f1a\u5c3d\u91cf\uff0c\u5982\u679c\u4e0d\u6e05\u695a\u7684\u8bdd\uff0c\u5f3a\u70c8\u5efa\u8bae\u7ed3\u5408**\u7b97\u6cd54**\u4e00\u8d77\u98df\u7528\uff09 \u56de\u5fc6\u4e00\u4e0b\u6211\u4eec\u4e4b\u524d\u5728\u65e0\u5411\u56fe\u7684\u90e8\u5206\u5982\u4f55\u89e3\u51b3\u8fde\u901a\u6027\u95ee\u9898\u7684\uff0c \u4e00\u6b21dfs\u80fd\u591f\u6070\u597d\u904d\u5386\u4e00\u4e2a\u8fde\u901a\u5206\u91cf \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 dfs \u6765\u8ba1\u6570\uff0c\u83b7\u53d6\u6bcf\u4e2a\u9876\u70b9\u7684 id[] ;\u6240\u4ee5\uff0c\u6211\u4eec\u5728\u89e3\u51b3\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u6027\u95ee\u9898\u65f6\uff0c\u4e5f\u5e0c\u671b\u80fd\u591f\u5229\u7528**\u4e00\u6b21dfs\u80fd\u591f\u6070\u597d\u904d\u5386\u4e00\u4e2a\u8fde\u901a\u5206\u91cf**\u7684\u6027\u8d28\uff1b\u4e0d\u8fc7\uff0c\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5b83\u5931\u6548\u4e86\uff0c\u6765\u770b\u4e00\u4e0b\u56fe\u4e00\uff1a \u56fe\u4e00 \u5728\u56fe\u4e00\u4e2d\uff0c dfs\u904d\u5386 \u4f1a\u5b58\u5728\u4e24\u79cd\u60c5\u51b5\uff1a \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u5982\u679c dfs \u7684\u8d77\u70b9\u65f6 \u9876\u70b9A \uff0c\u90a3\u4e48\u4e00\u6b21 dfs\u904d\u5386 \u4f1a\u904d\u5386\u6574\u4e2a\u533a\u57df\u4e00\u548c\u533a\u57df\u4e8c\uff0c\u4f46\u662f\u533a\u57df\u4e00\u4e0e\u533a\u57df\u4e8c\u5e76\u4e0d\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u8fd9\u5c31\u662f\u6709\u5411\u56fe\u7ed9\u6211\u4eec\u5e26\u6765\u7684\u56f0\u96be\uff01 \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a \u5982\u679c dfs \u7684\u8d77\u70b9\u662f \u9876\u70b9D \uff0c\u5219\u7b2c\u4e00\u6b21 dfs \u4f1a\u904d\u5386\u533a\u57df\u4e8c\uff0c\u7b2c\u4e8c\u6b21 dfs \u4f1a\u904d\u5386\u533a\u57df\u4e00 \uff0c\u8fd9\u4e0d\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u5417\uff1f \u6240\u4ee5\uff0c\u7b2c\u4e8c\u4e2a\u60c5\u51b5\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u52aa\u529b\u7684\u65b9\u5411\uff01\u4e5f\u5c31\u662f**\u5982\u679c\u6211\u4eec\u4eba\u4e3a\u5730\uff0c\u5c06\u6240\u6709\u7684\u53ef\u80fd\u7684\u60c5\u51b5\u90fd\u53d8\u6210\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4e8b\u60c5\u4e0d\u5c31\u89e3\u51b3\u4e86\uff01** \u6709\u4e86\u65b9\u5411\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e00\u5e45\u771f\u5b9e\u7684\u6709\u5411\u56fe\u6848\u4f8b\uff0c\u5982\u56fe\u4e8c\u6240\u793a\uff0c\u8fd9\u662f\u4e00\u5e45\u6709\u5411\u56fe\uff0c\u5b83\u7684\u5404\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5728\u56fe\u4e2d\u7528\u7070\u8272\u6807\u8bb0\uff1b\u6211\u4eec\u7684\u64cd\u4f5c\u662f\u5c06\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u770b\u6210\u4e00\u4e2a**\u9876\u70b9\uff08\u6bd4\u8f83\u5927\u800c\u5df2\uff09 \uff0c\u90a3\u4e48\u4f1a\u4ea7\u751f\u4ec0\u4e48\u540e\u679c\u5462\uff1f**\u6211\u4eec\u7684\u539f\u59cb\u7684\u6709\u5411\u56fe\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff01 \u56fe\u4e8c ps:\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5b58\u5728\u73af\u5462\uff1f\u56e0\u4e3a\u524d\u63d0\u6211\u4eec\u628a\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u770b\u6210\u4e86\u4e00\u4e2a\u4e2a\u9876\u70b9\uff0c\u5982\u679c \u9876\u70b9A \u548c \u9876\u70b9B \u4e4b\u95f4\u5b58\u5728\u73af\uff0c\u90a3 A \u548c B \u5c31\u4f1a\u6784\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff01\u5b83\u4eec\u672c\u5e94\u5c5e\u4e8e\u4e00\u4e2a\u9876\u70b9\uff01 \u5728\u5f97\u5230\u4e00\u5e45\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\u4e4b\u540e\uff0c\u4e8b\u60c5\u6ca1\u6709\u90a3\u4e48\u590d\u6742\u4e86\u3002\u73b0\u5728\uff0c\u6211\u4eec\u518d\u56de\u60f3\u4e00\u4e0b\u6211\u4eec\u7684\u76ee\u7684\u2014\u2014\u2014\u2014 \u5728\u56fe\u4e00\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u533a\u57df\u4e8c\u5148\u8fdb\u884c dfs \uff0c\u4e5f\u5c31\u662f\u7bad\u5934\u6307\u5411\u7684\u533a\u57df\u5148\u8fdb\u884c dfs \u3002\u5728\u5c06\u4e00\u4e2a\u4e2a\u533a\u57df\u62bd\u8c61\u6210\u70b9\u540e\uff0c\u95ee\u9898\u5f52\u7ed3\u4e8e**\u5728\u4e00\u5e45\u6709\u5411\u65e0\u73af\u56fe\u4e2d\uff0c\u6211\u4eec\u8981\u627e\u5230\u4e00\u79cd\u987a\u5e8f\uff0c\u8fd9\u79cd\u987a\u5e8f\u7684\u89c4\u5219\u662f\u7bad\u5934\u6307\u5411\u7684\u9876\u70b9\u6392\u5728\u524d**\uff01 \u5230\u8fd9\u513f\uff0c\u6211\u4eec\u7a0d\u5fae\u597d\u597d\u60f3\u60f3\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\u627e\u5230\u4e00\u79cd\u8fdb\u884c dfs \u7684\u987a\u5e8f\uff0c\u8fd9\u79cd\u987a\u5e8f\uff0c\u662f\u4e0d\u662f\u548c\u6211\u4eec\u5728\u524d\u9762\u8bb2\u5230\u7684**\u67d0\u79cd\u6392\u5e8f**\u5341\u5206\u76f8\u4f3c\u5462\uff1f\u6211\u60f3\u4f60\u5df2\u7ecf\u4e0d\u96be\u60f3\u5230\u4e86\uff0c\u5c31\u662f**\u62d3\u6251\u6392\u5e8f**\uff01\u4f46\u662f**\u548c\u62d3\u6251\u6392\u5e8f\u662f\u5b8c\u5168\u76f8\u53cd\u7684\u3002** \u6211\u4eec\u628a\u7bad\u5934\u7406\u89e3\u4e3a\u4f18\u5148\u7ea7\uff0c\u5bf9\u4e8e\u9876\u70b9A\u6307\u5411\u9876\u70b9B\uff0c\u5219A\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8eB\u3002\u90a3\u4e48\u5bf9\u4e8e\u62d3\u6251\u6392\u5e8f\uff0c \u4f18\u5148\u7ea7\u9ad8\u8005\u5728\u524d \uff1b\u5bf9\u4e8e\u6211\u4eec\u7684\u4efb\u52a1\uff0c \u4f18\u5148\u7ea7\u4f4e\u8005\u5728\u524d \uff08\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u5c31\u662fdfs\u4e0d\u4f1a\u4ece\u4f18\u5148\u7ea7\u4f4e\u7684\u5730\u65b9\u8dd1\u5230\u4f18\u5148\u7ea7\u9ad8\u7684\u5730\u65b9\uff09 \u5bf9\u4e8e\u56fe\u4e8c\uff1a\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u5982\u56fe\u4e09\u6240\u793a\uff1a image \u5982\u679c\u6211\u4eec\u4ece \u9876\u70b91 \u5f00\u59cb\u8fdb\u884c dfs \uff0c\u4f9d\u6b21\u5411\u53f3\uff0c\u90a3\u4e48\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u6211\u4eec\u4e0d\u5e0c\u671b\u7684\u60c5\u51b5\uff01\u56e0\u4e3a\u7bad\u5934\u662f\u5355\u5411\u7684\uff01 \u6211\u60f3\uff0c\u5230\u8fd9\u513f\uff0c\u4f60\u5e94\u8be5\u5dee\u4e0d\u591a\u7406\u89e3\u6211\u7684\u610f\u601d\u4e86\u3002\u6211\u4eec\u8fd8\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u95ee\u9898\u2014\u2014\u2014\u2014 \u5982\u4f55\u83b7\u53d6\u62d3\u6251\u6392\u5e8f\u7684\u53cd\u5e8f\uff1f \u5176\u5b9e\u89e3\u51b3\u65b9\u6cd5\u5f88\u7b80\u5355\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe G ,\u6211\u4eec\u5148\u53d6\u53cd\uff08reverse\u65b9\u6cd5\uff09\uff0c\u5c06\u56fe G \u7684\u6240\u6709\u8fb9\u7684\u987a\u5e8f\u98a0\u5012\uff0c\u7136\u540e\u83b7\u53d6\u53d6\u53cd\u540e\u7684\u56fe\u7684**\u9006\u540e\u5e8f\u6392\u5e8f\uff08\u6211\u4eec\u4e0d\u80fd\u79f0\u4e3a\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u4e3a\u771f\u5b9e\u60c5\u51b5\u662f\u6709\u73af\u7684\uff09**\uff1b\u6700\u540e\uff0c\u6211\u4eec\u5229\u7528\u521a\u624d\u83b7\u5f97\u7684\u9876\u70b9\u987a\u5e8f\u5bf9\u539f\u56fe G \u8fdb\u884c dfs \u5373\u53ef\uff0c\u8fd9\u65f6\u5b83\u7684\u539f\u7406\u4e0e\u4e0a\u4e00\u7bc7\u6587\u7ae0\u65e0\u5411\u56fe\u7684\u5b8c\u5168\u4e00\u81f4\uff01 \u6700\u540e\uff0c\u603b\u7ed3\u4e00\u4e0bKosaraju\u7b97\u6cd5\u7684\u5b9e\u73b0\u6b65\u9aa4\uff1a 1.\u5728\u7ed9\u5b9a\u7684\u4e00\u5e45\u6709\u5411\u56fe G \u4e2d\uff0c\u4f7f\u7528 DepthFirstOrder \u6765\u8ba1\u7b97\u5b83\u7684\u53cd\u5411\u56fe GR \u7684\u9006\u540e\u5e8f\u6392\u5217\u3002 2.\u5728 G \u4e2d\u8fdb\u884c\u6807\u51c6\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4f46\u662f\u8981\u6309\u7167\u521a\u624d\u8ba1\u7b97\u5f97\u5230\u7684\u987a\u5e8f\u800c\u975e\u6807\u51c6\u7684\u987a\u5e8f\u6765\u8bbf\u95ee \u6240\u6709\u672a\u88ab\u6807\u8bb0\u7684\u9876\u70b9\u3002 \u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\u53ea\u5728\u65e0\u5411\u56fe\u7684\u5b9e\u73b0 CC\u7c7b \u4e2d\u589e\u52a0\u4e86\u4e24\u884c\u4ee3\u7801\uff08\u6539\u53d8dfs\u7684\u987a\u5e8f\uff09 \u6700\u540e\uff0c\u9644\u4e0a\u4e00\u5e45\u5177\u4f53\u7684\u64cd\u4f5c\u8fc7\u7a0b\uff1a #include <iostream> #include <cstdio> #include <vector> #include <cstring> using namespace std ; const int max_v = 100 ; int V ; vector < int > g [ max_v ]; vector < int > rg [ max_v ]; vector < int > vs ; bool used [ max_v ]; int cmp [ max_v ]; void add_edge ( int from , int to ) { g [ from ]. push_back ( to ); rg [ to ]. push_back ( from ); } void dfs ( int v ) { used [ v ] = true ; for ( int i = 0 ; i < g [ v ]. size (); i ++ ){ if ( ! used [ g [ v ][ i ]]){ dfs ( g [ v ][ i ]); } } vs . push_back ( v ); } void rdfs ( int v , int k ) { used [ v ] = true ; cmp [ v ] = k ; for ( int i = 0 ; i < rg [ v ]. size (); i ++ ){ if ( ! used [ rg [ v ][ i ]]){ rdfs ( rg [ v ][ i ], k ); } } } int scc () { memset ( used , 0 , sizeof ( used )); vs . clear (); for ( int v = 0 ; v < V ; v ++ ){ if ( ! used [ v ]){ dfs ( v ); } } memset ( used , 0 , sizeof ( used )); int k = 0 ; for ( int i = vs . size () -1 ; i >= 0 ; i -- ){ if ( ! used [ vs [ i ]]){ rdfs ( vs [ i ], k ++ ); } } return k ; } int main () { scanf ( \"%d\" , & V ); int m ; scanf ( \"%d\" , & m ); int u , v ; for ( int i = 0 ; i < m ; i ++ ){ scanf ( \"%d%d\" , & u , & v ); add_edge ( u , v ); } int ans = scc (); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"\u62d3\u6251\u6392\u5e8f\u4e0eKosaraju\u7b97\u6cd5"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#1","text":"","title":"1.\u6709\u5411\u56fe\u7684\u6982\u5ff5\u548c\u8868\u793a"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#_1","text":"\u4e00\u5e45\u6709\u65b9\u5411\u7684\u56fe\uff08\u6216\u6709\u5411\u56fe\uff09\u662f\u7531\u4e00\u7ec4\u9876\u70b9\u548c\u4e00\u7ec4\u6709\u65b9\u5411\u7684\u8fb9\u7ec4\u6210\u7684\uff0c\u6bcf\u6761\u6709\u65b9\u5411\u7684\u8fb9\u90fd\u8fde\u63a5\u7740\u4e00\u5bf9\u6709\u5e8f\u7684\u9876\u70b9\u3002 \u5176\u5b9e\u5728\u6709\u5411\u56fe\u7684\u5b9a\u4e49\u8fd9\u91cc\uff0c\u6211\u4eec\u6ca1\u6709\u5f88\u591a\u8981\u8bf4\u660e\u7684\uff0c\u56e0\u4e3a\u5927\u5bb6\u4f1a\u89c9\u5f97\u8fd9\u79cd\u5b9a\u4e49\u90fd\u662f\u5f88\u81ea\u7136\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8981\u59cb\u7ec8\u8bb0\u5f97**\u6709\u65b9\u5411**\u8fd9\u4ef6\u4e8b\uff01","title":"\u6982\u5ff5"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#_2","text":"\u6211\u4eec\u4f9d\u7136\u4f7f\u7528**\u90bb\u63a5\u8868**\u5b58\u50a8\u6709\u5411\u56fe\uff0c\u5176\u4e2d v-->w \u8868\u793a\u4e3a \u9876\u70b9v \u7684\u90bb\u63a5\u94fe\u8868\u4e2d\u5305\u542b\u4e00\u4e2a \u9876\u70b9w \u3002\u6ce8\u610f\u56e0\u4e3a\u65b9\u5411\u6027\uff0c\u8fd9\u91cc\u6bcf\u6761\u8fb9\u53ea\u51fa\u73b0\u4e00\u6b21\uff01 \u5982\u679c\u4f60\u5df2\u7ecf\u638c\u63e1\u4e86\u65e0\u5411\u56fe\u7684\u6570\u636e\u8868\u793a\uff0c\u4f60\u4f1a\u53d1\u73b0\u6709\u5411\u56fe\u53ea\u662f\u6539\u4e86\u4e2a\u540d\u5b57\u800c\u5df2\uff0c\u53ea\u6709\u4e24\u5904\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a addEdge(v,w)\u65b9\u6cd5 \u4e0e reverse()\u65b9\u6cd5 \u3002\u5728\u6dfb\u52a0\u4e00\u6761\u8fb9\u65f6\u56e0\u4e3a\u6709\u4e86\u65b9\u5411\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u90bb\u63a5\u8868\u4e2d\u589e\u52a0\u4e00\u6b21\uff1b reverse()\u65b9\u6cd5 \u80fd\u591f\u8fd4\u56de\u4e00\u5e45\u56fe\u7684\u53d6\u53cd\uff08\u5373\u6bcf\u4e2a\u65b9\u5411\u90fd\u98a0\u5012\u8fc7\u6765\uff09\uff0c\u5b83\u4f1a\u5728\u4ee5\u540e\u7684\u5e94\u7528\u4e2d\u53d1\u6325\u4f5c\u7528\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u8981\u6709\u4e2a\u5370\u8c61\u5c31\u884c\u3002","title":"\u6570\u636e\u8868\u793a"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#2","text":"\u5728\u65e0\u5411\u56fe\uff08\u4e0a\u4e00\u7bc7\u6587\u7ae0\uff09\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u53ef\u4ee5\u627e\u5230\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u5b83\u4eec\u662f\u5426\u5bf9\u6709\u5411\u56fe\u9002\u7528\u5462\uff1f\u662f\u7684\uff0c \u540c\u6837\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u7684\u6539\u52a8\uff08\u9664\u4e86Graph\u6362\u6210Digraph\uff09 \u3002 \u56e0\u4e3a\u8fd9\u4e9b\u5185\u5bb9\u5728\u4e0a\u7bc7\u6587\u7ae0\u4e2d\u90fd\u5df2\u7ecf\u8be6\u7ec6\u4ecb\u7ecd\u8fc7\uff0c\u6240\u4ee5\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u6709\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u7ffb\u4e00\u4e0b\u4e0a\u7bc7\u6587\u7ae0\uff0c\u6709\u8be6\u7ec6\u7684\u56fe\u793a\u8bb2\u89e3\u3002","title":"2.\u6709\u5411\u56fe\u7684\u53ef\u8fbe\u6027"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#3","text":"\u6211\u4eec\u5728\u5b9e\u9645\u751f\u6d3b\u4e2d\u53ef\u80fd\u4f1a\u9762\u4e34\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u4f18\u5148\u7ea7\u9650\u5236\u4e0b\u7684\u8c03\u5ea6\u95ee\u9898\u3002\u8bf4\u4eba\u8bdd\u5c31\u662f\u4f60\u9700\u8981\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u6bd4\u5982 A , B , C \uff0c\u4f46\u662f\u505a\u8fd9\u4e09\u4ef6\u4e8b\u60c5\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\u9650\u5236\uff0c\u505a B \u4e4b\u524d\u5fc5\u987b\u5b8c\u6210 A ,\u505a C \u4e4b\u524d\u5fc5\u987b\u5b8c\u6210 B \u2026\u2026\u2026\u2026\u4f60\u7684\u4efb\u52a1\u5c31\u662f\u7ed9\u51fa\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff08\u5982\u4f55\u5b89\u6392\u5404\u79cd\u4e8b\u60c5\u7684\u987a\u5e8f\uff09\uff0c\u4f7f\u5f97\u9650\u5236\u90fd\u4e0d\u51b2\u7a81\u3002 image image image \u5982\u4e0a\u56fe\uff0c\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u90fd\u6bd4\u8f83\u597d\u529e\uff0c\u4f46\u662f\u7b2c\u4e09\u79cd\uff1f \u662f\u4e0d\u662f\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\uff01\uff01\uff01 \u5bf9\u4e8e\u4e0a\u9762\u7684\u8c03\u5ea6\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6709\u5411\u56fe\u6765\u62bd\u8c61\uff0c\u9876\u70b9\u8868\u793a\u4efb\u52a1\uff0c\u7bad\u5934\u7684\u65b9\u5411\u8868\u793a\u4f18\u5148\u7ea7\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u8981\u6709\u5411\u56fe\u4e2d\u5b58\u5728\u6709\u5411\u73af\uff0c\u4efb\u52a1\u8c03\u5ea6\u95ee\u9898\u5c31\u4e0d\u53ef\u80fd\u5b9e\u73b0\uff01\u6240\u4ee5\uff0c\u6211\u4eec\u4e0b\u9762\u8981\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898\uff1a \u5982\u4f55\u68c0\u6d4b\u6709\u5411\u73af\uff08\u53ea\u68c0\u67e5\u5b58\u5728\u6027\uff0c\u4e0d\u8003\u8651\u6709\u591a\u5c11\u4e2a\uff09 \u5bf9\u4e8e\u4e00\u4e2a\u4e0d\u5b58\u5728\u6709\u5411\u73af\u7684\u6709\u5411\u56fe\uff0c\u5982\u4f55\u6392\u5e8f\u627e\u5230\u89e3\u51b3\u65b9\u6848\uff08\u4efb\u52a1\u8c03\u5ea6\u95ee\u9898\uff09","title":"3.\u73af\u548c\u6709\u5411\u65e0\u73af\u56fe"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#1_1","text":"\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u662f\u91c7\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u56e0\u4e3a\u7531\u7cfb\u7edf\u7ef4\u62a4\u7684\u9012\u5f52\u8c03\u7528\u6808\u8868\u793a\u7684\u6b63\u662f\u201c\u5f53\u524d\u201d\u6b63\u5728\u904d\u5386\u7684\u6709\u5411\u8def\u5f84\u3002\u4e00\u65e6\u6211\u4eec\u627e\u5230\u4e86\u4e00\u6761\u6709\u5411\u8fb9 v-->w ,\u5e76\u4e14 w \u5df2\u7ecf\u5b58\u5728\u4e8e\u6808\u4e2d\uff0c\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u73af\u3002\u56e0\u4e3a\u6808\u8868\u793a\u7684\u662f\u4e00\u6761\u7531 w \u6307\u5411 v \u7684\u6709\u5411\u8def\u5f84\uff0c\u800c v-->w \u6b63\u597d\u8865\u5168\u4e86\u8fd9\u4e2a\u73af\u3002\u540c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u6837\u7684\u8fb9\uff0c\u5219\u610f\u5473\u7740\u8fd9\u5e45\u6709\u5411\u8fb9\u662f\u65e0\u73af\u7684\u3002 \u6211\u4eec\u6240\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\uff1a \u57fa\u672c\u7684 dfs \u7b97\u6cd5 \u65b0\u589e\u4e00\u4e2a onStack[] \u6570\u7ec4\u7528\u6765\u663e\u5f0f\u5730\u8bb0\u5f55\u6808\u4e0a\u7684\u9876\u70b9\uff08\u5373\u4e00\u4e2a\u9876\u70b9\u662f\u5426\u5728\u6808\u4e0a\uff09 \u6211\u4eec\u8fd8\u662f\u4ee5\u4e00\u4e2a\u5177\u4f53\u7684\u8fc7\u7a0b\u4e3a\u4f8b\u8bb2\u89e3 image image image image image image \u8be5\u7c7b\u4e3a\u6807\u51c6\u7684\u9012\u5f52 dfs() \u65b9\u6cd5\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5e03\u5c14\u7c7b\u578b\u7684\u6570\u7ec4 onStack[] \u6765\u4fdd\u5b58\u9012\u5f52\u8c03\u7528\u671f\u95f4\u6808\u4e0a\u7684 \u6240\u6709\u9876\u70b9\u3002\u5f53\u5b83\u627e\u5230\u4e00\u6761\u8fb9 v \u2192 w \u4e14 w \u5728\u6808\u4e2d\u65f6\uff0c\u5b83\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u6709\u5411\u73af\u3002\u73af\u4e0a\u7684\u6240\u6709\u9876\u70b9\u53ef\u4ee5\u901a\u8fc7 edgeTo[] \u4e2d\u7684\u94fe\u63a5\u5f97\u5230\u3002 \u5728\u6267\u884c dfs(G,v) \u65f6\uff0c\u67e5\u627e\u7684\u662f\u4e00\u6761\u7531\u8d77\u70b9\u5230 v \u7684\u6709\u5411\u8def\u5f84\u3002\u8981\u4fdd\u5b58\u8fd9\u6761\u8def\u5f84, DirectedCycle \u7ef4\u62a4\u4e86\u4e00\u4e2a\u7531\u9876\u70b9\u7d22\u5f15\u7684\u6570\u7ec4 onStack[] \uff0c\u4ee5\u6807\u8bb0\u9012\u5f52\u8c03\u7528\u7684\u6808\u4e0a\u7684\u6240\u6709\u9876\u70b9\uff08\u5728\u8c03\u7528 dfs(G,v) \u65f6\u5c06 onStack[v] \u8bbe\u4e3a True \uff0c\u5728\u8c03\u7528\u7ed3\u675f\u65f6\u5c06\u5176\u8bbe\u4e3a false \uff09\u3002 DirectedCycle \u540c\u65f6\u4e5f \u4f7f\u7528\u4e86\u4e00\u4e2a edgeTo[] \u6570\u7ec4\uff0c\u5728\u627e\u5230\u6709\u5411\u73af\u65f6\u8fd4\u56de\u73af\u4e2d\u7684\u6240\u6709\u9876\u70b9\uff0c","title":"1.\u5bfb\u627e\u6709\u5411\u73af"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#2_1","text":"\u5982\u4f55\u89e3\u51b3\u4f18\u5148\u7ea7\u9650\u5236\u4e0b\u7684\u8c03\u5ea6\u95ee\u9898\uff1f\u5176\u5b9e\u8fd9\u5c31\u662f\u62d3\u6251\u6392\u5e8f \u62d3\u6251\u6392\u5e8f\u7684\u5b9a\u4e49\uff1a\u7ed9\u5b9a\u4e00\u5e45\u6709\u5411\u56fe\uff0c\u5c06\u6240\u6709\u7684\u9876\u70b9\u6392\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u6709\u5411\u8fb9\u5747\u4ece\u6392\u5728\u524d\u9762\u7684\u5143\u7d20\u6307\u5411\u6392\u5728\u540e\u9762\u7684\u5143\u7d20\uff08\u6216\u8005\u8bf4\u660e\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff09 \u4e0b\u9762\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\uff08\u6392\u8bfe\u95ee\u9898\uff09 \u5b83\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5178\u578b\u5e94\u7528\uff0c\u6bd4\u5982\uff1a \u73b0\u5728\uff0c\u51c6\u5907\u5de5\u4f5c\u5df2\u7ecf\u5dee\u4e0d\u591a\u4e86\uff0c\u8bf7\u96c6\u4e2d\u6ce8\u610f\u529b\uff0c\u8fd9\u91cc\u7684\u601d\u60f3\u53ef\u80fd\u4e0d\u662f\u5f88\u597d\u7406\u89e3\u3002\u7d27\u8ddf\u6211\u7684\u601d\u8def\u3002 \u73b0\u5728\u9996\u5148\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u526f**\u6709\u5411\u65e0\u73af\u56fe**\uff0c\u786e\u4fdd\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff1b\u901a\u8fc7\u62d3\u6251\u6392\u5e8f\uff0c\u6211\u4eec\u6700\u7ec8\u5e0c\u671b\u5f97\u5230\u4e00\u7ec4\u9876\u70b9\u7684\u5148\u540e\u5173\u7cfb\uff0c\u6392\u5728\u524d\u9762\u7684\u5143\u7d20\u6307\u5411\u6392\u5728\u540e\u9762\u7684\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4efb\u610f\u7684\u4e00\u6761\u8fb9 v\u2014\u2014>w \uff0c\u6211\u4eec\u5f97\u5230\u7684\u7ed3\u679c\u5e94\u8be5\u4fdd\u8bc1 \u9876\u70b9v \u5728 \u9876\u70b9w \u524d\u9762\uff1b \u6211\u4eec\u4f7f\u7528 dfs \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c \u5728\u8c03\u7528 dfs(v) \u65f6 \uff0c\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\u5fc5\u6709\u5176\u4e00\uff1a dfs(w) \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7\u4e14\u5df2\u7ecf\u8fd4\u56de\u4e86\uff08\u6b64\u65f6 w \u5df2\u7ecf\u88ab\u6807\u8bb0\uff09 dfs(w) \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7\u4e14\u8fd8\u6ca1\u6709\u8fd4\u56de\uff08\u4ed4\u7ec6\u60f3\u60f3\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u5b58\u5728\u7684\uff09 dfs(w) \u8fd8\u6ca1\u6709\u88ab\u8c03\u7528\uff08 w \u8fd8\u6ca1\u6709\u88ab\u6807\u8bb0\uff09\uff0c\u6b64\u65f6\u60c5\u51b5\u5e76\u4e0d\u590d\u6742\uff0c\u63a5\u4e0b\u6765\u4f1a\u8c03\u7528 dfs(w) \uff0c\u7136\u540e\u8fd4\u56de dfs(w) \uff0c\u7136\u540e\u8c03\u7528 dfs(v) \u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7ed3\u8bba\uff1a dfs(w) \u59cb\u7ec8\u4f1a\u5728 dfs(v) \u4e4b\u524d\u5b8c\u6210\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5148\u5b8c\u6210 dfs \u7684\u9876\u70b9\u6392\u5728\u540e\u9762 \u8bf7\u786e\u4fdd\u4f60\u5b8c\u5168\u7406\u89e3\u4e86\u4e0a\u9762\u7684\u601d\u60f3\uff0c\u63a5\u4e0b\u6765\u5176\u5b9e\u5c31\u76f8\u5bf9\u5bb9\u6613\u4e86\u3002 \u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6808\uff0c\u6bcf\u5f53\u4e00\u4e2a\u9876\u70b9 dfs \u5b8c\u6210\u65f6\uff0c\u5c31\u5c06\u8fd9\u4e2a\u9876\u70b9\u538b\u5165\u6808\u3002 \u6700\u540e\uff0c\u51fa\u6808\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u987a\u5e8f \u5176\u5b9e\u5230\u8fd9\u91cc\u62d3\u6251\u6392\u5e8f\u57fa\u672c\u4e0a\u5c31\u5df2\u7ecf\u88ab\u6211\u4eec\u89e3\u51b3\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u62d3\u5c55\u4e00\u4e0b\uff0c\u7ed9\u51fa\u4e00\u4e9b\u5e38\u89c1\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c\u5176\u4e2d\u6211\u4eec\u521a\u624d\u8bf4\u5230\u7684\u5176\u5b9e\u53eb\u505a**\u9006\u540e\u5e8f\u6392\u5e8f**\u3002\u5b83\u4eec\u90fd\u662f\u57fa\u4e8e dfs \u3002 \u524d\u5e8f\uff1a\u5728\u9012\u5f52\u8c03\u7528\u4e4b\u524d\u5c06\u9876\u70b9\u52a0\u5165\u961f\u5217 \u540e\u5e8f\uff1a\u5728\u9012\u5f52\u8c03\u7528\u4e4b\u540e\u5c06\u9876\u70b9\u52a0\u5165\u961f\u5217 \u9006\u540e\u5e8f\uff1a\u5728\u9012\u5f52\u8c03\u7528\u4e4b\u540e\u5c06\u9876\u70b9\u538b\u5165\u6808 \u6211\u4eec\u5728\u8fd9\u91cc\u4e00\u5e76\u5b9e\u73b0\u8fd9\u4e09\u4e2a\u6392\u5e8f\u65b9\u6cd5\uff0c\u5728\u9012\u5f52\u4e2d\u5b83\u4eec\u8868\u73b0\u5f97\u5341\u5206\u7b80\u5355 \u606d\u559c\u4f60\uff0c\u5230\u8fd9\u513f\u6211\u4eec\u5df2\u7ecf\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0**\u62d3\u6251\u6392\u5e8f**\u3002 #include <stdio.h> #include <stdlib.h> #define MAXN 100001 #define MAXM 500001 #define true 1 #define false 0 typedef int status ; typedef int ElemType ; //\u8282\u70b9\u6570\u636e\u7ed3\u6784 typedef struct Node { ElemType elem ; struct Node * next ; } Node , * pNode ; //\u961f\u5217\u6570\u636e\u7ed3\u6784 typedef struct Queue { pNode front ; //\u6307\u5411\u961f\u5217\u5934\u90e8 pNode rear ; //\u6307\u5411\u961f\u5217\u5c3e\u90e8 int size ; //\u961f\u5217\u957f\u5ea6 } Queue , * pQueue ; //\u90bb\u63a5\u8868 typedef struct Vnode { pNode firstArc ; //\u8fb9\u8868\u5934\u6307\u9488 int innum ; //\u5165\u5ea6 } Vnode ; //\u56fe\u6570\u636e\u7ed3\u6784 typedef struct ALGraph { Vnode * adjList ; int vexnum ; //\u5b9a\u70b9\u6570 int arcnum ; //\u8fb9\u6570 } ALGraph , * pALGraph ; //\u521b\u5efa\u4e00\u4e2a\u961f\u5217 pQueue CreateQueue (); //\u5c06\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u961f\u5c3e ElemType AddNode ( pQueue queue , ElemType elem ); //\u5c06\u961f\u5934\u5143\u7d20\u51fa\u961f status DeleteQueueNode ( pQueue queue ); //\u5224\u65ad\u5f53\u524d\u961f\u5217\u662f\u5426\u4e3a\u7a7a int IsQueueEmpty ( pQueue queue ); //\u5220\u9664\u961f\u5217 void DeleteQueue ( pQueue queue ); //\u521b\u5efa\u4e00\u4e2a\u56fe\u7684\u90bb\u63a5\u8868\u7ed3\u6784 pALGraph CreateALGraph ( int n , int m ); //\u5220\u9664\u90bb\u63a5\u8868 status DeleteALGraph ( pALGraph G ); //\u8fdb\u884c\u62d3\u6251\u6392\u5e8f status TopSort ( pALGraph G , pQueue queue ); int main () { int T ; printf ( \"\u8bf7\u8f93\u5165T\uff1a\" ); scanf ( \"%d\" , & T ); while ( T -- ) { //\u8f93\u5165\u7684N\u548cM\u503c,\u5373\u9876\u70b9\u6570\u548c\u8fb9\u6570 int n , m ; printf ( \"\u8bf7\u8f93\u5165N\u548cM\u503c\" ); scanf ( \"%d %d\" , & n , & m ); pALGraph G = CreateALGraph ( n , m ); pQueue queue = CreateQueue (); if ( TopSort ( G , queue )){ printf ( \"Correct \\n \" ); } else { printf ( \"Wrong \\n \" ); } } return 0 ; } //\u521b\u5efa\u4e00\u4e2a\u961f\u5217 pQueue CreateQueue (){ //\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4 pQueue queue = ( pQueue ) malloc ( sizeof ( Queue )); if ( queue != NULL ){ queue -> front = NULL ; queue -> rear = NULL ; queue -> size = 0 ; } //\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\u5931\u8d25 else { printf ( \"\u5206\u914d\u5931\u8d25\" ); exit ( -1 ); } return queue ; } //\u5c06\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u961f\u5c3e ElemType AddNode ( pQueue queue , ElemType elem ){ //\u5206\u914d\u5185\u5b58\u7a7a\u95f4 pNode node = ( pNode ) malloc ( sizeof ( Node )); //\u5206\u914d\u6210\u529f if ( node != NULL ){ node -> elem = elem ; node -> next = NULL ; if ( IsQueueEmpty ( queue )){ queue -> front = node ; } else { queue -> rear -> next = node ; } queue -> rear = node ; queue -> size ++ ; } return elem ; } //\u5c06\u961f\u5934\u5143\u7d20\u51fa\u961f ElemType DeleteQueueNode ( pQueue queue ){ pNode node = queue -> front ; int elem = node -> elem ; //\u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a\u5219\u5220\u9664\u5934\u7ed3\u70b9 if ( IsQueueEmpty ( queue ) == false ){ queue -> front = queue -> front -> next ; free ( node ); //\u961f\u5217\u5927\u5c0f\u51cf\u4e00 queue -> size -- ; return elem ; } else { printf ( \"\u5220\u9664\u5931\u8d25\uff0c\u961f\u5217\u5df2\u7ecf\u4e3a\u7a7a\" ); return -1 ; } } //\u5224\u65ad\u5f53\u524d\u961f\u5217\u662f\u5426\u4e3a\u7a7a status IsQueueEmpty ( pQueue queue ){ //\u5982\u679c\u961f\u5217\u957f\u5ea6\u4e3a0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u961f\u5217\u5c31\u662f\u7a7a\u961f\u5217 if ( queue -> size == 0 ){ return true ; } //\u5982\u679c\u4e0d\u4e3a0\uff0c\u5219\u4e0d\u662f\u7a7a\u961f\u5217 else { return false ; } } //\u9500\u6bc1\u4e00\u4e2a\u961f\u5217 void DeleteQueue ( pQueue queue ){ while ( IsQueueEmpty ( queue ) == false ) { DeleteQueueNode ( queue ); } free ( queue ); } //\u521b\u5efa\u4e00\u4e2a\u56fe\u7684\u90bb\u63a5\u8868\u7ed3\u6784 pALGraph CreateALGraph ( int n , int m ){ //\u5faa\u73af\u53d8\u91cf int i ; //\u6bcf\u884c\u8f93\u5165\u7684\u4e24\u4e2a\u9876\u70b9 int u , v ; pNode node = ( pNode ) malloc ( sizeof ( Node )); Vnode * nodeHead = ( Vnode * ) malloc ( sizeof ( Vnode ) * MAXN ); nodeHead -> firstArc = node ; pALGraph G = ( pALGraph ) malloc ( sizeof ( ALGraph )); G -> vexnum = n ; G -> arcnum = m ; G -> adjList = nodeHead ; //\u521d\u59cb\u5316\u5165\u5ea6\u4e3a0 for ( i = 0 ; i < m ; i ++ ) { G -> adjList [ i ]. innum = 0 ; } for ( i = 0 ; i < m ; i ++ ) { //\u8f93\u5165\u4e24\u4e2a\u8bfe\u7a0b scanf ( \"%d %d\" , & u , & v ); //\u8f93\u5165\u7684\u8bfe\u7a0b\u5e8f\u53f7\u662f1-N\uff0c\u6240\u4ee5\u8981\u51cf\u4e00 u -- ; v -- ; pNode p = ( pNode ) malloc ( sizeof ( Node )); p -> elem = v ; p -> next = G -> adjList [ u ]. firstArc ; G -> adjList [ u ]. firstArc = p ; G -> adjList [ v ]. innum = G -> adjList [ v ]. innum + 1 ; } return G ; } status DeleteALGraph ( pALGraph G ){ int i ; pNode p ; for ( i = 0 ; i < G -> vexnum ; i ++ ) { p = G -> adjList [ i ]. firstArc ; while ( p != NULL ) { G -> adjList [ i ]. firstArc = p -> next ; free ( p ); p = G -> adjList [ i ]. firstArc ; } } printf ( \"delete ok!!\" ); return true ; } status TopSort ( pALGraph G , pQueue queue ){ int i ; //\u8bb0\u5f55\u88ab\u5220\u9664\u7684\u8282\u70b9 int count = 0 ; //\u961f\u5217 //\u628a\u5165\u5ea6\u4e3a0\u7684\u52a0\u5165\u5230\u961f\u5217 for ( i = 0 ; i < G -> vexnum ; i ++ ) { if ( G -> adjList [ i ]. innum == 0 ) { AddNode ( queue , i ); } } while ( ! IsQueueEmpty ( queue )){ //\u5220\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9 int elem = DeleteQueueNode ( queue ); count ++ ; int index ; pNode p ; //\u83b7\u53d6\u4e0eelem\u76f8\u8fde\u7684\u70b9 for ( p = G -> adjList [ elem ]. firstArc ; p != NULL ; p = p -> next ) { index = p -> elem ; int num = G -> adjList [ index ]. innum - 1 ; if ( num == 0 ){ AddNode ( queue , index ); } } } if ( count == G -> vexnum ) return true ; else return false ; } \u5230\u8fd9\u513f\uff0c\u6709\u5411\u73af\u7684\u68c0\u6d4b\u4e0e\u62d3\u6251\u6392\u5e8f\u7684\u5185\u5bb9\u5c31\u7ed3\u675f\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8003\u8651\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u6027\u95ee\u9898","title":"2.\u62d3\u6251\u6392\u5e8f"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#4","text":"","title":"4.\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#1_2","text":"\u56de\u60f3\u4e00\u4e0b\u6211\u4eec\u5728\u65e0\u5411\u56fe\u7684\u65f6\u5019\uff0c\u5f53\u65f6\u6211\u4eec\u5c31\u5229\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u89e3\u51b3\u4e86\u4e00\u5e45\u65e0\u5411\u56fe\u7684\u8fde\u901a\u95ee\u9898\u3002\u6839\u636e\u6df1\u641c\u80fd\u591f\u5230\u8fbe\u6240\u6709\u8fde\u901a\u7684\u9876\u70b9\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u662f\uff0c\u95ee\u9898\u53d8\u6210\u6709\u5411\u56fe\uff0c\u5c31\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u4e86\uff01\u4e0b\u9762\u5206\u522b\u662f\u65e0\u5411\u56fe\u548c\u6709\u5411\u56fe\u7684\u4e24\u4e2a\u4f8b\u5b50\uff1a \u65e0\u5411\u56fe\u7684\u5404\u8fde\u901a\u5206\u91cf \u5b9a\u4e49\u3002\u5982\u679c\u4e24\u4e2a\u9876\u70b9 v \u548c w \u662f\u4e92\u76f8\u53ef\u8fbe\u7684\uff0c\u5219\u79f0\u5b83\u4eec\u4e3a\u5f3a\u8fde\u901a\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65e2\u5b58\u5728\u4e00\u6761\u4ece v \u5230 w \u7684\u6709\u5411\u8def\u5f84\uff0c\u4e5f\u5b58\u5728\u4e00\u6761\u4ece w \u5230 v \u7684\u6709\u5411\u8def\u5f84\u3002\u5982\u679c\u4e00\u5e45\u6709\u5411\u56fe\u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u90fd\u662f\u5f3a \u8fde\u901a\u7684\uff0c\u5219\u79f0\u8fd9\u5e45\u6709\u5411\u56fe\u4e5f\u662f\u5f3a\u8fde\u901a\u7684\u3002 \u4ee5\u4e0b\u662f\u53e6\u4e00\u4e9b\u5f3a\u8fde\u901a\u7684\u4f8b\u5b50\uff1a \u5f3a\u8fde\u901a\u7684\u6709\u5411\u56fe","title":"1.\u5f3a\u8fde\u901a\u7684\u5b9a\u4e49"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#2_2","text":"\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5f3a\u8fde\u901a\u6027\u5176\u5b9e\u662f\u9876\u70b9\u4e4b\u95f4\u7684\u4e00\u79cd\u7b49\u4ef7\u5173\u7cfb\uff0c\u56e0\u4e3a\u5b83\u6709\u4ee5\u4e0b\u6027\u8d28 \u81ea\u53cd\u6027\uff1a\u4efb\u610f\u9876\u70b9 v \u548c\u81ea\u5df1\u90fd\u662f\u5f3a\u8fde\u901a\u7684 \u5bf9\u79f0\u6027\uff1a\u5982\u679c v \u548c w \u662f\u5f3a\u8fde\u901a\u7684\uff0c\u90a3\u4e48 w \u548c v \u4e5f\u662f\u5f3a\u8fde\u901a\u7684 \u4f20\u9012\u6027\uff1a\u5982\u679c v \u548c w \u662f\u5f3a\u8fde\u901a\u7684\u4e14 w \u548c x \u4e5f\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u90a3 \u4e48 v \u548c x \u4e5f\u662f\u5f3a\u8fde\u901a\u7684 \u56e0\u4e3a\u7b49\u4ef7\uff0c\u6240\u4ee5\u548c\u65e0\u5411\u56fe\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u5e45\u56fe\u5206\u4e3a\u82e5\u5e72\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u9876\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684\u3002\u8fd9\u6837\u7684\u8bdd\uff0c \u4efb\u610f\u7ed9\u5b9a\u4e24\u4e2a\u9876\u70b9\u5224\u65ad\u5b83\u4eec\u4e4b\u95f4\u7684\u5f3a\u8fde\u901a\u5173\u7cfb\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u5224\u65ad\u5b83\u4eec\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u5c31\u53ef\u4ee5\u4e86\uff01 \u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u8ba1\u4e00\u79cd\u7b97\u6cd5\u6765\u5b9e\u73b0\u6211\u4eec\u7684\u76ee\u6807\u2014\u2014\u2014\u2014 \u5c06\u4e00\u5e45\u56fe\u5206\u4e3a\u82e5\u5e72\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf \u3002\u6211\u4eec\u5148\u6765\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u7684\u76ee\u6807\uff1a image","title":"2.\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"algorithm/graph/topological_sort/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8EKosaraju%E7%AE%97%E6%B3%95/#3kosaraju","text":"Kosaraju\u7b97\u6cd5\u5c31\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u89e3\u51b3\u5f3a\u8fde\u901a\u6027\u95ee\u9898\u7684\u7b97\u6cd5\uff0c\u5b83\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u4e0d\u597d\u7406\u89e3**why**\uff0c\u5e0c\u671b\u4f60\u6253\u8d77\u7cbe\u795e\uff0c\u6211\u5e0c\u671b\u6211\u80fd\u591f\u628a\u5b83\u8bb2\u660e\u767d\uff08\u4e5f\u53ea\u662f\u5e0c\u671b\uff0c\u6211\u4f1a\u5c3d\u91cf\uff0c\u5982\u679c\u4e0d\u6e05\u695a\u7684\u8bdd\uff0c\u5f3a\u70c8\u5efa\u8bae\u7ed3\u5408**\u7b97\u6cd54**\u4e00\u8d77\u98df\u7528\uff09 \u56de\u5fc6\u4e00\u4e0b\u6211\u4eec\u4e4b\u524d\u5728\u65e0\u5411\u56fe\u7684\u90e8\u5206\u5982\u4f55\u89e3\u51b3\u8fde\u901a\u6027\u95ee\u9898\u7684\uff0c \u4e00\u6b21dfs\u80fd\u591f\u6070\u597d\u904d\u5386\u4e00\u4e2a\u8fde\u901a\u5206\u91cf \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 dfs \u6765\u8ba1\u6570\uff0c\u83b7\u53d6\u6bcf\u4e2a\u9876\u70b9\u7684 id[] ;\u6240\u4ee5\uff0c\u6211\u4eec\u5728\u89e3\u51b3\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u6027\u95ee\u9898\u65f6\uff0c\u4e5f\u5e0c\u671b\u80fd\u591f\u5229\u7528**\u4e00\u6b21dfs\u80fd\u591f\u6070\u597d\u904d\u5386\u4e00\u4e2a\u8fde\u901a\u5206\u91cf**\u7684\u6027\u8d28\uff1b\u4e0d\u8fc7\uff0c\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5b83\u5931\u6548\u4e86\uff0c\u6765\u770b\u4e00\u4e0b\u56fe\u4e00\uff1a \u56fe\u4e00 \u5728\u56fe\u4e00\u4e2d\uff0c dfs\u904d\u5386 \u4f1a\u5b58\u5728\u4e24\u79cd\u60c5\u51b5\uff1a \u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u5982\u679c dfs \u7684\u8d77\u70b9\u65f6 \u9876\u70b9A \uff0c\u90a3\u4e48\u4e00\u6b21 dfs\u904d\u5386 \u4f1a\u904d\u5386\u6574\u4e2a\u533a\u57df\u4e00\u548c\u533a\u57df\u4e8c\uff0c\u4f46\u662f\u533a\u57df\u4e00\u4e0e\u533a\u57df\u4e8c\u5e76\u4e0d\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u8fd9\u5c31\u662f\u6709\u5411\u56fe\u7ed9\u6211\u4eec\u5e26\u6765\u7684\u56f0\u96be\uff01 \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a \u5982\u679c dfs \u7684\u8d77\u70b9\u662f \u9876\u70b9D \uff0c\u5219\u7b2c\u4e00\u6b21 dfs \u4f1a\u904d\u5386\u533a\u57df\u4e8c\uff0c\u7b2c\u4e8c\u6b21 dfs \u4f1a\u904d\u5386\u533a\u57df\u4e00 \uff0c\u8fd9\u4e0d\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u5417\uff1f \u6240\u4ee5\uff0c\u7b2c\u4e8c\u4e2a\u60c5\u51b5\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u52aa\u529b\u7684\u65b9\u5411\uff01\u4e5f\u5c31\u662f**\u5982\u679c\u6211\u4eec\u4eba\u4e3a\u5730\uff0c\u5c06\u6240\u6709\u7684\u53ef\u80fd\u7684\u60c5\u51b5\u90fd\u53d8\u6210\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4e8b\u60c5\u4e0d\u5c31\u89e3\u51b3\u4e86\uff01** \u6709\u4e86\u65b9\u5411\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u4e00\u5e45\u771f\u5b9e\u7684\u6709\u5411\u56fe\u6848\u4f8b\uff0c\u5982\u56fe\u4e8c\u6240\u793a\uff0c\u8fd9\u662f\u4e00\u5e45\u6709\u5411\u56fe\uff0c\u5b83\u7684\u5404\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5728\u56fe\u4e2d\u7528\u7070\u8272\u6807\u8bb0\uff1b\u6211\u4eec\u7684\u64cd\u4f5c\u662f\u5c06\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u770b\u6210\u4e00\u4e2a**\u9876\u70b9\uff08\u6bd4\u8f83\u5927\u800c\u5df2\uff09 \uff0c\u90a3\u4e48\u4f1a\u4ea7\u751f\u4ec0\u4e48\u540e\u679c\u5462\uff1f**\u6211\u4eec\u7684\u539f\u59cb\u7684\u6709\u5411\u56fe\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff01 \u56fe\u4e8c ps:\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5b58\u5728\u73af\u5462\uff1f\u56e0\u4e3a\u524d\u63d0\u6211\u4eec\u628a\u6240\u6709\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u770b\u6210\u4e86\u4e00\u4e2a\u4e2a\u9876\u70b9\uff0c\u5982\u679c \u9876\u70b9A \u548c \u9876\u70b9B \u4e4b\u95f4\u5b58\u5728\u73af\uff0c\u90a3 A \u548c B \u5c31\u4f1a\u6784\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff01\u5b83\u4eec\u672c\u5e94\u5c5e\u4e8e\u4e00\u4e2a\u9876\u70b9\uff01 \u5728\u5f97\u5230\u4e00\u5e45\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\u4e4b\u540e\uff0c\u4e8b\u60c5\u6ca1\u6709\u90a3\u4e48\u590d\u6742\u4e86\u3002\u73b0\u5728\uff0c\u6211\u4eec\u518d\u56de\u60f3\u4e00\u4e0b\u6211\u4eec\u7684\u76ee\u7684\u2014\u2014\u2014\u2014 \u5728\u56fe\u4e00\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u533a\u57df\u4e8c\u5148\u8fdb\u884c dfs \uff0c\u4e5f\u5c31\u662f\u7bad\u5934\u6307\u5411\u7684\u533a\u57df\u5148\u8fdb\u884c dfs \u3002\u5728\u5c06\u4e00\u4e2a\u4e2a\u533a\u57df\u62bd\u8c61\u6210\u70b9\u540e\uff0c\u95ee\u9898\u5f52\u7ed3\u4e8e**\u5728\u4e00\u5e45\u6709\u5411\u65e0\u73af\u56fe\u4e2d\uff0c\u6211\u4eec\u8981\u627e\u5230\u4e00\u79cd\u987a\u5e8f\uff0c\u8fd9\u79cd\u987a\u5e8f\u7684\u89c4\u5219\u662f\u7bad\u5934\u6307\u5411\u7684\u9876\u70b9\u6392\u5728\u524d**\uff01 \u5230\u8fd9\u513f\uff0c\u6211\u4eec\u7a0d\u5fae\u597d\u597d\u60f3\u60f3\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\u627e\u5230\u4e00\u79cd\u8fdb\u884c dfs \u7684\u987a\u5e8f\uff0c\u8fd9\u79cd\u987a\u5e8f\uff0c\u662f\u4e0d\u662f\u548c\u6211\u4eec\u5728\u524d\u9762\u8bb2\u5230\u7684**\u67d0\u79cd\u6392\u5e8f**\u5341\u5206\u76f8\u4f3c\u5462\uff1f\u6211\u60f3\u4f60\u5df2\u7ecf\u4e0d\u96be\u60f3\u5230\u4e86\uff0c\u5c31\u662f**\u62d3\u6251\u6392\u5e8f**\uff01\u4f46\u662f**\u548c\u62d3\u6251\u6392\u5e8f\u662f\u5b8c\u5168\u76f8\u53cd\u7684\u3002** \u6211\u4eec\u628a\u7bad\u5934\u7406\u89e3\u4e3a\u4f18\u5148\u7ea7\uff0c\u5bf9\u4e8e\u9876\u70b9A\u6307\u5411\u9876\u70b9B\uff0c\u5219A\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8eB\u3002\u90a3\u4e48\u5bf9\u4e8e\u62d3\u6251\u6392\u5e8f\uff0c \u4f18\u5148\u7ea7\u9ad8\u8005\u5728\u524d \uff1b\u5bf9\u4e8e\u6211\u4eec\u7684\u4efb\u52a1\uff0c \u4f18\u5148\u7ea7\u4f4e\u8005\u5728\u524d \uff08\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u5c31\u662fdfs\u4e0d\u4f1a\u4ece\u4f18\u5148\u7ea7\u4f4e\u7684\u5730\u65b9\u8dd1\u5230\u4f18\u5148\u7ea7\u9ad8\u7684\u5730\u65b9\uff09 \u5bf9\u4e8e\u56fe\u4e8c\uff1a\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u5982\u56fe\u4e09\u6240\u793a\uff1a image \u5982\u679c\u6211\u4eec\u4ece \u9876\u70b91 \u5f00\u59cb\u8fdb\u884c dfs \uff0c\u4f9d\u6b21\u5411\u53f3\uff0c\u90a3\u4e48\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u6211\u4eec\u4e0d\u5e0c\u671b\u7684\u60c5\u51b5\uff01\u56e0\u4e3a\u7bad\u5934\u662f\u5355\u5411\u7684\uff01 \u6211\u60f3\uff0c\u5230\u8fd9\u513f\uff0c\u4f60\u5e94\u8be5\u5dee\u4e0d\u591a\u7406\u89e3\u6211\u7684\u610f\u601d\u4e86\u3002\u6211\u4eec\u8fd8\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u95ee\u9898\u2014\u2014\u2014\u2014 \u5982\u4f55\u83b7\u53d6\u62d3\u6251\u6392\u5e8f\u7684\u53cd\u5e8f\uff1f \u5176\u5b9e\u89e3\u51b3\u65b9\u6cd5\u5f88\u7b80\u5355\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe G ,\u6211\u4eec\u5148\u53d6\u53cd\uff08reverse\u65b9\u6cd5\uff09\uff0c\u5c06\u56fe G \u7684\u6240\u6709\u8fb9\u7684\u987a\u5e8f\u98a0\u5012\uff0c\u7136\u540e\u83b7\u53d6\u53d6\u53cd\u540e\u7684\u56fe\u7684**\u9006\u540e\u5e8f\u6392\u5e8f\uff08\u6211\u4eec\u4e0d\u80fd\u79f0\u4e3a\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u4e3a\u771f\u5b9e\u60c5\u51b5\u662f\u6709\u73af\u7684\uff09**\uff1b\u6700\u540e\uff0c\u6211\u4eec\u5229\u7528\u521a\u624d\u83b7\u5f97\u7684\u9876\u70b9\u987a\u5e8f\u5bf9\u539f\u56fe G \u8fdb\u884c dfs \u5373\u53ef\uff0c\u8fd9\u65f6\u5b83\u7684\u539f\u7406\u4e0e\u4e0a\u4e00\u7bc7\u6587\u7ae0\u65e0\u5411\u56fe\u7684\u5b8c\u5168\u4e00\u81f4\uff01 \u6700\u540e\uff0c\u603b\u7ed3\u4e00\u4e0bKosaraju\u7b97\u6cd5\u7684\u5b9e\u73b0\u6b65\u9aa4\uff1a 1.\u5728\u7ed9\u5b9a\u7684\u4e00\u5e45\u6709\u5411\u56fe G \u4e2d\uff0c\u4f7f\u7528 DepthFirstOrder \u6765\u8ba1\u7b97\u5b83\u7684\u53cd\u5411\u56fe GR \u7684\u9006\u540e\u5e8f\u6392\u5217\u3002 2.\u5728 G \u4e2d\u8fdb\u884c\u6807\u51c6\u7684\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4f46\u662f\u8981\u6309\u7167\u521a\u624d\u8ba1\u7b97\u5f97\u5230\u7684\u987a\u5e8f\u800c\u975e\u6807\u51c6\u7684\u987a\u5e8f\u6765\u8bbf\u95ee \u6240\u6709\u672a\u88ab\u6807\u8bb0\u7684\u9876\u70b9\u3002 \u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\u53ea\u5728\u65e0\u5411\u56fe\u7684\u5b9e\u73b0 CC\u7c7b \u4e2d\u589e\u52a0\u4e86\u4e24\u884c\u4ee3\u7801\uff08\u6539\u53d8dfs\u7684\u987a\u5e8f\uff09 \u6700\u540e\uff0c\u9644\u4e0a\u4e00\u5e45\u5177\u4f53\u7684\u64cd\u4f5c\u8fc7\u7a0b\uff1a #include <iostream> #include <cstdio> #include <vector> #include <cstring> using namespace std ; const int max_v = 100 ; int V ; vector < int > g [ max_v ]; vector < int > rg [ max_v ]; vector < int > vs ; bool used [ max_v ]; int cmp [ max_v ]; void add_edge ( int from , int to ) { g [ from ]. push_back ( to ); rg [ to ]. push_back ( from ); } void dfs ( int v ) { used [ v ] = true ; for ( int i = 0 ; i < g [ v ]. size (); i ++ ){ if ( ! used [ g [ v ][ i ]]){ dfs ( g [ v ][ i ]); } } vs . push_back ( v ); } void rdfs ( int v , int k ) { used [ v ] = true ; cmp [ v ] = k ; for ( int i = 0 ; i < rg [ v ]. size (); i ++ ){ if ( ! used [ rg [ v ][ i ]]){ rdfs ( rg [ v ][ i ], k ); } } } int scc () { memset ( used , 0 , sizeof ( used )); vs . clear (); for ( int v = 0 ; v < V ; v ++ ){ if ( ! used [ v ]){ dfs ( v ); } } memset ( used , 0 , sizeof ( used )); int k = 0 ; for ( int i = vs . size () -1 ; i >= 0 ; i -- ){ if ( ! used [ vs [ i ]]){ rdfs ( vs [ i ], k ++ ); } } return k ; } int main () { scanf ( \"%d\" , & V ); int m ; scanf ( \"%d\" , & m ); int u , v ; for ( int i = 0 ; i < m ; i ++ ){ scanf ( \"%d%d\" , & u , & v ); add_edge ( u , v ); } int ans = scc (); printf ( \"%d \\n \" , ans ); return 0 ; }","title":"3.Kosaraju\u7b97\u6cd5"},{"location":"algorithm/string/string%E5%9F%BA%E7%A1%80/","text":"\u4e00. string\u7684\u6784\u9020\u51fd\u6570\u7684\u5f62\u5f0f\uff1a string str\uff1a\u751f\u6210\u7a7a\u5b57\u7b26\u4e32 string s(str)\uff1a\u751f\u6210\u5b57\u7b26\u4e32\u4e3astr\u7684\u590d\u5236\u54c1 string s(str, strbegin,strlen)\uff1a\u5c06\u5b57\u7b26\u4e32str\u4e2d\u4ece\u4e0b\u6807strbegin\u5f00\u59cb\u3001\u957f\u5ea6\u4e3astrlen\u7684\u90e8\u5206\u4f5c\u4e3a\u5b57\u7b26\u4e32\u521d\u503c string s(cstr, char_len)\uff1a\u4ee5C_string\u7c7b\u578bcstr\u7684\u524dchar_len\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(num ,c)\uff1a\u751f\u6210num\u4e2ac\u5b57\u7b26\u7684\u5b57\u7b26\u4e32 string s(str, stridx)\uff1a\u5c06\u5b57\u7b26\u4e32str\u4e2d\u4ece\u4e0b\u6807stridx\u5f00\u59cb\u5230\u5b57\u7b26\u4e32\u7ed3\u675f\u7684\u4f4d\u7f6e\u4f5c\u4e3a\u5b57\u7b26\u4e32\u521d\u503c eg: string str1 ; //\u751f\u6210\u7a7a\u5b57\u7b26\u4e32 string str2 ( \"123456789\" ); //\u751f\u6210\"1234456789\"\u7684\u590d\u5236\u54c1 string str3 ( \"12345\" , 0 , 3 ); //\u7ed3\u679c\u4e3a\"123\" string str4 ( \"012345\" , 5 ); //\u7ed3\u679c\u4e3a\"01234\" string str5 ( 5 , '1' ); //\u7ed3\u679c\u4e3a\"11111\" string str6 ( str2 , 2 ); //\u7ed3\u679c\u4e3a\"3456789\" #include <iostream> #include <string> using namespace std ; void test1 () { string str1 ; //\u751f\u6210\u7a7a\u5b57\u7b26\u4e32 string str2 ( \"123456789\" ); //\u751f\u6210\"1234456789\"\u7684\u590d\u5236\u54c1 string str3 ( \"12345\" , 0 , 3 ); //\u7ed3\u679c\u4e3a\"123\" string str4 ( \"0123456\" , 5 ); //\u7ed3\u679c\u4e3a\"01234\" string str5 ( 5 , '1' ); //\u7ed3\u679c\u4e3a\"11111\" string str6 ( str2 , 2 ); //\u7ed3\u679c\u4e3a\"3456789\" cout << \"str2:\" << str2 << endl ; cout << \"str3:\" << str3 << endl ; cout << \"str4:\" << str4 << endl ; cout << \"str5:\" << str5 << endl ; cout << \"str6:\" << str6 << endl ; } int main () { test1 (); return 0 ; } \u4e8c. string\u7684\u5927\u5c0f\u548c\u5bb9\u91cf\uff1a size()\u548clength()\uff1a\u8fd4\u56destring\u5bf9\u8c61\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u4ed6\u4eec\u6267\u884c\u6548\u679c\u76f8\u540c\u3002 max_size()\uff1a\u8fd4\u56destring\u5bf9\u8c61\u6700\u591a\u5305\u542b\u7684\u5b57\u7b26\u6570\uff0c\u8d85\u51fa\u4f1a\u629b\u51falength_error\u5f02\u5e38 capacity()\uff1a\u91cd\u65b0\u5206\u914d\u5185\u5b58\u4e4b\u524d\uff0cstring\u5bf9\u8c61\u80fd\u5305\u542b\u7684\u6700\u5927\u5b57\u7b26\u6570 void test2 () { string s ( \"1234567\" ); cout << \"size=\" << s . size () << endl ; cout << \"length=\" << s . length () << endl ; cout << \"max_size=\" << s . max_size () << endl ; cout << \"capacity=\" << s . capacity () << endl ; } \u4e09. string\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff1a\uff1a 1. C ++\u5b57\u7b26\u4e32\u652f\u6301\u5e38\u89c1\u7684\u6bd4\u8f83\u64cd\u4f5c\u7b26\uff08>,>=,<,<=,==,!=\uff09\uff0c\u751a\u81f3\u652f\u6301string\u4e0eC-string\u7684\u6bd4\u8f83(\u5982 str<\u201dhello\u201d)\u3002 \u5728\u4f7f\u7528>,>=,<,<=\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u65f6\u5019\u662f\u6839\u636e\u201c\u5f53\u524d\u5b57\u7b26\u7279\u6027\u201d\u5c06\u5b57\u7b26\u6309\u5b57\u5178\u987a\u5e8f\u8fdb\u884c\u9010\u4e00\u5f97 \u6bd4\u8f83\u3002\u5b57\u5178\u6392\u5e8f\u9760\u524d\u7684\u5b57\u7b26\u5c0f\uff0c \u6bd4\u8f83\u7684\u987a\u5e8f\u662f\u4ece\u524d\u5411\u540e\u6bd4\u8f83\uff0c\u9047\u5230\u4e0d\u76f8\u7b49\u7684\u5b57\u7b26\u5c31\u6309\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u4e24\u4e2a\u5b57\u7b26\u7684\u6bd4\u8f83\u7ed3\u679c\u786e\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5927\u5c0f(\u524d\u9762\u51cf\u540e\u9762) \u540c\u65f6\uff0cstring (\u201caaaa\u201d) <string(aaaaa)\u3002 \u53e6\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u6bd4\u8f83\u51fd\u6570\u662f\u6210\u5458\u51fd\u6570compare()\u3002\u4ed6\u652f\u6301\u591a\u53c2\u6570\u5904\u7406\uff0c\u652f\u6301\u7528\u7d22\u5f15\u503c\u548c\u957f\u5ea6\u5b9a\u4f4d\u5b50\u4e32\u6765\u8fdb\u884c\u6bd4\u8f83\u3002 \u4ed6\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u6765\u8868\u793a\u6bd4\u8f83\u7ed3\u679c\uff0c\u8fd4\u56de\u503c\u610f\u4e49\u5982\u4e0b\uff1a0\uff1a\u76f8\u7b49 1\uff1a\u5927\u4e8e -1\uff1a\u5c0f\u4e8e (A\u7684ASCII\u7801\u662f65\uff0ca\u7684ASCII\u7801\u662f97) void test3 () { // (A\u7684ASCII\u7801\u662f65\uff0ca\u7684ASCII\u7801\u662f97) // \u524d\u9762\u51cf\u53bb\u540e\u9762\u7684ASCII\u7801\uff0c>0\u8fd4\u56de1\uff0c<0\u8fd4\u56de-1\uff0c\u76f8\u540c\u8fd4\u56de0 string A ( \"aBcd\" ); string B ( \"Abcd\" ); string C ( \"123456\" ); string D ( \"123dfg\" ); // \"aBcd\" \u548c \"Abcd\"\u6bd4\u8f83------ a > A cout << \"A.compare(B)\uff1a\" << A . compare ( B ) << endl ; // \u7ed3\u679c\uff1a1 // \"cd\" \u548c \"Abcd\"\u6bd4\u8f83------- c > A cout << \"A.compare(2, 3, B):\" << A . compare ( 2 , 3 , B ) << endl ; // \u7ed3\u679c\uff1a1 // \"cd\" \u548c \"cd\"\u6bd4\u8f83 cout << \"A.compare(2, 3, B, 2, 3):\" << A . compare ( 2 , 3 , B , 2 , 3 ) << endl ; // \u7ed3\u679c\uff1a0 // \u7531\u7ed3\u679c\u770b\u51fa\u6765\uff1a0\u8868\u793a\u4e0b\u6807\uff0c3\u8868\u793a\u957f\u5ea6 // \"123\" \u548c \"123\"\u6bd4\u8f83 cout << \"C.compare(0, 3, D, 0, 3)\" << C . compare ( 0 , 3 , D , 0 , 3 ) << endl ; // \u7ed3\u679c\uff1a0 } \u56db. string\u7684\u63d2\u5165\uff1apush_back() \u548c insert() void test4 () { string s1 ; // \u5c3e\u63d2\u4e00\u4e2a\u5b57\u7b26 s1 . push_back ( 'a' ); s1 . push_back ( 'b' ); s1 . push_back ( 'c' ); cout << \"s1:\" << s1 << endl ; // s1:abc // insert(pos,char):\u5728\u5236\u5b9a\u7684\u4f4d\u7f6epos\u524d\u63d2\u5165\u5b57\u7b26char s1 . insert ( s1 . begin (), '1' ); cout << \"s1:\" << s1 << endl ; // s1:1abc } \u4e94\u3001string\u62fc\u63a5\u5b57\u7b26\u4e32\uff1aappend() & + \u64cd\u4f5c\u7b26 void test5 () { // \u65b9\u6cd5\u4e00\uff1aappend() string s1 ( \"abc\" ); s1 . append ( \"def\" ); cout << \"s1:\" << s1 << endl ; // s1:abcdef // \u65b9\u6cd5\u4e8c\uff1a+ \u64cd\u4f5c\u7b26 string s2 = \"abc\" ; /*s2 += \"def\";*/ string s3 = \"def\" ; s2 += s3 . c_str (); cout << \"s2:\" << s2 << endl ; // s2:abcdef } \u516d\u3001 string\u7684\u904d\u5386\uff1a\u501f\u52a9\u8fed\u4ee3\u5668 \u6216\u8005 \u4e0b\u6807\u6cd5 void test6 () { string s1 ( \"abcdef\" ); // \u8c03\u7528\u4e00\u6b21\u6784\u9020\u51fd\u6570 // \u65b9\u6cd5\u4e00\uff1a \u4e0b\u6807\u6cd5 for ( int i = 0 ; i < s1 . size () ; i ++ ) { cout << s1 [ i ]; } cout << endl ; // \u65b9\u6cd5\u4e8c\uff1a\u6b63\u5411\u8fed\u4ee3\u5668 string :: iterator iter = s1 . begin (); for ( ; iter < s1 . end () ; iter ++ ) { cout <<* iter ; } cout << endl ; // \u65b9\u6cd5\u4e09\uff1a\u53cd\u5411\u8fed\u4ee3\u5668 string :: reverse_iterator riter = s1 . rbegin (); for ( ; riter < s1 . rend () ; riter ++ ) { cout <<* riter ; } cout << endl ; } \u4e03\u3001 string\u7684\u5220\u9664\uff1aerase() 1. iterator erase(iterator p);//\u5220\u9664\u5b57\u7b26\u4e32\u4e2dp\u6240\u6307\u7684\u5b57\u7b26 iterator erase(iterator first, iterator last);//\u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u8fed\u4ee3\u5668 \u533a\u95f4[first,last)\u4e0a\u6240\u6709\u5b57\u7b26 string& erase(size_t pos = 0, size_t len = npos);//\u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u4ece\u7d22\u5f15 \u4f4d\u7f6epos\u5f00\u59cb\u7684len\u4e2a\u5b57\u7b26 void clear();//\u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u7b26 void test6 () { string s1 = \"123456789\" ; // s1.erase(s1.begin()+1); // \u7ed3\u679c\uff1a13456789 // s1.erase(s1.begin()+1,s1.end()-2); // \u7ed3\u679c\uff1a189 s1 . erase ( 1 , 6 ); // \u7ed3\u679c\uff1a189 string :: iterator iter = s1 . begin (); while ( iter != s1 . end () ) { cout <<* iter ; * iter ++ ; } cout << endl ; } \u516b\u3001 string\u7684\u5b57\u7b26\u66ff\u6362\uff1a string& replace(size_t pos, size_t n, const char *s);//\u5c06\u5f53\u524d\u5b57\u7b26\u4e32 \u4ecepos\u7d22\u5f15\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26\uff0c\u66ff\u6362\u6210\u5b57\u7b26\u4e32s string& replace(size_t pos, size_t n, size_t n1, char c); //\u5c06\u5f53\u524d\u5b57\u7b26\u4e32\u4ecepos\u7d22\u5f15\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26\uff0c\u66ff\u6362\u6210n1\u4e2a\u5b57\u7b26c string& replace(iterator i1, iterator i2, const char* s);//\u5c06\u5f53\u524d\u5b57\u7b26\u4e32[i1,i2)\u533a\u95f4\u4e2d\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32s void test7 () { string s1 ( \"hello,world!\" ); cout << s1 . size () << endl ; // \u7ed3\u679c\uff1a12 s1 . replace ( s1 . size () -1 , 1 , 1 , '.' ); // \u7ed3\u679c\uff1ahello,world. // \u8fd9\u91cc\u76846\u8868\u793a\u4e0b\u6807 5\u8868\u793a\u957f\u5ea6 s1 . replace ( 6 , 5 , \"girl\" ); // \u7ed3\u679c\uff1ahello,girl. // s1.begin(),s1.begin()+5 \u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 s1 . replace ( s1 . begin (), s1 . begin () + 5 , \"boy\" ); // \u7ed3\u679c\uff1aboy,girl. cout << s1 << endl ; } \u4e5d\u3001 string\u7684\u5927\u5c0f\u5199\u8f6c\u6362\uff1atolower()\u548ctoupper()\u51fd\u6570 #include <iostream> #include <string> using namespace std; int main() { string s = \"ABCDEFG\"; for( int i = 0; i < s.size(); i++ ) { s[i] = tolower(s[i]); } cout<<s<<endl; return 0; } \u5341\u3001 string\u7684\u67e5\u627e\uff1afind 1. size_t find ( constchar * s , size_t pos = 0 ) const ; //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684pos\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u5b50\u4e32s\uff0c\u8fd4\u56de\u627e\u5230\u7684\u4f4d\u7f6e\u7d22\u5f15\uff0c -1 \u8868\u793a\u67e5\u627e\u4e0d\u5230\u5b50\u4e32 2. size_t find ( charc , size_t pos = 0 ) const ; //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684pos\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u5b57\u7b26c\uff0c\u8fd4\u56de\u627e\u5230\u7684\u4f4d\u7f6e\u7d22\u5f15\uff0c -1 \u8868\u793a\u67e5\u627e\u4e0d\u5230\u5b57\u7b26 3. size_t rfind ( constchar * s , size_t pos = npos ) const ; //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684pos\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\uff0c\u53cd\u5411\u67e5\u627e\u5b50\u4e32s\uff0c\u8fd4\u56de\u627e\u5230\u7684\u4f4d\u7f6e\u7d22\u5f15\uff0c -1 \u8868\u793a\u67e5\u627e\u4e0d\u5230\u5b50\u4e32 4. size_t rfind ( charc , size_t pos = npos ) const ; //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684pos\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\uff0c\u53cd\u5411\u67e5\u627e\u5b57\u7b26c\uff0c\u8fd4\u56de\u627e\u5230\u7684\u4f4d\u7f6e\u7d22\u5f15\uff0c-1\u8868\u793a\u67e5\u627e\u4e0d\u5230\u5b57\u7b26 5. size_tfind_first_of ( const char * s , size_t pos = 0 ) const ; //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684pos\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u5b50\u4e32s\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u627e\u5230\u7684\u4f4d\u7f6e\u7d22\u5f15\uff0c-1\u8868\u793a\u67e5\u627e\u4e0d\u5230\u5b57\u7b26 6. size_tfind_first_not_of ( const char * s , size_t pos = 0 ) const ; //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684pos\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u4f4d\u4e8e\u5b50\u4e32s\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u627e\u5230\u7684\u4f4d\u7f6e\u7d22\u5f15\uff0c-1\u8868\u793a\u67e5\u627e\u4e0d\u5230\u5b57\u7b26 7. size_t find_last_of ( const char * s , size_t pos = npos ) const ; //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684pos\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u6700\u540e\u4e00\u4e2a\u4f4d\u4e8e\u5b50\u4e32s\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u627e\u5230\u7684\u4f4d\u7f6e\u7d22\u5f15\uff0c-1\u8868\u793a\u67e5\u627e\u4e0d\u5230\u5b57\u7b26 8. size_tfind_last_not_of ( const char * s , size_t pos = npos ) const ; //\u5728\u5f53\u524d\u5b57\u7b26\u4e32\u7684pos\u7d22\u5f15\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u6700\u540e\u4e00\u4e2a\u4e0d\u4f4d\u4e8e\u5b50\u4e32s\u7684\u5b57\u7b26\uff0c\u8fd4\u56de\u627e\u5230\u7684\u4f4d\u7f6e\u7d22\u5f15\uff0c-1\u8868\u793a\u67e5\u627e\u4e0d\u5230\u5b50\u4e32 void test8() { string s(\"dog bird chicken bird cat\"); //\u5b57\u7b26\u4e32\u67e5\u627e-----\u627e\u5230\u540e\u8fd4\u56de\u9996\u5b57\u6bcd\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4e0b\u6807 // 1. \u67e5\u627e\u4e00\u4e2a\u5b57\u7b26\u4e32 cout << s.find(\"chicken\") << endl; // \u7ed3\u679c\u662f\uff1a9 // 2. \u4ece\u4e0b\u6807\u4e3a6\u5f00\u59cb\u627e\u5b57\u7b26'i'\uff0c\u8fd4\u56de\u627e\u5230\u7684\u7b2c\u4e00\u4e2ai\u7684\u4e0b\u6807 cout << s.find('i',6) << endl; // \u7ed3\u679c\u662f\uff1a11 // 3. \u4ece\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u5f00\u59cb\u67e5\u627e\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7684\u8fd8\u662f\u9996\u5b57\u6bcd\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4e0b\u6807 cout << s.rfind(\"chicken\") << endl; // \u7ed3\u679c\u662f\uff1a9 // 4. \u4ece\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u5f00\u59cb\u67e5\u627e\u5b57\u7b26 cout << s.rfind('i') << endl; // \u7ed3\u679c\u662f\uff1a18-------\u56e0\u4e3a\u662f\u4ece\u672b\u5c3e\u5f00\u59cb\u67e5\u627e\uff0c\u6240\u4ee5\u8fd4\u56de\u7b2c\u4e00\u6b21\u627e\u5230\u7684\u5b57\u7b26 // 5. \u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c5e\u4e8e\u5b57\u7b26\u4e32s\u7684\u5b57\u7b26 cout << s.find_first_of(\"13br98\") << endl; // \u7ed3\u679c\u662f\uff1a4---b // 6. \u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u5c5e\u4e8e\u5b57\u7b26\u4e32s\u7684\u5b57\u7b26------\u5148\u5339\u914ddog\uff0c\u7136\u540ebird\u5339\u914d\u4e0d\u5230\uff0c\u6240\u4ee5\u6253\u53704 cout << s.find_first_not_of(\"hello dog 2006\") << endl; // \u7ed3\u679c\u662f\uff1a4 cout << s.find_first_not_of(\"dog bird 2006\") << endl; // \u7ed3\u679c\u662f\uff1a9 // 7. \u5728\u8be5\u5b57\u7b26\u4e32\u6700\u540e\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c5e\u4e8e\u5b57\u7b26\u4e32s\u7684\u5b57\u7b26 cout << s.find_last_of(\"13r98\") << endl; // \u7ed3\u679c\u662f\uff1a19 // 8. \u5728\u8be5\u5b57\u7b26\u4e32\u6700\u540e\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u5c5e\u4e8e\u5b57\u7b26\u4e32s\u7684\u5b57\u7b26------\u5148\u5339\u914dt--a---c\uff0c\u7136\u540e\u7a7a\u683c\u5339\u914d\u4e0d\u5230\uff0c\u6240\u4ee5\u6253\u537021 cout << s.find_last_not_of(\"teac\") << endl; // \u7ed3\u679c\u662f\uff1a21 } \u5341\u4e00\u3001 string\u7684\u6392\u5e8f\uff1a sort(s.begin(),s.end()) #include <iostream> #include <algorithm> #include <string> using namespace std ; void test9 () { string s = \"cdefba\" ; sort ( s . begin (), s . end ()); cout << \"s:\" << s << endl ; // \u7ed3\u679c\uff1aabcdef } \u5341\u4e8c\u3001 string\u7684\u5206\u5272/\u622a\u53d6\u5b57\u7b26\u4e32\uff1astrtok() strtok():\u5206\u5272\u5b57\u7b26\u4e32 void test10 () { char str [] = \"I,am,a,student; hello world!\" ; const char * split = \",; !\" ; char * p2 = strtok ( str , split ); while ( p2 != NULL ) { cout << p2 << endl ; p2 = strtok ( NULL , split ); } }","title":"String\u57fa\u7840"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%281%29%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/","text":"hash\u5165\u95e8 \u00b6 \u9996\u5148\u4ecb\u7ecd\u4e00\u4e0bhash\uff1f \u4e8b\u5b9e\u4e0a\u662f\u4e00\u79cd\u53eb\u505a**\u7684\u75c5\u6bd2 \u4ee5\u4e0b\u8bb2\u5230\u7684hash\u90fd\u662fOI/ACM\u4e2d\u6700\u5e38\u7528\u5230\u7684hash\u65b9\u6cd5\uff1a\u8fdb\u5236\u54c8\u5e0c \u505a\u6cd5\uff1a \u9996\u5148\u8bbe\u4e00\u4e2a\u8fdb\u5236\u6570base\uff0c\u5e76\u8bbe\u4e00\u4e2a\u6a21\u6570mod \u800c\u54c8\u5e0c\u5176\u5b9e\u5c31\u662f\u628a\u4e00\u4e2a\u6570\u8f6c\u5316\u4e3a\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u662fbase\u8fdb\u5236\u7684\uff0c\u50a8\u5b58\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u6ce8\u610f\u4e00\u4e0b\u5728\u5b58\u5165\u7684\u65f6\u5019\u53d6\u6a21\u4e00\u4e0b\u5373\u53ef \u6bd4\u5982\u8bf4\u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32orzc \u679a\u4e3e\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4f4d\uff0c\u4e0ebase\u76f8\u4e58\u5f97\u5230ans\uff0c\u7136\u540emod\u4e00\u4e0b\uff0c\u5c31\u5f97\u5230orzc\u7684\u54c8\u5e0c\u503c \u4f46\u662f\u54c8\u5e0c\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u5f0a\u7aef\uff1a \u54c8\u5e0c\u51b2\u7a81 \u4ec0\u4e48\u662f\u54c8\u5e0c\u51b2\u7a81\u5462\uff1f \u5c31\u6bd4\u5982\u8bf4orzc\u7684\u54c8\u5e0c\u503c\u662f233\uff0c\u800corzhjw\u7684\u54c8\u5e0c\u503c\u4e5f\u662f233 \u90a3\u4e48\u6211\u4eec\u5728\u67e5\u8be2\u7684\u65f6\u5019\u4ee3\u7801\u4f1a\u8ba4\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u76f8\u540c\u7684\uff0c\u4f46\u663e\u7136\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u540c\u7684 \u51cf\u5c11\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\u5f88\u591a \u81ea\u7136\u6ea2\u51fa\u6cd5\uff0c\u53cc\u54c8\u5e0c\u4e4b\u7c7b\u7684 \u770b\u4e00\u9053\u4f8b\u9898\u7406\u89e3\u4e00\u4e0b \u6d1b\u8c37P3370 \u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c \u4e8b\u5b9e\u4e0a\u5982\u679c\u7406\u89e3\u4e86\u521a\u521a\u8bb2\u7684hash\u7684\u539f\u7406\u7684\u8bdd\uff0c\u8fd9\u9053\u9898\u5c31\u5f88\u6c34\u4e86\uff0c\u56e0\u4e3a\u672c\u6765\u5c31\u662f\u6a21\u677f\u9898 \u7528\u4e00\u6bb5hash\u7684\u4ee3\u7801\u518d\u6765\u5de9\u56fa\u4e00\u4e0b\u521a\u624d\u7684\u77e5\u8bc6 #define base 233 #define inf 1<<30 ull mod = inf ; //\u5b9a\u4e49\u4e00\u4e2a\u5927\u6570(\u6700\u597d\u662f\u8d28\u6570)\u4f5c\u4e3a\u6a21\u6570\uff0c\u8fd9\u91cc\u7528\u7684\u662f1<<30 //\u5b9a\u4e49\u4e00\u4e2abase\u8fdb\u5236\uff0c\u8fd9\u91cc\u662f233 il ull hash ( char s []){ ll ans = 0 , len = strlen ( s ); for ( ll i = 0 ; i < len ; i ++ ){ ans = ( base * ans + ( ull ) s [ i ]) % mod ; } return ans ; //\u679a\u4e3e\u8be5\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4f4d\uff0c\u4e0ebase\u76f8\u4e58\uff0c\u8f6c\u5316\u4e3abase\u8fdb\u5236\uff0c\u52a0(ull)\u662f\u4e3a\u4e86\u9632\u6b62\u7206\u6808\u641e\u51fa\u4e00\u4e2a\u8d1f\u6570\uff0c(ull)\u662f\u65e0\u7b26\u53f7\u7684\uff0c\u4f46\u5176\u5b9e\u52a0\u4e86\u4e00\u4e2aull\u662f\u53ef\u4ee5\u4e0d\u7528mod\u7684\uff0c\u52a0\u4e2amod\u66f4\u4fdd\u9669 //\u7136\u800c\u52a0\u4e86mod\u4f1a\u5f88\u7384\u5b66\uff0c\u83ab\u540d\u6bd4\u4e0d\u52a0mod\u6162\u4e86300\u591ams } \u6700\u540e\u8d34\u4e00\u4e0b\u521a\u521a\u7684\u4f8b\u9898\u7684\u4e24\u79cd\u89e3\u6cd5\uff1a \u89e3\u6cd51\uff1a\u5355hash/\u81ea\u7136\u6ea2\u51fa\u6cd5 \u8fd9\u91cc\u5c31\u5f53\u4e00\u79cd\u89e3\u6cd5\u6765\u8bf4\u5427 \u56e0\u4e3a\u4ee3\u7801\u5dee\u5f02\u4e0d\u5927 \u8fd9\u9053\u9898\u7684\u8bdd\u5355hash mod\u5f00\u5927\u8d28\u6570\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u4f46\u662f\u5728\u5927\u591a\u6570\u96be\u4e00\u4e9b\u7684\u9898\u76ee\u91cc\u9762\u662f\u4f1a\u88ab\u5361\u6389\u7684 #include <cstdio> #include <cstring> #include <algorithm> #define ll int #define inf 1<<30 #define mt(x,y) memset(x,y,sizeof(x)) #define il inline #define ull unsigned long long il ll max ( ll x , ll y ){ return x > y ? x : y ;} il ll min ( ll x , ll y ){ return x < y ? x : y ;} il ll abs ( ll x ){ return x > 0 ? x : - x ;} il ll swap ( ll x , ll y ){ ll t = x ; x = y ; y = t ;} il void read ( ll & x ){ x = 0 ; ll f = 1 ; char c = getchar (); while ( c < '0' || c > '9' ){ if ( c == '-' ) f =- f ; c = getchar ();} while ( c >= '0' && c <= '9' ){ x = x * 10 + c - '0' ; c = getchar ();} x *= f ; } using namespace std ; #define N 10001 #define base 233 ull mod = 212370440130137957l l ; ll f [ N ], n ; char a [ N ]; //ull hash(char s[]){ ll ans=0,len=strlen(s); for(ll i=0;i<len;i++){ ans=((base*ans+(ull)s[i])+mod)%mod; } return ans; } //\u8fd9\u4e2a\u662f\u5355hash+\u5927\u8d28\u6570mod\uff0c\u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u4f46\u662f\u4f1a\u6bd4\u8f83\u6162 ull hash ( char s []){ //\u81ea\u7136\u6ea2\u51fa ull ans = 0 , len = strlen ( s ); for ( ll i = 0 ; i < len ; i ++ ){ ans = base * ans + ( ull ) s [ i ]; //\u8fd9\u91cc\u4e0d\u4f7f\u7528mod\u8ba9\u5b83\u81ea\u7136\u6ea2\u51fa\uff0c\u5b9a\u4e49\u4e3aull\u7684\u6570\u5728\u8d85\u8fc72^32\u7684\u65f6\u5019\u4f1a\u81ea\u7136\u6ea2\u51fa //\u5982\u679c\u628a\u8fd9\u4e2a\u6362\u6210\u4e0a\u9762\u7684hash\u5c31\u4f1a400ms+ //\u6240\u4ee5\u8bf4\u81ea\u7136\u6ea2\u51fa\u5927\u6cd5\u597d } return ans ; } int main (){ read ( n ); for ( ll i = 1 ; i <= n ; i ++ ){ scanf ( \"%s\" , a ); f [ i ] = hash ( a ); } sort ( f + 1 , f + n + 1 ); ll ans = 1 ; for ( ll i = 1 ; i < n ; i ++ ){ if ( f [ i ] != f [ i + 1 ]) ans ++ ; } printf ( \"%d \\n \" , ans ); return 0 ; } \u89e3\u6cd52\uff1a\u53cchash \u5176\u5b9e\u5c31\u662f\u7528\u4e24\u4e2a\u4e0d\u540c\u7684mod\u6765\u7b97hash\uff0c\u54c8\u5e0c\u51b2\u7a81\u7684\u6982\u7387\u662f\u964d\u4f4e\u4e86\u5f88\u591a\uff0c\u4e0d\u8fc7\u5e38\u6570\u5927\uff0c\u5bb9\u6613\u88ab\u5361\uff0c\u8fd9\u9053\u9898\u8981700ms+ \u672c\u4eba\u8fd8\u662f\u66f4\u63a8\u8350\u81ea\u7136\u6ea2\u51fa\u6cd5 #include <cstdio> #include <cstring> #include <algorithm> #define ll int #define inf 1<<30 #define mt(x,y) memset(x,y,sizeof(x)) #define il inline #define ull unsigned long long il ll max ( ll x , ll y ){ return x > y ? x : y ;} il ll min ( ll x , ll y ){ return x < y ? x : y ;} il ll abs ( ll x ){ return x > 0 ? x : - x ;} il ll swap ( ll x , ll y ){ ll t = x ; x = y ; y = t ;} il void read ( ll & x ){ x = 0 ; ll f = 1 ; char c = getchar (); while ( c < '0' || c > '9' ){ if ( c == '-' ) f =- f ; c = getchar ();} while ( c >= '0' && c <= '9' ){ x = x * 10 + c - '0' ; c = getchar ();} x *= f ; } using namespace std ; #define N 10001 #define base 233 ull mod1 = 212370440130137957l l ; ull mod2 = inf ; ll n ; char a [ N ]; struct node { ll x , y ;} f [ N ]; il ull hash1 ( char s []){ ll ans = 0 , len = strlen ( s ); for ( ll i = 0 ; i < len ; i ++ ){ ans = ( base * ans + ( ull ) s [ i ]) % mod1 ; } return ans ; } il ull hash2 ( char s []){ ll ans = 0 , len = strlen ( s ); for ( ll i = 0 ; i < len ; i ++ ){ ans = ( base * ans + ( ull ) s [ i ]) % mod2 ; } return ans ; } il bool cmp1 ( node a , node b ){ return a . x < b . x ;} il bool cmp2 ( node a , node b ){ return a . y < b . y ;} int main (){ read ( n ); for ( ll i = 1 ; i <= n ; i ++ ){ scanf ( \"%s\" , a ); f [ i ]. x = hash1 ( a ); f [ i ]. y = hash2 ( a ); } sort ( f + 1 , f + n + 1 , cmp1 ); sort ( f + 1 , f + n + 1 , cmp2 ); ll ans = 1 ; for ( ll i = 1 ; i < n ; i ++ ){ if ( f [ i ]. x != f [ i + 1 ]. x || f [ i ]. y != f [ i + 1 ]. y ) ans ++ ; } printf ( \"%d \\n \" , ans ); return 0 ; } hash\u8fdb\u9636\uff1a\u4f7f\u7528\u5b57\u7b26\u4e32hash\u4e71\u641e\u7684\u59ff\u52bf \u00b6 \u67e5\u8be2\u5b50\u4e32hash\u503c \u00b6 \u5fc5\u5907\u7684\u5165\u95e8\u64cd\u4f5c\uff0c\u56e0\u4e3aOI\u4e2d\u7528\u5230\u7684hash\u4e00\u822c\u90fd\u662f**\u8fdb\u5236\u54c8\u5e0c**\uff0c\u56e0\u4e3a\u5b83\u6709\u4e00\u4e9b\u6781\u5176\u65b9\u4fbf\u7684\u6027\u8d28\uff0c\u6bd4\u5982\u8bf4\uff0c\u662f\u5177\u6709\u548c\u524d\u7f00\u548c\u5dee\u4e0d\u591a\u7684\u6027\u8d28\u7684\u3002 \u5047\u8bbe\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00hash\u503c\u8bb0\u4e3ah[i]h[i]h[i]\uff0c\u6211\u4eechash\u65f6\u4f7f\u7528\u7684\u8fdb\u5236\u6570\u4e3abasebasebase\uff0c\u90a3\u4e48\u663e\u7136h[i]=h[i\u22121]\u2217base+s[i]h[i]=h[i-1]*base+s[i]h[i]=h[i\u22121]\u2217base+s[i] \u8bb0p[i]p[i]p[i]\u8868\u793abasebasebase\u7684iii\u6b21\u65b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0fO(1)O(1)O(1)\u5f97\u5230\u4e00\u4e2a\u5b50\u4e32\u7684hash\u503c\uff08\u8bbe\u8fd9\u4e2a\u5b50\u4e32\u4e3as[l]...s[r]) typedef unsigned long long ull ; ull get_hash ( int l , int r ) { return h [ r ] - h [ l - 1 ] * p [ r - l + 1 ]; } \u53ef\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u8fdb\u884c\u8fdb\u5236\u54c8\u5e0c\u7684\u8fc7\u7a0b\u672c\u8d28\u4e0a\u5c31\u662f\u628a\u539f\u5148\u5f97\u5230\u7684\u54c8\u5e0c\u503c\u5728basebasebase\u8fdb\u5236\u4e0a\u5f3a\u884c\u5de6\u79fb\u4e00\u4f4d\uff0c\u7136\u540e\u653e\u8fdb\u53bb\u5f53\u524d\u7684\u8fd9\u4e2a\u5b57\u7b26\u3002 \u73b0\u5728\u7684\u76ee\u7684\u662f\uff0c\u53d6\u51falll\u5230rrr\u8fd9\u6bb5\u5b50\u4e32\u7684hash\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0ch[l\u22121]h[l-1]h[l\u22121]\u8fd9\u4e00\u6bb5\u662f\u6ca1\u6709\u7528\u7684\uff0c\u6211\u4eec\u628a\u5728h[r]h[r]h[r]\u8fd9\u4e00\u4f4d\u4e0a\uff0ch[l\u22121]h[l-1]h[l\u22121]\u8fd9\u5806\u5b57\u7b26\u4e32\u7684hash\u503c\u505a\u7684\u5de6\u79fb\u8fd0\u7b97\u5168\u90e8\u8fd8\u539f\u7ed9h[l\u22121]h[l-1]h[l\u22121]\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053h[l\u22121]h[l-1]h[l\u22121]\u5728h[r]h[r]h[r]\u4e2d\u7684hash\u503c\uff0c\u90a3\u4e48\u51cf\u53bb\u5373\u53ef\u3002\uff08\u7b80\u5355\u7684\u5bb9\u65a5\u601d\u60f3\uff09 \u8fd9\u662f\u57fa\u672c\u64cd\u4f5c\uff0c\u73b0\u5728\u6765\u770b\u4e00\u4e2a\u8fd9\u4e2a\u7684\u62d3\u5c55\u95ee\u9898\u3002 \u9898\u610f \u00b6 \u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u6bcf\u6b21\u8be2\u95ee\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\u5220\u9664\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u540e\u7684hash\u503c\uff08\u5220\u9664\u7684\u5b57\u7b26\u65f6\u7ed9\u5b9a\u7684\uff09 \u8981\u6c42\u5fc5\u987bO\u56de\u7b54\u8be2\u95ee Sol \u00b6 \u5220\u9664\u64cd\u4f5c\uff1f\u90a3\u4e0d\u80fd\u50cf\u4e0a\u9762\u90a3\u6837\u5b50\u7b80\u5355\u7c97\u66b4\u7684\u6765\u641e\u4e86\uff0c\u4f46\u662f\u5176\u5b9e\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\u3002 \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8be2\u95ee\u7684\u533a\u95f4\u4e3a[l,r]\uff0c\u5220\u9664\u7684\u5b57\u7b26\u4e3ax\uff08\u6307\u4f4d\u7f6e\uff0c\u4e0d\u662f\u5b57\u7b26\uff09 \u7c7b\u6bd4\u4e0a\u9762\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5148O(1)\u5f97\u5230\u533a\u95f4[l,x\u22121]\u548c\u533a\u95f4[x+1,r]\u7684hash\u503c\uff0c\u90a3\u4e48\u73b0\u5728\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u628a\u8fd9\u4e24\u6bb5\u62fc\u8d77\u6765\u4e86\uff0c\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u8fdb\u5236hash\uff0c\u6240\u4ee5\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5f3a\u884c\u5c06\u524d\u9762\u7684\u533a\u95f4\u5f3a\u884c\u5de6\u79fbr\u2212x\u4f4d\u5c31\u597d\u3002 \u4ee3\u7801\u5b9e\u73b0\u4e5f\u5f88\u7b80\u5355 typedef unsigned long long ull ; ull get_hash ( int l , int r ) { return h [ r ] - h [ l - 1 ] * p [ r - l + 1 ]; } ull get_s ( int l , int r , int x ) { return get_hash ( l , x - 1 ) * p [ r - x ] + get_hash ( x + 1 , r ); } \u8fd9\u9898\u7684\u539f\u9898\u662f LOJ#2823. \u300cBalticOI 2014 Day 1\u300d\u4e09\u4e2a\u670b\u53cb \uff0c\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u77e5\u9053\u4e0a\u9762\u8fd9\u4e2a\u4e5f\u5c31\u4e0d\u96be\u4e86 \u7528hash\u6c42 \u6700\u957f\u56de\u6587\u5b50\u4e32 /\u56de\u6587\u5b50\u4e32\u6570 \u00b6 \u9a6c\u62c9\u8f66\uff01\u53ef\u4ee5O(n)\uff01 \u53ef\u662f\u9a6c\u62c9\u8f66\u4ee3\u7801\u96be\u5ea6\u8f83\u9ad8 \u8fd9\u65f6\u5019\u5c31\u5f97\u9760hash\u6765\u6c34 \u6211\u4eec\u77e5\u9053\uff0c\u56de\u6587\u5b50\u4e32\u662f\u5177\u6709\u5355\u8c03\u6027\u7684 \u5982\u679c\u5b57\u7b26\u4e32s[l...r]\u4e3a\u56de\u6587\u5b50\u4e32\uff0c\u90a3\u4e48s[x...y](l<x,y<r)\u4e5f\u4e00\u5b9a\u662f\u56de\u6587\u5b50\u4e32 \u5355\u8c03\u6027\uff01\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u4e8c\u5206\uff1f \u6211\u4eec\u6682\u65f6\u53ea\u8ba8\u8bba\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u56de\u6587\u5b50\u4e32\u3002\uff08\u4e8b\u5b9e\u4e0a\uff0c\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u5b50\u4e32\u4e0e\u5947\u6570\u7684\u53ea\u662f\u5904\u7406\u4e0a\u7684\u4e00\u4e9b\u7ec6\u8282\u4e0d\u540c\uff0c\u4ec5\u6b64\u800c\u5df2\uff09 \u8003\u8651\u679a\u4e3e\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u70b9\uff0c\u5e76\u4e8c\u5206\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\uff08\u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\uff0c\u4e8c\u5206\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u7684\u00bd\u53ef\u80fd\u4f1a\u66f4\u597d\u5199\u4e00\u70b9\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u4f7f\u7528\u4e0a\u6587\u63d0\u5230\u7684O(1)\u67e5\u8be2\u5b50\u4e32hash\u503c\u7684\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5O(1)\u5224\u65ad\u4e8c\u5206\u5f97\u5230\u7684\u8fd9\u4e2a\u5b50\u4e32\u662f\u4e0d\u662f\u56de\u6587\u5b50\u4e32\u4e86\u3002 \u5bf9\u4e8e\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u5b50\u4e32\uff0c\u679a\u4e3e\u4e2d\u70b9\u5de6\u8fb9/\u53f3\u8fb9\u7684\u5b57\u7b26\u5373\u53ef \u6548\u7387\u662fO(nlogn)\u7684\uff0c\u590d\u6742\u5ea6\u8f83\u9a6c\u62c9\u8f66\u7b97\u6cd5\u6bd4\u8f83\u900a\u8272\uff0c\u4e0d\u8fc7\u5982\u679c\u9a6c\u62c9\u8f66\u7b97\u6cd5\u6253\u6302\u6216\u8005\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\uff0chash\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u7136\u540e\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u9002\u5408\u50cf\u6211\u8fd9\u79cd\u4e0b\u6807\u603b\u662f\u641e\u9519\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u51fa\u6b63\u4e32\u548c\u53cd\u4e32\u7684hash\u503c\uff0c\u7136\u540e\u6bcf\u6b21\u6839\u636e\u4e8c\u5206\u51fa\u6765\u7684\u957f\u5ea6\u8ba1\u7b97\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u8d77\u6b62\uff0c\u5224\u65ad\u6b63\u4e32\u548c\u53cd\u4e32\u7684hash\u503c\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002\uff08\u8fd9\u6837\u5c31\u4e0d\u7528\u7814\u7a76\u6076\u5fc3\u7684\u4e0b\u6807\u4e86...\u7814\u7a76\u4e0b\u6807\u8fd8\u5f97\u5206\u5947\u5076\u8ba8\u8bba...\uff09 \u5b57\u7b26\u4e32\u7684\u5f88\u591a\u7279\u6027\u662f\u5177\u6709\u5355\u8c03\u6027\u7684\uff0c\u4e8c\u5206\u6c42\u89e3\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u601d\u8def\uff0c\u914d\u5408\u54c8\u5e0c\u8fdb\u884c\u5224\u65ad\u64cd\u4f5c\u4e00\u822c\u53ef\u4ee5\u505a\u5230\u5728O(nlogn)O(nlogn)O(nlogn)\u6548\u7387\u5185\u5b8c\u6210\u95ee\u9898 \u4f8b\u9898\uff1a SP7586 NUMOFPAL - Number of Palindromes \u7ec3\u4e60\uff1a LOJ#2452. \u300cPOI2010\u300d\u53cd\u5bf9\u79f0 Antisymmetry \u4f8b\u9898\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; typedef unsigned long long ull ; #define N 10100 #define base 13131 char s [ N ]; ull h1 [ N ], p [ N ], h2 [ N ], ans = 0 ; int n ; ull gh1 ( int l , int r ) { return h1 [ r ] - h1 [ l - 1 ] * p [ r - l + 1 ]; } ull gh2 ( int l , int r ) { return h2 [ l ] - h2 [ r + 1 ] * p [ r - l + 1 ]; } ull query1 ( int x ) { //\u5947 int l = 1 , r = min ( x , n - x ); while ( l <= r ) { int mid = ( l + r ) >> 1 ; if ( gh1 ( x - mid , x + mid ) == gh2 ( x - mid , x + mid )) l = mid + 1 ; else r = mid - 1 ; } return r ; } ull query2 ( int x ) { //\u5076 int l = 1 , r = min ( x , n - x ); while ( l <= r ) { int mid = ( l + r ) >> 1 ; if ( gh1 ( x - mid + 1 , x + mid ) == gh2 ( x - mid + 1 , x + mid )) l = mid + 1 ; else r = mid - 1 ; } return r ; } int main () { scanf ( \"%s\" , s + 1 ); p [ 0 ] = 1 ; n = strlen ( s + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { h1 [ i ] = h1 [ i - 1 ] * base + s [ i ]; p [ i ] = p [ i - 1 ] * base ; } for ( int i = n ; i ; i -- ) h2 [ i ] = h2 [ i + 1 ] * base + s [ i ]; for ( int i = 1 ; i < n ; ++ i ) { ans += query1 ( i ) + query2 ( i ); } printf ( \"%llu \\n \" , ans + n ); } \u7528hash\u4ee3\u66ffkmp\u7b97\u6cd5 \u00b6 \u6211\u4eec\u8fd9\u91cc\u4e0d\u8bb2kmp\u7b97\u6cd5\uff0c\u6211\u4eec\u5229\u7528hash\u6765\u4ee3\u66ffkmp\u7b97\u6cd5\u6c42\u89e3\u5355\u6a21\u5f0f\u4e32\u5339\u914d\u95ee\u9898\u3002 \u4f46\u662fkmp\u7b97\u6cd5\u7684next\u6570\u7ec4\u771f\u7684\u5f88\u5999\uff01\u53ef\u4ee5\u89e3\u51b3\u5f88\u591a\u795e\u5947\u7684\u4e1c\u897f\uff0c\u5f3a\u70c8\u63a8\u8350\u53bb\u5b66\u5b66\uff01 \u597d\u4e86\uff0c\u6b65\u5165\u6b63\u9898\u3002 \u5355\u6a21\u5f0f\u4e32\u5339\u914d\u95ee\u9898\u662f\u4ec0\u4e48\uff1f \u7ed9\u51fa\u4e24\u4e2a\u5b57\u7b26\u4e32s1\u548cs2\uff0c\u5176\u4e2ds2\u4e3as1\u7684\u5b50\u4e32\uff0c\u6c42s2\u5728s1\u4e2d\u51fa\u73b0\u591a\u5c11\u6b21/\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u5982\u679c\u6709\u8ba4\u771f\u770b\u8fc7\u8be5\u7bc7\u6587\u7ae0\u7684\u7b2c\u4e00\u5b50\u76ee\u7684\u8bdd\uff0c\u5e94\u8be5\u4e0d\u96be\u60f3\u5230\u8fd9\u9898\u7684hash\u505a\u6cd5\u3002 \u5177\u4f53\u505a\u6cd5\u662f\u9884\u5904\u7406\u51fa\u6765\u4e24\u4e2a\u4e32\u7684hash\u503c\uff0c\u56e0\u4e3a\u6c42\u7684\u662fs2\u5728s1\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5339\u914d\u7684\u957f\u5ea6\u88ab\u538b\u7f29\u5230\u4e86s2\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3es2\u5728s1\u4e2d\u7684\u8d77\u70b9\uff0c\u770b\u770b\u540e\u9762\u4e00\u6bb5\u957f\u5ea6\u4e3alen\u7684\u533a\u95f4\u7684hash\u503c\u548cs2\u7684hash\u503c\u4e00\u4e0d\u4e00\u6837\u5c31\u597d\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n+m)\u7684\uff01\u548ckmp\u7b97\u6cd5\u4e00\u6837\uff01 \u4f8b\u9898\uff1a LOJ #103. \u5b50\u4e32\u67e5\u627e \u7ec3\u4e60\uff1a UVA10298 Power Strings \u4f8b\u9898\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; #define N 1000010 #define ull unsigned long long #define base 233 ull h [ N ], p [ N ], ha ; char s1 [ N ], s2 [ N ]; int main () { scanf ( \"%s%s\" , s1 + 1 , s2 + 1 ); int n = strlen ( s1 + 1 ), m = strlen ( s2 + 1 ); for ( int i = 1 ; i <= m ; ++ i ) ha = ha * base + ( ull ) s2 [ i ]; p [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { h [ i ] = h [ i - 1 ] * base + ( ull ) s1 [ i ]; p [ i ] = p [ i - 1 ] * base ; } int l = 1 , r = m , ans = 0 ; while ( r <= n ) { if ( h [ r ] - h [ l - 1 ] * p [ m ] == ha ) ++ ans ; ++ l , ++ r ; } printf ( \"%d \\n \" , ans ); }","title":"String\u8fdb\u9636(1)\u5b57\u7b26\u4e32\u54c8\u5e0c"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%281%29%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#hash","text":"\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0bhash\uff1f \u4e8b\u5b9e\u4e0a\u662f\u4e00\u79cd\u53eb\u505a**\u7684\u75c5\u6bd2 \u4ee5\u4e0b\u8bb2\u5230\u7684hash\u90fd\u662fOI/ACM\u4e2d\u6700\u5e38\u7528\u5230\u7684hash\u65b9\u6cd5\uff1a\u8fdb\u5236\u54c8\u5e0c \u505a\u6cd5\uff1a \u9996\u5148\u8bbe\u4e00\u4e2a\u8fdb\u5236\u6570base\uff0c\u5e76\u8bbe\u4e00\u4e2a\u6a21\u6570mod \u800c\u54c8\u5e0c\u5176\u5b9e\u5c31\u662f\u628a\u4e00\u4e2a\u6570\u8f6c\u5316\u4e3a\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u662fbase\u8fdb\u5236\u7684\uff0c\u50a8\u5b58\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u6ce8\u610f\u4e00\u4e0b\u5728\u5b58\u5165\u7684\u65f6\u5019\u53d6\u6a21\u4e00\u4e0b\u5373\u53ef \u6bd4\u5982\u8bf4\u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32orzc \u679a\u4e3e\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4f4d\uff0c\u4e0ebase\u76f8\u4e58\u5f97\u5230ans\uff0c\u7136\u540emod\u4e00\u4e0b\uff0c\u5c31\u5f97\u5230orzc\u7684\u54c8\u5e0c\u503c \u4f46\u662f\u54c8\u5e0c\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u5f0a\u7aef\uff1a \u54c8\u5e0c\u51b2\u7a81 \u4ec0\u4e48\u662f\u54c8\u5e0c\u51b2\u7a81\u5462\uff1f \u5c31\u6bd4\u5982\u8bf4orzc\u7684\u54c8\u5e0c\u503c\u662f233\uff0c\u800corzhjw\u7684\u54c8\u5e0c\u503c\u4e5f\u662f233 \u90a3\u4e48\u6211\u4eec\u5728\u67e5\u8be2\u7684\u65f6\u5019\u4ee3\u7801\u4f1a\u8ba4\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u76f8\u540c\u7684\uff0c\u4f46\u663e\u7136\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u540c\u7684 \u51cf\u5c11\u54c8\u5e0c\u51b2\u7a81\u7684\u65b9\u6cd5\u5f88\u591a \u81ea\u7136\u6ea2\u51fa\u6cd5\uff0c\u53cc\u54c8\u5e0c\u4e4b\u7c7b\u7684 \u770b\u4e00\u9053\u4f8b\u9898\u7406\u89e3\u4e00\u4e0b \u6d1b\u8c37P3370 \u3010\u6a21\u677f\u3011\u5b57\u7b26\u4e32\u54c8\u5e0c \u4e8b\u5b9e\u4e0a\u5982\u679c\u7406\u89e3\u4e86\u521a\u521a\u8bb2\u7684hash\u7684\u539f\u7406\u7684\u8bdd\uff0c\u8fd9\u9053\u9898\u5c31\u5f88\u6c34\u4e86\uff0c\u56e0\u4e3a\u672c\u6765\u5c31\u662f\u6a21\u677f\u9898 \u7528\u4e00\u6bb5hash\u7684\u4ee3\u7801\u518d\u6765\u5de9\u56fa\u4e00\u4e0b\u521a\u624d\u7684\u77e5\u8bc6 #define base 233 #define inf 1<<30 ull mod = inf ; //\u5b9a\u4e49\u4e00\u4e2a\u5927\u6570(\u6700\u597d\u662f\u8d28\u6570)\u4f5c\u4e3a\u6a21\u6570\uff0c\u8fd9\u91cc\u7528\u7684\u662f1<<30 //\u5b9a\u4e49\u4e00\u4e2abase\u8fdb\u5236\uff0c\u8fd9\u91cc\u662f233 il ull hash ( char s []){ ll ans = 0 , len = strlen ( s ); for ( ll i = 0 ; i < len ; i ++ ){ ans = ( base * ans + ( ull ) s [ i ]) % mod ; } return ans ; //\u679a\u4e3e\u8be5\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4f4d\uff0c\u4e0ebase\u76f8\u4e58\uff0c\u8f6c\u5316\u4e3abase\u8fdb\u5236\uff0c\u52a0(ull)\u662f\u4e3a\u4e86\u9632\u6b62\u7206\u6808\u641e\u51fa\u4e00\u4e2a\u8d1f\u6570\uff0c(ull)\u662f\u65e0\u7b26\u53f7\u7684\uff0c\u4f46\u5176\u5b9e\u52a0\u4e86\u4e00\u4e2aull\u662f\u53ef\u4ee5\u4e0d\u7528mod\u7684\uff0c\u52a0\u4e2amod\u66f4\u4fdd\u9669 //\u7136\u800c\u52a0\u4e86mod\u4f1a\u5f88\u7384\u5b66\uff0c\u83ab\u540d\u6bd4\u4e0d\u52a0mod\u6162\u4e86300\u591ams } \u6700\u540e\u8d34\u4e00\u4e0b\u521a\u521a\u7684\u4f8b\u9898\u7684\u4e24\u79cd\u89e3\u6cd5\uff1a \u89e3\u6cd51\uff1a\u5355hash/\u81ea\u7136\u6ea2\u51fa\u6cd5 \u8fd9\u91cc\u5c31\u5f53\u4e00\u79cd\u89e3\u6cd5\u6765\u8bf4\u5427 \u56e0\u4e3a\u4ee3\u7801\u5dee\u5f02\u4e0d\u5927 \u8fd9\u9053\u9898\u7684\u8bdd\u5355hash mod\u5f00\u5927\u8d28\u6570\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u4f46\u662f\u5728\u5927\u591a\u6570\u96be\u4e00\u4e9b\u7684\u9898\u76ee\u91cc\u9762\u662f\u4f1a\u88ab\u5361\u6389\u7684 #include <cstdio> #include <cstring> #include <algorithm> #define ll int #define inf 1<<30 #define mt(x,y) memset(x,y,sizeof(x)) #define il inline #define ull unsigned long long il ll max ( ll x , ll y ){ return x > y ? x : y ;} il ll min ( ll x , ll y ){ return x < y ? x : y ;} il ll abs ( ll x ){ return x > 0 ? x : - x ;} il ll swap ( ll x , ll y ){ ll t = x ; x = y ; y = t ;} il void read ( ll & x ){ x = 0 ; ll f = 1 ; char c = getchar (); while ( c < '0' || c > '9' ){ if ( c == '-' ) f =- f ; c = getchar ();} while ( c >= '0' && c <= '9' ){ x = x * 10 + c - '0' ; c = getchar ();} x *= f ; } using namespace std ; #define N 10001 #define base 233 ull mod = 212370440130137957l l ; ll f [ N ], n ; char a [ N ]; //ull hash(char s[]){ ll ans=0,len=strlen(s); for(ll i=0;i<len;i++){ ans=((base*ans+(ull)s[i])+mod)%mod; } return ans; } //\u8fd9\u4e2a\u662f\u5355hash+\u5927\u8d28\u6570mod\uff0c\u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u4f46\u662f\u4f1a\u6bd4\u8f83\u6162 ull hash ( char s []){ //\u81ea\u7136\u6ea2\u51fa ull ans = 0 , len = strlen ( s ); for ( ll i = 0 ; i < len ; i ++ ){ ans = base * ans + ( ull ) s [ i ]; //\u8fd9\u91cc\u4e0d\u4f7f\u7528mod\u8ba9\u5b83\u81ea\u7136\u6ea2\u51fa\uff0c\u5b9a\u4e49\u4e3aull\u7684\u6570\u5728\u8d85\u8fc72^32\u7684\u65f6\u5019\u4f1a\u81ea\u7136\u6ea2\u51fa //\u5982\u679c\u628a\u8fd9\u4e2a\u6362\u6210\u4e0a\u9762\u7684hash\u5c31\u4f1a400ms+ //\u6240\u4ee5\u8bf4\u81ea\u7136\u6ea2\u51fa\u5927\u6cd5\u597d } return ans ; } int main (){ read ( n ); for ( ll i = 1 ; i <= n ; i ++ ){ scanf ( \"%s\" , a ); f [ i ] = hash ( a ); } sort ( f + 1 , f + n + 1 ); ll ans = 1 ; for ( ll i = 1 ; i < n ; i ++ ){ if ( f [ i ] != f [ i + 1 ]) ans ++ ; } printf ( \"%d \\n \" , ans ); return 0 ; } \u89e3\u6cd52\uff1a\u53cchash \u5176\u5b9e\u5c31\u662f\u7528\u4e24\u4e2a\u4e0d\u540c\u7684mod\u6765\u7b97hash\uff0c\u54c8\u5e0c\u51b2\u7a81\u7684\u6982\u7387\u662f\u964d\u4f4e\u4e86\u5f88\u591a\uff0c\u4e0d\u8fc7\u5e38\u6570\u5927\uff0c\u5bb9\u6613\u88ab\u5361\uff0c\u8fd9\u9053\u9898\u8981700ms+ \u672c\u4eba\u8fd8\u662f\u66f4\u63a8\u8350\u81ea\u7136\u6ea2\u51fa\u6cd5 #include <cstdio> #include <cstring> #include <algorithm> #define ll int #define inf 1<<30 #define mt(x,y) memset(x,y,sizeof(x)) #define il inline #define ull unsigned long long il ll max ( ll x , ll y ){ return x > y ? x : y ;} il ll min ( ll x , ll y ){ return x < y ? x : y ;} il ll abs ( ll x ){ return x > 0 ? x : - x ;} il ll swap ( ll x , ll y ){ ll t = x ; x = y ; y = t ;} il void read ( ll & x ){ x = 0 ; ll f = 1 ; char c = getchar (); while ( c < '0' || c > '9' ){ if ( c == '-' ) f =- f ; c = getchar ();} while ( c >= '0' && c <= '9' ){ x = x * 10 + c - '0' ; c = getchar ();} x *= f ; } using namespace std ; #define N 10001 #define base 233 ull mod1 = 212370440130137957l l ; ull mod2 = inf ; ll n ; char a [ N ]; struct node { ll x , y ;} f [ N ]; il ull hash1 ( char s []){ ll ans = 0 , len = strlen ( s ); for ( ll i = 0 ; i < len ; i ++ ){ ans = ( base * ans + ( ull ) s [ i ]) % mod1 ; } return ans ; } il ull hash2 ( char s []){ ll ans = 0 , len = strlen ( s ); for ( ll i = 0 ; i < len ; i ++ ){ ans = ( base * ans + ( ull ) s [ i ]) % mod2 ; } return ans ; } il bool cmp1 ( node a , node b ){ return a . x < b . x ;} il bool cmp2 ( node a , node b ){ return a . y < b . y ;} int main (){ read ( n ); for ( ll i = 1 ; i <= n ; i ++ ){ scanf ( \"%s\" , a ); f [ i ]. x = hash1 ( a ); f [ i ]. y = hash2 ( a ); } sort ( f + 1 , f + n + 1 , cmp1 ); sort ( f + 1 , f + n + 1 , cmp2 ); ll ans = 1 ; for ( ll i = 1 ; i < n ; i ++ ){ if ( f [ i ]. x != f [ i + 1 ]. x || f [ i ]. y != f [ i + 1 ]. y ) ans ++ ; } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"hash\u5165\u95e8"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%281%29%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#hashhash","text":"","title":"hash\u8fdb\u9636\uff1a\u4f7f\u7528\u5b57\u7b26\u4e32hash\u4e71\u641e\u7684\u59ff\u52bf"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%281%29%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#hash_1","text":"\u5fc5\u5907\u7684\u5165\u95e8\u64cd\u4f5c\uff0c\u56e0\u4e3aOI\u4e2d\u7528\u5230\u7684hash\u4e00\u822c\u90fd\u662f**\u8fdb\u5236\u54c8\u5e0c**\uff0c\u56e0\u4e3a\u5b83\u6709\u4e00\u4e9b\u6781\u5176\u65b9\u4fbf\u7684\u6027\u8d28\uff0c\u6bd4\u5982\u8bf4\uff0c\u662f\u5177\u6709\u548c\u524d\u7f00\u548c\u5dee\u4e0d\u591a\u7684\u6027\u8d28\u7684\u3002 \u5047\u8bbe\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00hash\u503c\u8bb0\u4e3ah[i]h[i]h[i]\uff0c\u6211\u4eechash\u65f6\u4f7f\u7528\u7684\u8fdb\u5236\u6570\u4e3abasebasebase\uff0c\u90a3\u4e48\u663e\u7136h[i]=h[i\u22121]\u2217base+s[i]h[i]=h[i-1]*base+s[i]h[i]=h[i\u22121]\u2217base+s[i] \u8bb0p[i]p[i]p[i]\u8868\u793abasebasebase\u7684iii\u6b21\u65b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0fO(1)O(1)O(1)\u5f97\u5230\u4e00\u4e2a\u5b50\u4e32\u7684hash\u503c\uff08\u8bbe\u8fd9\u4e2a\u5b50\u4e32\u4e3as[l]...s[r]) typedef unsigned long long ull ; ull get_hash ( int l , int r ) { return h [ r ] - h [ l - 1 ] * p [ r - l + 1 ]; } \u53ef\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u8fdb\u884c\u8fdb\u5236\u54c8\u5e0c\u7684\u8fc7\u7a0b\u672c\u8d28\u4e0a\u5c31\u662f\u628a\u539f\u5148\u5f97\u5230\u7684\u54c8\u5e0c\u503c\u5728basebasebase\u8fdb\u5236\u4e0a\u5f3a\u884c\u5de6\u79fb\u4e00\u4f4d\uff0c\u7136\u540e\u653e\u8fdb\u53bb\u5f53\u524d\u7684\u8fd9\u4e2a\u5b57\u7b26\u3002 \u73b0\u5728\u7684\u76ee\u7684\u662f\uff0c\u53d6\u51falll\u5230rrr\u8fd9\u6bb5\u5b50\u4e32\u7684hash\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0ch[l\u22121]h[l-1]h[l\u22121]\u8fd9\u4e00\u6bb5\u662f\u6ca1\u6709\u7528\u7684\uff0c\u6211\u4eec\u628a\u5728h[r]h[r]h[r]\u8fd9\u4e00\u4f4d\u4e0a\uff0ch[l\u22121]h[l-1]h[l\u22121]\u8fd9\u5806\u5b57\u7b26\u4e32\u7684hash\u503c\u505a\u7684\u5de6\u79fb\u8fd0\u7b97\u5168\u90e8\u8fd8\u539f\u7ed9h[l\u22121]h[l-1]h[l\u22121]\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053h[l\u22121]h[l-1]h[l\u22121]\u5728h[r]h[r]h[r]\u4e2d\u7684hash\u503c\uff0c\u90a3\u4e48\u51cf\u53bb\u5373\u53ef\u3002\uff08\u7b80\u5355\u7684\u5bb9\u65a5\u601d\u60f3\uff09 \u8fd9\u662f\u57fa\u672c\u64cd\u4f5c\uff0c\u73b0\u5728\u6765\u770b\u4e00\u4e2a\u8fd9\u4e2a\u7684\u62d3\u5c55\u95ee\u9898\u3002","title":"\u67e5\u8be2\u5b50\u4e32hash\u503c"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%281%29%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#_1","text":"\u73b0\u5728\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u6bcf\u6b21\u8be2\u95ee\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\u5220\u9664\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u540e\u7684hash\u503c\uff08\u5220\u9664\u7684\u5b57\u7b26\u65f6\u7ed9\u5b9a\u7684\uff09 \u8981\u6c42\u5fc5\u987bO\u56de\u7b54\u8be2\u95ee","title":"\u9898\u610f"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%281%29%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#sol","text":"\u5220\u9664\u64cd\u4f5c\uff1f\u90a3\u4e0d\u80fd\u50cf\u4e0a\u9762\u90a3\u6837\u5b50\u7b80\u5355\u7c97\u66b4\u7684\u6765\u641e\u4e86\uff0c\u4f46\u662f\u5176\u5b9e\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\u3002 \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8be2\u95ee\u7684\u533a\u95f4\u4e3a[l,r]\uff0c\u5220\u9664\u7684\u5b57\u7b26\u4e3ax\uff08\u6307\u4f4d\u7f6e\uff0c\u4e0d\u662f\u5b57\u7b26\uff09 \u7c7b\u6bd4\u4e0a\u9762\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5148O(1)\u5f97\u5230\u533a\u95f4[l,x\u22121]\u548c\u533a\u95f4[x+1,r]\u7684hash\u503c\uff0c\u90a3\u4e48\u73b0\u5728\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u628a\u8fd9\u4e24\u6bb5\u62fc\u8d77\u6765\u4e86\uff0c\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u8fdb\u5236hash\uff0c\u6240\u4ee5\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5f3a\u884c\u5c06\u524d\u9762\u7684\u533a\u95f4\u5f3a\u884c\u5de6\u79fbr\u2212x\u4f4d\u5c31\u597d\u3002 \u4ee3\u7801\u5b9e\u73b0\u4e5f\u5f88\u7b80\u5355 typedef unsigned long long ull ; ull get_hash ( int l , int r ) { return h [ r ] - h [ l - 1 ] * p [ r - l + 1 ]; } ull get_s ( int l , int r , int x ) { return get_hash ( l , x - 1 ) * p [ r - x ] + get_hash ( x + 1 , r ); } \u8fd9\u9898\u7684\u539f\u9898\u662f LOJ#2823. \u300cBalticOI 2014 Day 1\u300d\u4e09\u4e2a\u670b\u53cb \uff0c\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u4e0d\u8fc7\u77e5\u9053\u4e0a\u9762\u8fd9\u4e2a\u4e5f\u5c31\u4e0d\u96be\u4e86","title":"Sol"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%281%29%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#hash_2","text":"\u9a6c\u62c9\u8f66\uff01\u53ef\u4ee5O(n)\uff01 \u53ef\u662f\u9a6c\u62c9\u8f66\u4ee3\u7801\u96be\u5ea6\u8f83\u9ad8 \u8fd9\u65f6\u5019\u5c31\u5f97\u9760hash\u6765\u6c34 \u6211\u4eec\u77e5\u9053\uff0c\u56de\u6587\u5b50\u4e32\u662f\u5177\u6709\u5355\u8c03\u6027\u7684 \u5982\u679c\u5b57\u7b26\u4e32s[l...r]\u4e3a\u56de\u6587\u5b50\u4e32\uff0c\u90a3\u4e48s[x...y](l<x,y<r)\u4e5f\u4e00\u5b9a\u662f\u56de\u6587\u5b50\u4e32 \u5355\u8c03\u6027\uff01\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u4e8c\u5206\uff1f \u6211\u4eec\u6682\u65f6\u53ea\u8ba8\u8bba\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u56de\u6587\u5b50\u4e32\u3002\uff08\u4e8b\u5b9e\u4e0a\uff0c\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u5b50\u4e32\u4e0e\u5947\u6570\u7684\u53ea\u662f\u5904\u7406\u4e0a\u7684\u4e00\u4e9b\u7ec6\u8282\u4e0d\u540c\uff0c\u4ec5\u6b64\u800c\u5df2\uff09 \u8003\u8651\u679a\u4e3e\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u70b9\uff0c\u5e76\u4e8c\u5206\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\uff08\u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\uff0c\u4e8c\u5206\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u7684\u00bd\u53ef\u80fd\u4f1a\u66f4\u597d\u5199\u4e00\u70b9\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u4f7f\u7528\u4e0a\u6587\u63d0\u5230\u7684O(1)\u67e5\u8be2\u5b50\u4e32hash\u503c\u7684\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5O(1)\u5224\u65ad\u4e8c\u5206\u5f97\u5230\u7684\u8fd9\u4e2a\u5b50\u4e32\u662f\u4e0d\u662f\u56de\u6587\u5b50\u4e32\u4e86\u3002 \u5bf9\u4e8e\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u5b50\u4e32\uff0c\u679a\u4e3e\u4e2d\u70b9\u5de6\u8fb9/\u53f3\u8fb9\u7684\u5b57\u7b26\u5373\u53ef \u6548\u7387\u662fO(nlogn)\u7684\uff0c\u590d\u6742\u5ea6\u8f83\u9a6c\u62c9\u8f66\u7b97\u6cd5\u6bd4\u8f83\u900a\u8272\uff0c\u4e0d\u8fc7\u5982\u679c\u9a6c\u62c9\u8f66\u7b97\u6cd5\u6253\u6302\u6216\u8005\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\uff0chash\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u7136\u540e\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u9002\u5408\u50cf\u6211\u8fd9\u79cd\u4e0b\u6807\u603b\u662f\u641e\u9519\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u51fa\u6b63\u4e32\u548c\u53cd\u4e32\u7684hash\u503c\uff0c\u7136\u540e\u6bcf\u6b21\u6839\u636e\u4e8c\u5206\u51fa\u6765\u7684\u957f\u5ea6\u8ba1\u7b97\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u8d77\u6b62\uff0c\u5224\u65ad\u6b63\u4e32\u548c\u53cd\u4e32\u7684hash\u503c\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002\uff08\u8fd9\u6837\u5c31\u4e0d\u7528\u7814\u7a76\u6076\u5fc3\u7684\u4e0b\u6807\u4e86...\u7814\u7a76\u4e0b\u6807\u8fd8\u5f97\u5206\u5947\u5076\u8ba8\u8bba...\uff09 \u5b57\u7b26\u4e32\u7684\u5f88\u591a\u7279\u6027\u662f\u5177\u6709\u5355\u8c03\u6027\u7684\uff0c\u4e8c\u5206\u6c42\u89e3\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u601d\u8def\uff0c\u914d\u5408\u54c8\u5e0c\u8fdb\u884c\u5224\u65ad\u64cd\u4f5c\u4e00\u822c\u53ef\u4ee5\u505a\u5230\u5728O(nlogn)O(nlogn)O(nlogn)\u6548\u7387\u5185\u5b8c\u6210\u95ee\u9898 \u4f8b\u9898\uff1a SP7586 NUMOFPAL - Number of Palindromes \u7ec3\u4e60\uff1a LOJ#2452. \u300cPOI2010\u300d\u53cd\u5bf9\u79f0 Antisymmetry \u4f8b\u9898\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; typedef unsigned long long ull ; #define N 10100 #define base 13131 char s [ N ]; ull h1 [ N ], p [ N ], h2 [ N ], ans = 0 ; int n ; ull gh1 ( int l , int r ) { return h1 [ r ] - h1 [ l - 1 ] * p [ r - l + 1 ]; } ull gh2 ( int l , int r ) { return h2 [ l ] - h2 [ r + 1 ] * p [ r - l + 1 ]; } ull query1 ( int x ) { //\u5947 int l = 1 , r = min ( x , n - x ); while ( l <= r ) { int mid = ( l + r ) >> 1 ; if ( gh1 ( x - mid , x + mid ) == gh2 ( x - mid , x + mid )) l = mid + 1 ; else r = mid - 1 ; } return r ; } ull query2 ( int x ) { //\u5076 int l = 1 , r = min ( x , n - x ); while ( l <= r ) { int mid = ( l + r ) >> 1 ; if ( gh1 ( x - mid + 1 , x + mid ) == gh2 ( x - mid + 1 , x + mid )) l = mid + 1 ; else r = mid - 1 ; } return r ; } int main () { scanf ( \"%s\" , s + 1 ); p [ 0 ] = 1 ; n = strlen ( s + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { h1 [ i ] = h1 [ i - 1 ] * base + s [ i ]; p [ i ] = p [ i - 1 ] * base ; } for ( int i = n ; i ; i -- ) h2 [ i ] = h2 [ i + 1 ] * base + s [ i ]; for ( int i = 1 ; i < n ; ++ i ) { ans += query1 ( i ) + query2 ( i ); } printf ( \"%llu \\n \" , ans + n ); }","title":"\u7528hash\u6c42\u6700\u957f\u56de\u6587\u5b50\u4e32/\u56de\u6587\u5b50\u4e32\u6570"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%281%29%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#hashkmp","text":"\u6211\u4eec\u8fd9\u91cc\u4e0d\u8bb2kmp\u7b97\u6cd5\uff0c\u6211\u4eec\u5229\u7528hash\u6765\u4ee3\u66ffkmp\u7b97\u6cd5\u6c42\u89e3\u5355\u6a21\u5f0f\u4e32\u5339\u914d\u95ee\u9898\u3002 \u4f46\u662fkmp\u7b97\u6cd5\u7684next\u6570\u7ec4\u771f\u7684\u5f88\u5999\uff01\u53ef\u4ee5\u89e3\u51b3\u5f88\u591a\u795e\u5947\u7684\u4e1c\u897f\uff0c\u5f3a\u70c8\u63a8\u8350\u53bb\u5b66\u5b66\uff01 \u597d\u4e86\uff0c\u6b65\u5165\u6b63\u9898\u3002 \u5355\u6a21\u5f0f\u4e32\u5339\u914d\u95ee\u9898\u662f\u4ec0\u4e48\uff1f \u7ed9\u51fa\u4e24\u4e2a\u5b57\u7b26\u4e32s1\u548cs2\uff0c\u5176\u4e2ds2\u4e3as1\u7684\u5b50\u4e32\uff0c\u6c42s2\u5728s1\u4e2d\u51fa\u73b0\u591a\u5c11\u6b21/\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u5982\u679c\u6709\u8ba4\u771f\u770b\u8fc7\u8be5\u7bc7\u6587\u7ae0\u7684\u7b2c\u4e00\u5b50\u76ee\u7684\u8bdd\uff0c\u5e94\u8be5\u4e0d\u96be\u60f3\u5230\u8fd9\u9898\u7684hash\u505a\u6cd5\u3002 \u5177\u4f53\u505a\u6cd5\u662f\u9884\u5904\u7406\u51fa\u6765\u4e24\u4e2a\u4e32\u7684hash\u503c\uff0c\u56e0\u4e3a\u6c42\u7684\u662fs2\u5728s1\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5339\u914d\u7684\u957f\u5ea6\u88ab\u538b\u7f29\u5230\u4e86s2\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3es2\u5728s1\u4e2d\u7684\u8d77\u70b9\uff0c\u770b\u770b\u540e\u9762\u4e00\u6bb5\u957f\u5ea6\u4e3alen\u7684\u533a\u95f4\u7684hash\u503c\u548cs2\u7684hash\u503c\u4e00\u4e0d\u4e00\u6837\u5c31\u597d\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n+m)\u7684\uff01\u548ckmp\u7b97\u6cd5\u4e00\u6837\uff01 \u4f8b\u9898\uff1a LOJ #103. \u5b50\u4e32\u67e5\u627e \u7ec3\u4e60\uff1a UVA10298 Power Strings \u4f8b\u9898\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; #define N 1000010 #define ull unsigned long long #define base 233 ull h [ N ], p [ N ], ha ; char s1 [ N ], s2 [ N ]; int main () { scanf ( \"%s%s\" , s1 + 1 , s2 + 1 ); int n = strlen ( s1 + 1 ), m = strlen ( s2 + 1 ); for ( int i = 1 ; i <= m ; ++ i ) ha = ha * base + ( ull ) s2 [ i ]; p [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { h [ i ] = h [ i - 1 ] * base + ( ull ) s1 [ i ]; p [ i ] = p [ i - 1 ] * base ; } int l = 1 , r = m , ans = 0 ; while ( r <= n ) { if ( h [ r ] - h [ l - 1 ] * p [ m ] == ha ) ++ ans ; ++ l , ++ r ; } printf ( \"%d \\n \" , ans ); }","title":"\u7528hash\u4ee3\u66ffkmp\u7b97\u6cd5"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%282%29tire%E5%AD%97%E5%85%B8%E6%A0%91/","text":"Trie\u6811\u8be6\u89e3\u53ca\u5176\u5e94\u7528 \u00b6 \u4e00\u3001\u77e5\u8bc6\u7b80\u4ecb \u5b57\u5178\u6811\uff08Trie\uff09\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e9b\u5b57\u7b26\u4e32->\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u57fa\u672c\u4e0a\uff0c\u5b83\u8ddf Java \u7684 HashMap \u529f\u80fd\u76f8\u540c\uff0c\u90fd\u662f key-value \u6620\u5c04\uff0c\u53ea\u4e0d\u8fc7 Trie \u7684 key \u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u3002 \u3000\u3000Trie \u7684\u5f3a\u5927\u4e4b\u5904\u5c31\u5728\u4e8e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5b83\u7684\u63d2\u5165\u548c\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(k) \uff0c\u5176\u4e2d k \u4e3a key \u7684\u957f\u5ea6\uff0c\u4e0e Trie \u4e2d\u4fdd\u5b58\u4e86\u591a\u5c11\u4e2a\u5143\u7d20\u65e0\u5173\u3002Hash \u8868\u53f7\u79f0\u662f O(1) \u7684\uff0c\u4f46\u5728\u8ba1\u7b97 hash \u7684\u65f6\u5019\u5c31\u80af\u5b9a\u4f1a\u662f O(k) \uff0c\u800c\u4e14\u8fd8\u6709\u78b0\u649e\u4e4b\u7c7b\u7684\u95ee\u9898\uff1bTrie \u7684\u7f3a\u70b9\u662f\u7a7a\u95f4\u6d88\u8017\u5f88\u9ad8\u3002 \u3000\u3000\u81f3\u4e8eTrie\u6811\u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u7528\u6307\u9488\u52a8\u6001\u5206\u914d\uff0c\u6211\u505a\u9898\u65f6\u4e3a\u4e86\u65b9\u4fbf\u5c31\u7528\u4e86\u6570\u7ec4\uff0c\u9759\u6001\u5206\u914d\u7a7a\u95f4\u3002 Trie\u6811\uff0c\u53c8\u79f0\u5355\u8bcd\u67e5\u627e\u6811\u6216\u952e\u6811\uff0c\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\uff0c\u662f\u4e00\u79cd\u54c8\u5e0c\u6811\u7684\u53d8\u79cd\u3002\u5178\u578b\u5e94\u7528\u662f\u7528\u4e8e\u7edf\u8ba1\u548c\u6392\u5e8f\u5927\u91cf\u7684\u5b57\u7b26\u4e32\uff08\u4f46\u4e0d\u4ec5\u9650\u4e8e\u5b57\u7b26\u4e32\uff09\uff0c\u6240\u4ee5\u7ecf\u5e38\u88ab\u641c\u7d22\u5f15\u64ce\u7cfb\u7edf\u7528\u4e8e\u6587\u672c\u8bcd\u9891\u7edf\u8ba1\u3002\u5b83\u7684\u4f18\u70b9\u662f\uff1a\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u65e0\u8c13\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u67e5\u8be2\u6548\u7387\u6bd4\u54c8\u5e0c\u8868\u9ad8\u3002 Trie\u7684\u6838\u5fc3\u601d\u60f3\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\u3002\u5229\u7528\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u6765\u964d\u4f4e\u67e5\u8be2\u65f6\u95f4\u7684\u5f00\u9500\u4ee5\u8fbe\u5230\u63d0\u9ad8\u6548\u7387\u7684\u76ee\u7684\u3002 Trie\u6811\u7684\u57fa\u672c\u6027\u8d28\u53ef\u4ee5\u5f52\u7eb3\u4e3a\uff1a \uff081\uff09\u6839\u8282\u70b9\u4e0d\u5305\u542b\u5b57\u7b26\uff0c\u9664\u6839\u8282\u70b9\u610f\u5916\u6bcf\u4e2a\u8282\u70b9\u53ea\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u3002 \uff082\uff09\u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 \uff083\uff09\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u5305\u542b\u7684\u5b57\u7b26\u4e32\u4e0d\u76f8\u540c\u3002 Trie\u6811\u6709\u4e00\u4e9b\u7279\u6027\uff1a 1\uff09\u6839\u8282\u70b9\u4e0d\u5305\u542b\u5b57\u7b26\uff0c\u9664\u6839\u8282\u70b9\u5916\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53ea\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u3002 2\uff09\u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e00\u8282\u70b9\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 3\uff09\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u5305\u542b\u7684\u5b57\u7b26\u90fd\u4e0d\u76f8\u540c\u3002 4\uff09\u5982\u679c\u5b57\u7b26\u7684\u79cd\u6570\u4e3an\uff0c\u5219\u6bcf\u4e2a\u7ed3\u70b9\u7684\u51fa\u5ea6\u4e3an\uff0c\u8fd9\u4e5f\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u4f53\u73b0\uff0c\u6d6a\u8d39\u4e86\u5f88\u591a\u7684\u7a7a\u95f4\u3002 5\uff09\u63d2\u5165\u67e5\u627e\u7684\u590d\u6742\u5ea6\u4e3aO(n)\uff0cn\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\u3002 \u57fa\u672c\u601d\u60f3\uff08\u4ee5\u5b57\u6bcd\u6811\u4e3a\u4f8b\uff09\uff1a 1\u3001\u63d2\u5165\u8fc7\u7a0b \u5bf9\u4e8e\u4e00\u4e2a\u5355\u8bcd\uff0c\u4ece\u6839\u5f00\u59cb\uff0c\u6cbf\u7740\u5355\u8bcd\u7684\u5404\u4e2a\u5b57\u6bcd\u6240\u5bf9\u5e94\u7684\u6811\u4e2d\u7684\u8282\u70b9\u5206\u652f\u5411\u4e0b\u8d70\uff0c\u76f4\u5230\u5355\u8bcd\u904d\u5386\u5b8c\uff0c\u5c06\u6700\u540e\u7684\u8282\u70b9\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u8868\u793a\u8be5\u5355\u8bcd\u5df2\u63d2\u5165Trie\u6811\u3002 2\u3001\u67e5\u8be2\u8fc7\u7a0b \u540c\u6837\u7684\uff0c\u4ece\u6839\u5f00\u59cb\u6309\u7167\u5355\u8bcd\u7684\u5b57\u6bcd\u987a\u5e8f\u5411\u4e0b\u904d\u5386trie\u6811\uff0c\u4e00\u65e6\u53d1\u73b0\u67d0\u4e2a\u8282\u70b9\u6807\u8bb0\u4e0d\u5b58\u5728\u6216\u8005\u5355\u8bcd\u904d\u5386\u5b8c\u6210\u800c\u6700\u540e\u7684\u8282\u70b9\u672a\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u5219\u8868\u793a\u8be5\u5355\u8bcd\u4e0d\u5b58\u5728\uff0c\u82e5\u6700\u540e\u7684\u8282\u70b9\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u8868\u793a\u8be5\u5355\u8bcd\u5b58\u5728\u3002 \u4e8c\u3001\u5b57\u5178\u6811\u7684\u6570\u636e\u7ed3\u6784\uff1a \u5229\u7528\u4e32\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\u6811\uff0c\u8fd9\u4e2a\u5b57\u5178\u6811\u4fdd\u5b58\u4e86\u4e32\u7684\u516c\u5171\u524d\u7f00\u4fe1\u606f\uff0c\u56e0\u6b64\u53ef\u4ee5\u964d\u4f4e\u67e5\u8be2\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u3002 \u4e0b\u9762\u4ee5\u82f1\u6587\u5355\u8bcd\u6784\u5efa\u7684\u5b57\u5178\u6811\u4e3a\u4f8b\uff0c\u8fd9\u68f5Trie\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u5305\u62ec26\u4e2a\u5b69\u5b50\u7ed3\u70b9\uff0c\u56e0\u4e3a\u603b\u5171\u670926\u4e2a\u82f1\u6587\u5b57\u6bcd(\u5047\u8bbe\u5355\u8bcd\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210)\u3002 \u5219\u53ef\u58f0\u660e\u5305\u542bTrie\u6811\u7684\u7ed3\u70b9\u4fe1\u606f\u7684\u7ed3\u6784\u4f53: typedef struct Trie_node { int count ; // \u7edf\u8ba1\u5355\u8bcd\u524d\u7f00\u51fa\u73b0\u7684\u6b21\u6570 struct Trie_node * next [ 26 ]; // \u6307\u5411\u5404\u4e2a\u5b50\u6811\u7684\u6307\u9488 bool exist ; // \u6807\u8bb0\u8be5\u7ed3\u70b9\u5904\u662f\u5426\u6784\u6210\u5355\u8bcd } TrieNode , * Trie ; \u5176\u4e2dnext\u662f\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u5b58\u653e\u7740\u6307\u5411\u5404\u4e2a\u5b69\u5b50\u7ed3\u70b9\u7684\u6307\u9488\u3002 Trie\u6811\u7684\u6839\u7ed3\u70b9\u4e0d\u5305\u542b\u4efb\u4f55\u4fe1\u606f\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\"abc\"\uff0c\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4e3a'a'\uff0c\u56e0\u6b64\u6839\u7ed3\u70b9\u4e2d\u6570\u7ec4next\u4e0b\u6807\u4e3a'a'-97\u7684\u503c\u4e0d\u4e3aNULL\uff0c\u5176\u4ed6\u540c\u7406\uff0c\u6784\u5efa\u7684Trie\u6811\u5982\u56fe\u6240\u793a\uff0c\u7ea2\u8272\u7ed3\u70b9\u8868\u793a\u5728\u8be5\u5904\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5355\u8bcd\u3002\u5f88\u663e\u7136\uff0c\u5982\u679c\u8981\u67e5\u627e\u5355\u8bcd\"abc\"\u662f\u5426\u5b58\u5728\uff0c\u67e5\u627e\u957f\u5ea6\u5219\u4e3aO(len)\uff0clen\u4e3a\u8981\u67e5\u627e\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u800c\u82e5\u91c7\u7528\u4e00\u822c\u7684\u9010\u4e2a\u5339\u914d\u67e5\u627e\uff0c\u5219\u67e5\u627e\u957f\u5ea6\u4e3aO(len*n)\uff0cn\u4e3a\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\u3002\u663e\u7136\u57fa\u4e8eTrie\u6811\u7684\u67e5\u627e\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002 \u5982\u4e0a\u56fe\u4e2d\uff1aTrie\u6811\u4e2d\u5b58\u5728\u7684\u5c31\u662fabc\u3001ab\u3001bd\u3001dda\u56db\u4e2a\u5355\u8bcd\u3002\u5728\u5b9e\u9645\u7684\u95ee\u9898\u4e2d\u53ef\u4ee5\u5c06\u6807\u8bb0\u989c\u8272\u7684\u6807\u5fd7\u4f4d\u6539\u4e3a\u6570\u91cfcount\u7b49\u5176\u4ed6\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u53d8\u91cf\u3002 \u5df2\u77e5n\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5e73\u5747\u957f\u5ea6\u4e3a10\u7684\u5355\u8bcd\uff0c\u5224\u65ad\u5176\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u4e32\u4e3a\u53e6\u4e00\u4e2a\u4e32\u7684\u524d\u7f00\u5b50\u4e32\u3002\u4e0b\u9762\u5bf9\u6bd43\u79cd\u65b9\u6cd5\uff1a 1\u3001 \u6700\u5bb9\u6613\u60f3\u5230\u7684\uff1a\u5373\u4ece\u5b57\u7b26\u4e32\u96c6\u4e2d\u4ece\u5934\u5f80\u540e\u641c\uff0c\u770b\u6bcf\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u5b57\u7b26\u4e32\u96c6\u4e2d\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\uff0c\u590d\u6742\u5ea6\u4e3aO(n^2)\u3002 2\u3001 \u4f7f\u7528hash\uff1a\u6211\u4eec\u7528hash\u5b58\u4e0b\u6240\u6709\u5b57\u7b26\u4e32\u7684\u6240\u6709\u7684\u524d\u7f00\u5b50\u4e32\u3002\u5efa\u7acb\u5b58\u6709\u5b50\u4e32hash\u7684\u590d\u6742\u5ea6\u4e3aO(n*len)\u3002\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u4e3aO(n)* O(1)= O(n)\u3002 3\u3001 \u4f7f\u7528Trie\uff1a\u56e0\u4e3a\u5f53\u67e5\u8be2\u5982\u5b57\u7b26\u4e32abc\u662f\u5426\u4e3a\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u65f6\uff0c\u663e\u7136\u4ee5b\u3001c\u3001d....\u7b49\u4e0d\u662f\u4ee5a\u5f00\u5934\u7684\u5b57\u7b26\u4e32\u5c31\u4e0d\u7528\u67e5\u627e\u4e86\uff0c\u8fd9\u6837\u8fc5\u901f\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\u548c\u63d0\u9ad8\u67e5\u627e\u7684\u9488\u5bf9\u6027\u3002\u6240\u4ee5\u5efa\u7acbTrie\u7684\u590d\u6742\u5ea6\u4e3aO(n*len)\uff0c\u800c\u5efa\u7acb+\u67e5\u8be2\u5728trie\u4e2d\u662f\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u7684\uff0c\u5efa\u7acb\u7684\u8fc7\u7a0b\u4e5f\u5c31\u53ef\u4ee5\u6210\u4e3a\u67e5\u8be2\u7684\u8fc7\u7a0b\uff0chash\u5c31\u4e0d\u80fd\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u4e3aO(n*len)\uff0c\u5b9e\u9645\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u53ea\u662fO(len)\u3002 \u4e09\u3001Trie\u6811\u7684\u64cd\u4f5c \u5728Trie\u6811\u4e2d\u4e3b\u8981\u67093\u4e2a\u64cd\u4f5c\uff0c\u63d2\u5165\u3001\u67e5\u627e\u548c\u5220\u9664\u3002\u4e00\u822c\u60c5\u51b5\u4e0bTrie\u6811\u4e2d\u5f88\u5c11\u5b58\u5728\u5220\u9664\u5355\u72ec\u67d0\u4e2a\u7ed3\u70b9\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u53ea\u8003\u8651\u5220\u9664\u6574\u68f5\u6811\u3002 1\u3001\u63d2\u5165 \u5047\u8bbe\u5b58\u5728\u5b57\u7b26\u4e32str\uff0cTrie\u6811\u7684\u6839\u7ed3\u70b9\u4e3aroot\u3002i=0\uff0cp=root\u3002 1)\u53d6str[i]\uff0c\u5224\u65adp->next[str[i]-97]\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u5efa\u7acb\u7ed3\u70b9temp\uff0c\u5e76\u5c06p->next[str[i]-97]\u6307\u5411temp\uff0c\u7136\u540ep\u6307\u5411temp\uff1b \u82e5\u4e0d\u4e3a\u7a7a\uff0c\u5219p=p->next[str[i]-97]\uff1b 2)i++\uff0c\u7ee7\u7eed\u53d6str[i]\uff0c\u5faa\u73af1)\u4e2d\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u9047\u5230\u7ed3\u675f\u7b26'\\0'\uff0c\u6b64\u65f6\u5c06\u5f53\u524d\u7ed3\u70b9p\u4e2d\u7684 exist\u7f6e\u4e3atrue\u3002 2\u3001\u67e5\u627e \u5047\u8bbe\u8981\u67e5\u627e\u7684\u5b57\u7b26\u4e32\u4e3astr\uff0cTrie\u6811\u7684\u6839\u7ed3\u70b9\u4e3aroot\uff0ci=0\uff0cp=root 1)\u53d6str[i]\uff0c\u5224\u65ad\u5224\u65adp->next[str[i]-97]\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56defalse\uff1b\u82e5\u4e0d\u4e3a\u7a7a\uff0c\u5219p=p->next[str[i]-97]\uff0c\u7ee7\u7eed\u53d6\u5b57\u7b26\u3002 2)\u91cd\u590d1)\u4e2d\u7684\u64cd\u4f5c\u76f4\u5230\u9047\u5230\u7ed3\u675f\u7b26'\\0'\uff0c\u82e5\u5f53\u524d\u7ed3\u70b9p\u4e0d\u4e3a\u7a7a\u5e76\u4e14 exist \u4e3atrue\uff0c\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 3\u3001\u5220\u9664 \u5220\u9664\u53ef\u4ee5\u4ee5\u9012\u5f52\u7684\u5f62\u5f0f\u8fdb\u884c\u5220\u9664\u3002 #include <iostream> #include <cstring> using namespace std ; typedef struct Trie_node { int count ; // \u7edf\u8ba1\u5355\u8bcd\u524d\u7f00\u51fa\u73b0\u7684\u6b21\u6570 struct Trie_node * next [ 26 ]; // \u6307\u5411\u5404\u4e2a\u5b50\u6811\u7684\u6307\u9488 bool exist ; // \u6807\u8bb0\u8be5\u7ed3\u70b9\u5904\u662f\u5426\u6784\u6210\u5355\u8bcd } TrieNode , * Trie ; TrieNode * createTrieNode () { TrieNode * node = ( TrieNode * ) malloc ( sizeof ( TrieNode )); node -> count = 0 ; node -> exist = false ; memset ( node -> next , 0 , sizeof ( node -> next )); // \u521d\u59cb\u5316\u4e3a\u7a7a\u6307\u9488 return node ; } void Trie_insert ( Trie root , char * word ) { Trie node = root ; char * p = word ; int id ; while ( * p ) { id = * p - 'a' ; if ( node -> next [ id ] == NULL ) { node -> next [ id ] = createTrieNode (); } node = node -> next [ id ]; // \u6bcf\u63d2\u5165\u4e00\u6b65\uff0c\u76f8\u5f53\u4e8e\u6709\u4e00\u4e2a\u65b0\u4e32\u7ecf\u8fc7\uff0c\u6307\u9488\u5411\u4e0b\u79fb\u52a8 ++ p ; node -> count += 1 ; // \u8fd9\u884c\u4ee3\u7801\u7528\u4e8e\u7edf\u8ba1\u6bcf\u4e2a\u5355\u8bcd\u524d\u7f00\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4e5f\u5305\u62ec\u7edf\u8ba1\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff09 } node -> exist = true ; // \u5355\u8bcd\u7ed3\u675f\u7684\u5730\u65b9\u6807\u8bb0\u6b64\u5904\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5355\u8bcd } int Trie_search ( Trie root , char * word ) { Trie node = root ; char * p = word ; int id ; while ( * p ) { id = * p - 'a' ; node = node -> next [ id ]; ++ p ; if ( node == NULL ) return 0 ; } return node -> count ; } int main ( void ) { Trie root = createTrieNode (); // \u521d\u59cb\u5316\u5b57\u5178\u6811\u7684\u6839\u8282\u70b9 char str [ 12 ] ; bool flag = false ; while ( gets ( str )) { if ( flag ) printf ( \"%d \\n \" , Trie_search ( root , str )); else { if ( strlen ( str ) != 0 ) { Trie_insert ( root , str ); } else flag = true ; } } return 0 ; }","title":"Trie\u6811\u8be6\u89e3\u53ca\u5176\u5e94\u7528"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%282%29tire%E5%AD%97%E5%85%B8%E6%A0%91/#trie","text":"\u4e00\u3001\u77e5\u8bc6\u7b80\u4ecb \u5b57\u5178\u6811\uff08Trie\uff09\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e9b\u5b57\u7b26\u4e32->\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u57fa\u672c\u4e0a\uff0c\u5b83\u8ddf Java \u7684 HashMap \u529f\u80fd\u76f8\u540c\uff0c\u90fd\u662f key-value \u6620\u5c04\uff0c\u53ea\u4e0d\u8fc7 Trie \u7684 key \u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u3002 \u3000\u3000Trie \u7684\u5f3a\u5927\u4e4b\u5904\u5c31\u5728\u4e8e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5b83\u7684\u63d2\u5165\u548c\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(k) \uff0c\u5176\u4e2d k \u4e3a key \u7684\u957f\u5ea6\uff0c\u4e0e Trie \u4e2d\u4fdd\u5b58\u4e86\u591a\u5c11\u4e2a\u5143\u7d20\u65e0\u5173\u3002Hash \u8868\u53f7\u79f0\u662f O(1) \u7684\uff0c\u4f46\u5728\u8ba1\u7b97 hash \u7684\u65f6\u5019\u5c31\u80af\u5b9a\u4f1a\u662f O(k) \uff0c\u800c\u4e14\u8fd8\u6709\u78b0\u649e\u4e4b\u7c7b\u7684\u95ee\u9898\uff1bTrie \u7684\u7f3a\u70b9\u662f\u7a7a\u95f4\u6d88\u8017\u5f88\u9ad8\u3002 \u3000\u3000\u81f3\u4e8eTrie\u6811\u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u7528\u6307\u9488\u52a8\u6001\u5206\u914d\uff0c\u6211\u505a\u9898\u65f6\u4e3a\u4e86\u65b9\u4fbf\u5c31\u7528\u4e86\u6570\u7ec4\uff0c\u9759\u6001\u5206\u914d\u7a7a\u95f4\u3002 Trie\u6811\uff0c\u53c8\u79f0\u5355\u8bcd\u67e5\u627e\u6811\u6216\u952e\u6811\uff0c\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\uff0c\u662f\u4e00\u79cd\u54c8\u5e0c\u6811\u7684\u53d8\u79cd\u3002\u5178\u578b\u5e94\u7528\u662f\u7528\u4e8e\u7edf\u8ba1\u548c\u6392\u5e8f\u5927\u91cf\u7684\u5b57\u7b26\u4e32\uff08\u4f46\u4e0d\u4ec5\u9650\u4e8e\u5b57\u7b26\u4e32\uff09\uff0c\u6240\u4ee5\u7ecf\u5e38\u88ab\u641c\u7d22\u5f15\u64ce\u7cfb\u7edf\u7528\u4e8e\u6587\u672c\u8bcd\u9891\u7edf\u8ba1\u3002\u5b83\u7684\u4f18\u70b9\u662f\uff1a\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u65e0\u8c13\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u67e5\u8be2\u6548\u7387\u6bd4\u54c8\u5e0c\u8868\u9ad8\u3002 Trie\u7684\u6838\u5fc3\u601d\u60f3\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\u3002\u5229\u7528\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u6765\u964d\u4f4e\u67e5\u8be2\u65f6\u95f4\u7684\u5f00\u9500\u4ee5\u8fbe\u5230\u63d0\u9ad8\u6548\u7387\u7684\u76ee\u7684\u3002 Trie\u6811\u7684\u57fa\u672c\u6027\u8d28\u53ef\u4ee5\u5f52\u7eb3\u4e3a\uff1a \uff081\uff09\u6839\u8282\u70b9\u4e0d\u5305\u542b\u5b57\u7b26\uff0c\u9664\u6839\u8282\u70b9\u610f\u5916\u6bcf\u4e2a\u8282\u70b9\u53ea\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u3002 \uff082\uff09\u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 \uff083\uff09\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u5305\u542b\u7684\u5b57\u7b26\u4e32\u4e0d\u76f8\u540c\u3002 Trie\u6811\u6709\u4e00\u4e9b\u7279\u6027\uff1a 1\uff09\u6839\u8282\u70b9\u4e0d\u5305\u542b\u5b57\u7b26\uff0c\u9664\u6839\u8282\u70b9\u5916\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53ea\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u3002 2\uff09\u4ece\u6839\u8282\u70b9\u5230\u67d0\u4e00\u8282\u70b9\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u5b57\u7b26\u8fde\u63a5\u8d77\u6765\uff0c\u4e3a\u8be5\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 3\uff09\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u5305\u542b\u7684\u5b57\u7b26\u90fd\u4e0d\u76f8\u540c\u3002 4\uff09\u5982\u679c\u5b57\u7b26\u7684\u79cd\u6570\u4e3an\uff0c\u5219\u6bcf\u4e2a\u7ed3\u70b9\u7684\u51fa\u5ea6\u4e3an\uff0c\u8fd9\u4e5f\u662f\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u4f53\u73b0\uff0c\u6d6a\u8d39\u4e86\u5f88\u591a\u7684\u7a7a\u95f4\u3002 5\uff09\u63d2\u5165\u67e5\u627e\u7684\u590d\u6742\u5ea6\u4e3aO(n)\uff0cn\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\u3002 \u57fa\u672c\u601d\u60f3\uff08\u4ee5\u5b57\u6bcd\u6811\u4e3a\u4f8b\uff09\uff1a 1\u3001\u63d2\u5165\u8fc7\u7a0b \u5bf9\u4e8e\u4e00\u4e2a\u5355\u8bcd\uff0c\u4ece\u6839\u5f00\u59cb\uff0c\u6cbf\u7740\u5355\u8bcd\u7684\u5404\u4e2a\u5b57\u6bcd\u6240\u5bf9\u5e94\u7684\u6811\u4e2d\u7684\u8282\u70b9\u5206\u652f\u5411\u4e0b\u8d70\uff0c\u76f4\u5230\u5355\u8bcd\u904d\u5386\u5b8c\uff0c\u5c06\u6700\u540e\u7684\u8282\u70b9\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u8868\u793a\u8be5\u5355\u8bcd\u5df2\u63d2\u5165Trie\u6811\u3002 2\u3001\u67e5\u8be2\u8fc7\u7a0b \u540c\u6837\u7684\uff0c\u4ece\u6839\u5f00\u59cb\u6309\u7167\u5355\u8bcd\u7684\u5b57\u6bcd\u987a\u5e8f\u5411\u4e0b\u904d\u5386trie\u6811\uff0c\u4e00\u65e6\u53d1\u73b0\u67d0\u4e2a\u8282\u70b9\u6807\u8bb0\u4e0d\u5b58\u5728\u6216\u8005\u5355\u8bcd\u904d\u5386\u5b8c\u6210\u800c\u6700\u540e\u7684\u8282\u70b9\u672a\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u5219\u8868\u793a\u8be5\u5355\u8bcd\u4e0d\u5b58\u5728\uff0c\u82e5\u6700\u540e\u7684\u8282\u70b9\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u8868\u793a\u8be5\u5355\u8bcd\u5b58\u5728\u3002 \u4e8c\u3001\u5b57\u5178\u6811\u7684\u6570\u636e\u7ed3\u6784\uff1a \u5229\u7528\u4e32\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\u6811\uff0c\u8fd9\u4e2a\u5b57\u5178\u6811\u4fdd\u5b58\u4e86\u4e32\u7684\u516c\u5171\u524d\u7f00\u4fe1\u606f\uff0c\u56e0\u6b64\u53ef\u4ee5\u964d\u4f4e\u67e5\u8be2\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u3002 \u4e0b\u9762\u4ee5\u82f1\u6587\u5355\u8bcd\u6784\u5efa\u7684\u5b57\u5178\u6811\u4e3a\u4f8b\uff0c\u8fd9\u68f5Trie\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u5305\u62ec26\u4e2a\u5b69\u5b50\u7ed3\u70b9\uff0c\u56e0\u4e3a\u603b\u5171\u670926\u4e2a\u82f1\u6587\u5b57\u6bcd(\u5047\u8bbe\u5355\u8bcd\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210)\u3002 \u5219\u53ef\u58f0\u660e\u5305\u542bTrie\u6811\u7684\u7ed3\u70b9\u4fe1\u606f\u7684\u7ed3\u6784\u4f53: typedef struct Trie_node { int count ; // \u7edf\u8ba1\u5355\u8bcd\u524d\u7f00\u51fa\u73b0\u7684\u6b21\u6570 struct Trie_node * next [ 26 ]; // \u6307\u5411\u5404\u4e2a\u5b50\u6811\u7684\u6307\u9488 bool exist ; // \u6807\u8bb0\u8be5\u7ed3\u70b9\u5904\u662f\u5426\u6784\u6210\u5355\u8bcd } TrieNode , * Trie ; \u5176\u4e2dnext\u662f\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u5b58\u653e\u7740\u6307\u5411\u5404\u4e2a\u5b69\u5b50\u7ed3\u70b9\u7684\u6307\u9488\u3002 Trie\u6811\u7684\u6839\u7ed3\u70b9\u4e0d\u5305\u542b\u4efb\u4f55\u4fe1\u606f\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\"abc\"\uff0c\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4e3a'a'\uff0c\u56e0\u6b64\u6839\u7ed3\u70b9\u4e2d\u6570\u7ec4next\u4e0b\u6807\u4e3a'a'-97\u7684\u503c\u4e0d\u4e3aNULL\uff0c\u5176\u4ed6\u540c\u7406\uff0c\u6784\u5efa\u7684Trie\u6811\u5982\u56fe\u6240\u793a\uff0c\u7ea2\u8272\u7ed3\u70b9\u8868\u793a\u5728\u8be5\u5904\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5355\u8bcd\u3002\u5f88\u663e\u7136\uff0c\u5982\u679c\u8981\u67e5\u627e\u5355\u8bcd\"abc\"\u662f\u5426\u5b58\u5728\uff0c\u67e5\u627e\u957f\u5ea6\u5219\u4e3aO(len)\uff0clen\u4e3a\u8981\u67e5\u627e\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u800c\u82e5\u91c7\u7528\u4e00\u822c\u7684\u9010\u4e2a\u5339\u914d\u67e5\u627e\uff0c\u5219\u67e5\u627e\u957f\u5ea6\u4e3aO(len*n)\uff0cn\u4e3a\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\u3002\u663e\u7136\u57fa\u4e8eTrie\u6811\u7684\u67e5\u627e\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002 \u5982\u4e0a\u56fe\u4e2d\uff1aTrie\u6811\u4e2d\u5b58\u5728\u7684\u5c31\u662fabc\u3001ab\u3001bd\u3001dda\u56db\u4e2a\u5355\u8bcd\u3002\u5728\u5b9e\u9645\u7684\u95ee\u9898\u4e2d\u53ef\u4ee5\u5c06\u6807\u8bb0\u989c\u8272\u7684\u6807\u5fd7\u4f4d\u6539\u4e3a\u6570\u91cfcount\u7b49\u5176\u4ed6\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u53d8\u91cf\u3002 \u5df2\u77e5n\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5e73\u5747\u957f\u5ea6\u4e3a10\u7684\u5355\u8bcd\uff0c\u5224\u65ad\u5176\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u4e32\u4e3a\u53e6\u4e00\u4e2a\u4e32\u7684\u524d\u7f00\u5b50\u4e32\u3002\u4e0b\u9762\u5bf9\u6bd43\u79cd\u65b9\u6cd5\uff1a 1\u3001 \u6700\u5bb9\u6613\u60f3\u5230\u7684\uff1a\u5373\u4ece\u5b57\u7b26\u4e32\u96c6\u4e2d\u4ece\u5934\u5f80\u540e\u641c\uff0c\u770b\u6bcf\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u5b57\u7b26\u4e32\u96c6\u4e2d\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\uff0c\u590d\u6742\u5ea6\u4e3aO(n^2)\u3002 2\u3001 \u4f7f\u7528hash\uff1a\u6211\u4eec\u7528hash\u5b58\u4e0b\u6240\u6709\u5b57\u7b26\u4e32\u7684\u6240\u6709\u7684\u524d\u7f00\u5b50\u4e32\u3002\u5efa\u7acb\u5b58\u6709\u5b50\u4e32hash\u7684\u590d\u6742\u5ea6\u4e3aO(n*len)\u3002\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u4e3aO(n)* O(1)= O(n)\u3002 3\u3001 \u4f7f\u7528Trie\uff1a\u56e0\u4e3a\u5f53\u67e5\u8be2\u5982\u5b57\u7b26\u4e32abc\u662f\u5426\u4e3a\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u65f6\uff0c\u663e\u7136\u4ee5b\u3001c\u3001d....\u7b49\u4e0d\u662f\u4ee5a\u5f00\u5934\u7684\u5b57\u7b26\u4e32\u5c31\u4e0d\u7528\u67e5\u627e\u4e86\uff0c\u8fd9\u6837\u8fc5\u901f\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\u548c\u63d0\u9ad8\u67e5\u627e\u7684\u9488\u5bf9\u6027\u3002\u6240\u4ee5\u5efa\u7acbTrie\u7684\u590d\u6742\u5ea6\u4e3aO(n*len)\uff0c\u800c\u5efa\u7acb+\u67e5\u8be2\u5728trie\u4e2d\u662f\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u7684\uff0c\u5efa\u7acb\u7684\u8fc7\u7a0b\u4e5f\u5c31\u53ef\u4ee5\u6210\u4e3a\u67e5\u8be2\u7684\u8fc7\u7a0b\uff0chash\u5c31\u4e0d\u80fd\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u4e3aO(n*len)\uff0c\u5b9e\u9645\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u53ea\u662fO(len)\u3002 \u4e09\u3001Trie\u6811\u7684\u64cd\u4f5c \u5728Trie\u6811\u4e2d\u4e3b\u8981\u67093\u4e2a\u64cd\u4f5c\uff0c\u63d2\u5165\u3001\u67e5\u627e\u548c\u5220\u9664\u3002\u4e00\u822c\u60c5\u51b5\u4e0bTrie\u6811\u4e2d\u5f88\u5c11\u5b58\u5728\u5220\u9664\u5355\u72ec\u67d0\u4e2a\u7ed3\u70b9\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u53ea\u8003\u8651\u5220\u9664\u6574\u68f5\u6811\u3002 1\u3001\u63d2\u5165 \u5047\u8bbe\u5b58\u5728\u5b57\u7b26\u4e32str\uff0cTrie\u6811\u7684\u6839\u7ed3\u70b9\u4e3aroot\u3002i=0\uff0cp=root\u3002 1)\u53d6str[i]\uff0c\u5224\u65adp->next[str[i]-97]\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u5efa\u7acb\u7ed3\u70b9temp\uff0c\u5e76\u5c06p->next[str[i]-97]\u6307\u5411temp\uff0c\u7136\u540ep\u6307\u5411temp\uff1b \u82e5\u4e0d\u4e3a\u7a7a\uff0c\u5219p=p->next[str[i]-97]\uff1b 2)i++\uff0c\u7ee7\u7eed\u53d6str[i]\uff0c\u5faa\u73af1)\u4e2d\u7684\u64cd\u4f5c\uff0c\u76f4\u5230\u9047\u5230\u7ed3\u675f\u7b26'\\0'\uff0c\u6b64\u65f6\u5c06\u5f53\u524d\u7ed3\u70b9p\u4e2d\u7684 exist\u7f6e\u4e3atrue\u3002 2\u3001\u67e5\u627e \u5047\u8bbe\u8981\u67e5\u627e\u7684\u5b57\u7b26\u4e32\u4e3astr\uff0cTrie\u6811\u7684\u6839\u7ed3\u70b9\u4e3aroot\uff0ci=0\uff0cp=root 1)\u53d6str[i]\uff0c\u5224\u65ad\u5224\u65adp->next[str[i]-97]\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56defalse\uff1b\u82e5\u4e0d\u4e3a\u7a7a\uff0c\u5219p=p->next[str[i]-97]\uff0c\u7ee7\u7eed\u53d6\u5b57\u7b26\u3002 2)\u91cd\u590d1)\u4e2d\u7684\u64cd\u4f5c\u76f4\u5230\u9047\u5230\u7ed3\u675f\u7b26'\\0'\uff0c\u82e5\u5f53\u524d\u7ed3\u70b9p\u4e0d\u4e3a\u7a7a\u5e76\u4e14 exist \u4e3atrue\uff0c\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002 3\u3001\u5220\u9664 \u5220\u9664\u53ef\u4ee5\u4ee5\u9012\u5f52\u7684\u5f62\u5f0f\u8fdb\u884c\u5220\u9664\u3002 #include <iostream> #include <cstring> using namespace std ; typedef struct Trie_node { int count ; // \u7edf\u8ba1\u5355\u8bcd\u524d\u7f00\u51fa\u73b0\u7684\u6b21\u6570 struct Trie_node * next [ 26 ]; // \u6307\u5411\u5404\u4e2a\u5b50\u6811\u7684\u6307\u9488 bool exist ; // \u6807\u8bb0\u8be5\u7ed3\u70b9\u5904\u662f\u5426\u6784\u6210\u5355\u8bcd } TrieNode , * Trie ; TrieNode * createTrieNode () { TrieNode * node = ( TrieNode * ) malloc ( sizeof ( TrieNode )); node -> count = 0 ; node -> exist = false ; memset ( node -> next , 0 , sizeof ( node -> next )); // \u521d\u59cb\u5316\u4e3a\u7a7a\u6307\u9488 return node ; } void Trie_insert ( Trie root , char * word ) { Trie node = root ; char * p = word ; int id ; while ( * p ) { id = * p - 'a' ; if ( node -> next [ id ] == NULL ) { node -> next [ id ] = createTrieNode (); } node = node -> next [ id ]; // \u6bcf\u63d2\u5165\u4e00\u6b65\uff0c\u76f8\u5f53\u4e8e\u6709\u4e00\u4e2a\u65b0\u4e32\u7ecf\u8fc7\uff0c\u6307\u9488\u5411\u4e0b\u79fb\u52a8 ++ p ; node -> count += 1 ; // \u8fd9\u884c\u4ee3\u7801\u7528\u4e8e\u7edf\u8ba1\u6bcf\u4e2a\u5355\u8bcd\u524d\u7f00\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4e5f\u5305\u62ec\u7edf\u8ba1\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff09 } node -> exist = true ; // \u5355\u8bcd\u7ed3\u675f\u7684\u5730\u65b9\u6807\u8bb0\u6b64\u5904\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5355\u8bcd } int Trie_search ( Trie root , char * word ) { Trie node = root ; char * p = word ; int id ; while ( * p ) { id = * p - 'a' ; node = node -> next [ id ]; ++ p ; if ( node == NULL ) return 0 ; } return node -> count ; } int main ( void ) { Trie root = createTrieNode (); // \u521d\u59cb\u5316\u5b57\u5178\u6811\u7684\u6839\u8282\u70b9 char str [ 12 ] ; bool flag = false ; while ( gets ( str )) { if ( flag ) printf ( \"%d \\n \" , Trie_search ( root , str )); else { if ( strlen ( str ) != 0 ) { Trie_insert ( root , str ); } else flag = true ; } } return 0 ; }","title":"Trie\u6811\u8be6\u89e3\u53ca\u5176\u5e94\u7528"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%283%29kmp%E7%AE%97%E6%B3%95/","text":"kmp\u7b97\u6cd5\u7b80\u5355\u4ecb\u7ecd \u00b6 \u7528\u9014 \u00b6 \u5728\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u9898\u76ee\u5f53\u4e2d\uff0c\u6211\u65f6\u5e38\u9047\u5230\u5982\u4e0b\u95ee\u9898: \u9898\u76ee\u4e2d\u7ed9\u5b9a\u4e86\u4e24\u4e2a\u5b57\u7b26\u4e32S\u548cT\uff0c\u8981\u6c42\u6211\u4eec\u5224\u65adT\u5728S\u4e2d\u662f\u5426\u6709\u8fc7\u51fa\u73b0\u5e76\u4e14\u8f93\u51faT\u5728S\u5f53\u4e2d\u5177\u4f53\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u79f0\u5b57\u7b26\u4e32S\u4e3a\u6587\u672c\u4e32\uff08\u4e5f\u53eb\u4e3b\u4e32\uff09\uff0c\u79f0T\u4e3a\u6a21\u5f0f\u4e32 \u5728\u4e0d\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u60c5\u51b5\u4e4b\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u91c7\u53d6\u6734\u7d20\u5b57\u7b26\u4e32\u5339\u914d\u65b9\u6cd5 \u539f\u7406\uff1a\u4ece\u4e3b\u4e32\u7684\u6307\u5b9a\u7684\u8d77\u59cb\u4f4d\u7f6e\u5b57\u7b26\u5f00\u59cb\u548c\u6a21\u5f0f\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u4e0d\u7b49\uff0c\u5219\u4ece\u4e3b\u4e32\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u548c\u6a21\u5f0f\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u6bd4\u8f83\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6a21\u5f0f\u4e32\u6240\u6709\u5b57\u7b26\u90fd\u5339\u914d\u5b8c\u6210\uff0c\u5219\u5339\u914d\u6210\u529f\uff0c\u5426\u5219\uff0c\u5339\u914d\u4e0d\u6210\u529f\u3002 \u6b63\u5982\u5176\u540d\u79f0\u4e00\u822c\uff0c\u4ee3\u7801\u4e5f\u76f8\u5f53\u6734\u7d20 int index_force ( char * s , char * t , int pos ) { int i = pos -1 ; //\u5224\u65adpos\u662f\u5426\u5408\u6cd5 if ( ! s [ i ]) cout << \"\u8d77\u59cb\u4f4d\u7f6e\u4e0d\u5408\u6cd5\" << endl ; int j = 0 ; while ( s [ i ] != '\\0' && t [ j ] != '\\0' ) //\u4e3b\u4e32\u6216\u8005\u6a21\u5f0f\u4e32\u904d\u5386\u5b8c\u6210 { if ( s [ i ] == t [ j ]) //\u5982\u679c\u4e3b\u4e32\u548c\u6a21\u5f0f\u4e32\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u76f8\u7b49\uff0c\u5219\u6bd4\u8f83\u540e\u9762\u7684\u5b57\u7b26 { ++ i ; ++ j ; } else //\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219\u6a21\u5f0f\u4e32\u9700\u8981\u56de\u6714\u5230\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c\u4e3b\u4e32\u5219\u4ece\u4e0b\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb { i = i - j + 1 ; j = 0 ; } } if ( t [ j ] == '\\0' ) //\u5982\u679c\u5faa\u73af\u662f\u7531\u4e8e\u6a21\u5f0f\u4e32\u904d\u5386\u5b8c\u4e86\u800c\u7ed3\u675f\u7684\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u5bf9\u5e94\u5b50\u4e32\u7684\u4f4d\u7f6e { return i - j + 1 ; } else //\u5426\u5219\uff0c\u4e3b\u4e32\u4e0d\u5305\u542b\u6a21\u5f0f\u4e32 { return 0 ; } } \u7531\u4e8e\u4ece\u539f\u7406\u5230\u5b9e\u73b0\u90fd\u6bd4\u8f83\u7b80\u5355\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u5c31\u4e0d\u7ec6\u8bb2\u4e86 \u4e0d\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\u6709\u4e00\u4e2a\u975e\u5e38\u81f4\u547d\u7684\u7f3a\u9677\u5c31\u662f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u9010\u4e2a\u5339\u914d\u7684\uff0c\u5bf9\u4e8e\u957f\u5ea6\u4e3am\u7684\u4e3b\u4e32\u548c\u957f\u5ea6\u4e3an\u7684\u6a21\u5f0f\u4e32\uff0c \u5176\u4e32\u7684\u5339\u914d\u6b21\u6570\u4e3am-n+1\u6b21\uff0c\u800c\u6bcf\u4e00\u6b21\u5339\u914d\u90fd\u9700\u8981\u68c0\u7d22\u6a21\u5f0f\u4e32\u4e2d\u7684n\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u4e00\u5171\u5c31\u9700\u8981\u8fdb\u884c(m-n+1)*n\u6b21\uff0c\u5f53\u6211\u4eec\u8bbe\u5b9am-n+1\u548cn\u5728\u540c\u4e00\u4e2a\u6570\u91cf\u7ea7\u7684\u65f6\u5019\uff0c\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1\u4e8e $$ O(n^2) $$ \u597d\u50cf\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u4e0d\u5b8c\u5168\u80fd\u63a5\u53d7 \u5f53n\u7684\u8303\u56f4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u663e\u7136\u8fd9\u79cd\u505a\u6cd5\u5c31\u5e94\u8be5\u88abpass\u6389\u4e86 \u4e3a\u4e86\u9488\u5bf9\u8fd9\u79cd\u4e00\u5bf9\u4e00\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\u8fdb\u884c\u6539\u8fdb\uff0c\u6211\u4eec\u5f15\u5165\u4e86KMP\u7b97\u6cd5\u6765\u63d0\u5347\u6548\u7387 KMP\u7b97\u6cd5\u662f\u4e00\u79cd\u8f83\u4e3a\u9ad8\u6548\u7684\uff0c\u7528\u4e8e\u89e3\u51b3\u5355\u6a21\u5f0f\u4e32\u5339\u914d\u5355\u4e3b\u4e32\u95ee\u9898\u7684\u7b97\u6cd5 # \u57fa\u672c\u601d\u60f3/\u539f\u7406 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u6734\u7d20\u5b57\u7b26\u4e32\u5339\u914d\u65b9\u6cd5\u5f53\u4e2d\uff0c\u5176\u4f4e\u6548\u4e3b\u8981\u6e90\u81ea\u4e8e\u4e00\u4e9b\u65e0\u7528\u7684\u91cd\u590d\u5339\u914d\uff0c\u5f53\u6211\u4eec\u7528\u8089\u773c\u89c2\u5bdf\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u6a21\u5f0f\u4e32ABCABCD\u7684\u65f6\u5019\uff0c\u524d\u540e\u6709\u4e0d\u540c\u4f4d\u7f6e\u7684\u4e24\u4e2aA AB ABC\u8fd9\u4e09\u79cd\u5b50\u4e32\uff0c\u5982\u679c\u5728\u67d0\u4e00\u4e2a\u5339\u914d\u5f53\u4e2d\u540e\u9762\u7684\u4f4d\u7f6e\u662f\u5339\u914d\u4e0a\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u9010\u4e2a\u7684\u79fb\u52a8\u5339\u914d\u7684\u5934\u6307\u9488\uff0c\u800c\u53ef\u4ee5\u76f4\u63a5\u628a\u6a21\u5f0f\u4e32\u524d\u9762\u7684\u90e8\u5206\u79fb\u52a8\u81f3\u540e\u9762\u5df2\u7ecf\u5339\u914d\u8fc7\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u53ef\u4ee5\u6781\u5927\u5730\u589e\u5927\u5339\u914d\u7684\u6548\u7387\uff0c\u800c\u8fd9\u4e5f\u662fKMP\u7b97\u6cd5\u7684\u6839\u672c\u539f\u7406: \u901a\u8fc7\u5bf9\u6a21\u5f0f\u4e32\u7684\u4e00\u4e2a\u9884\u5904\u7406\uff0c\u5927\u91cf\u51cf\u5c11\u4e86\u65e0\u7528\u7684\u6307\u9488\u79fb\u52a8\uff0c\u4ece\u800c\u51cf\u5c11\u5339\u914d\u6b21\u6570\uff0c\u6700\u7ec8\u5c06\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u51cf\u5c11\u5230\u4e86\u4e00\u4e2a\u7ebf\u6027\u7684\u6c34\u5e73 \u6bd4\u5982\u8bf4\u5728\u5982\u4e0b\u7684\u56fe\u5f53\u4e2d \u73b0\u5728\u6a21\u5f0f\u4e32\u7684\u7b2c\u516d\u4e2a\u5b57\u7b26\u548c\u4e3b\u4e32\u5339\u914d\u4e0d\u4e0a\u4e86\uff0c\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5c31\u9700\u8981\u628a\u6a21\u5f0f\u4e32\u5f80\u53f3\u79fb\u52a8\uff0c\u5e76\u4e14\u91cd\u65b0\u9009\u62e9\u4e3b\u4e32\u548c\u6a21\u5f0f\u4e32\u7684\u6bd4\u8f83\u4f4d\u7f6e\u91cd\u65b0\u5f00\u59cb\u6bd4\u8f83\u3002\u90a3\u4e48\u5982\u679c\u662f\u6734\u7d20\u6cd5\u7684\u8bdd\uff0c\u6211\u4eec\u662f\u76f4\u63a5\u628a\u6a21\u5f0f\u4e32\u5f80\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u7136\u540e\uff0c\u4e3b\u4e32\u7684\u7b2c\u56db\u4e2a\u5b57\u7b26\u548c\u6211\u4eec\u6a21\u5f0f\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u91cd\u65b0\u5f00\u59cb\u505a\u6bd4\u8f83\u3002\u4f46\u662f\uff0c\u4f60\u8981\u77e5\u9053\u5176\u5b9e\u4e3b\u4e32\u7684\u7b2c\u4e09\u4e2a\u5b57\u7b26\u5230\u7b2c\u516d\u4e2a\u5b57\u7b26\u6211\u4eec\u90fd\u662f\u5df2\u7ecf\u548c\u6a21\u5f0f\u4e32\u505a\u8fc7\u6bd4\u8f83\u7684\uff0c\u800c\u4e14\u6211\u4eec\u77e5\u9053\u4ed6\u4eec\u7684\u5404\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u628a\u8fd9\u4e9b\u5df2\u7ecf\u77e5\u9053\u7684\u4fe1\u606f\u5145\u5206\u5229\u7528\u8d77\u6765\u4e86\uff1f\u6bd4\u5982\uff1a\u6211\u4eec\u77e5\u9053\u6a21\u5f0f\u4e32\u4e2d\u7ea2\u8272\u7684\u4e24\u4e2a\u5b57\u7b26\u548c\u7eff\u8272\u7684\u4e24\u4e2a\u5b57\u7b26\u662f\u76f8\u7b49\u7684\uff0c\u800c\u4e14\u7ea2\u8272\u7684\u4e24\u4e2a\u5b57\u7b26\u6b63\u597d\u662f\u6a21\u5f0f\u4e32\u5f00\u59cb\u7684\u4e24\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u6a21\u5f0f\u4e32\u5411\u53f3\u79fb\u52a8\u56db\u4f4d\uff0c\u7136\u540e\uff0c\u6211\u4eec\u4e3b\u4e32\u4ece\u521a\u624d\u53d1\u73b0\u4e0d\u5339\u914d\u90a3\u4e2a\u5b57\u7b26\u4f4d\u7f6e\u5f00\u59cb\u548c\u6a21\u5f0f\u4e32\u7684\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u6bd4\u8f83\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u51cf\u5c11\u4e94\u6b21\u6bd4\u8f83\u3002 \u5c06\u8fd9\u79cd\u505a\u6cd5\u8fdb\u884c\u4ee3\u7801\u7684\u5b9e\u73b0\uff0c\u5c31\u662fKMP\u7b97\u6cd5\u3002 # \u5b9e\u73b0\u65b9\u6cd5 \u4e3a\u4e86\u5b9e\u73b0KMP\u7b97\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165next\u6570\u7ec4\u8fd9\u4e2a\u6982\u5ff5 \u901a\u8fc7\u9884\u5904\u7406\u6211\u4eec\u53ef\u5f97\u5230next\u6570\u7ec4\uff0cnext\u6570\u7ec4\u7684\u542b\u4e49\u5c31\u662f\u4e00\u4e2a\u56fa\u5b9a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u76f8\u540c\u7684\u957f\u5ea6\u3002 \u5982\u679c\u4e0a\u8ff0\u8bf4\u6cd5\u6709\u4e9b\u96be\u61c2\u7684\u8bdd\uff0c\u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\uff0c\u5b83\u4fdd\u5b58\u7684\u4e1c\u897f\u5c31\u662f\u5f53\u6211\u4eec\u5728\u6a21\u5f0f\u4e32\u67d0\u4e2a\u4f4d\u7f6e\u5339\u914d\u5931\u8d25\u540e\uff0c\u5e94\u8be5\u4ece\u6a21\u5f0f\u4e32\u7684\u54ea\u4e2a\u4f4d\u7f6e\u91cd\u65b0\u5f00\u59cb\u6bd4\u8f83\u3002 \u6bd4\u5982\uff1aabcjkdabc\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u76f8\u540c\u5fc5\u7136\u662fabc\u3002 cbcbc\uff0c\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u76f8\u540c\u662fcbc\u3002 abcbc\uff0c\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u76f8\u540c\u662f\u4e0d\u5b58\u5728\u7684\u3002 \u6ce8\u610f\u6700\u957f\u524d\u7f00\uff1a\u662f\u8bf4\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\uff0c\u4f46\u662f\u4e0d\u5305\u542b\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002 \u6bd4\u5982aaaa\u76f8\u540c\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u662faaa\u3002 \u5bf9\u4e8e\u76ee\u6807\u5b57\u7b26\u4e32ptr\uff0cababaca\uff0c\u957f\u5ea6\u662f7\uff0c\u6240\u4ee5next[0]\uff0cnext[1]\uff0cnext[2]\uff0cnext[3]\uff0cnext[4]\uff0cnext[5]\uff0cnext[6]\u5206\u522b\u8ba1\u7b97\u7684\u662f a\uff0cab\uff0caba\uff0cabab\uff0cababa\uff0cababac\uff0cababaca\u7684\u76f8\u540c\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u7684\u957f\u5ea6\u3002\u7531\u4e8ea\uff0cab\uff0caba\uff0cabab\uff0cababa\uff0cababac\uff0cababaca\u7684\u76f8\u540c\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u662f\u201c\u201d\uff0c\u201c\u201d\uff0c\u201ca\u201d\uff0c\u201cab\u201d\uff0c\u201caba\u201d\uff0c\u201c\u201d\uff0c\u201ca\u201d,\u6240\u4ee5next\u6570\u7ec4\u7684\u503c\u662f[-1,-1,0,1,2,-1,0]\uff0c\u8fd9\u91cc-1\u8868\u793a\u4e0d\u5b58\u5728\uff0c0\u8868\u793a\u5b58\u5728\u957f\u5ea6\u4e3a1\uff0c2\u8868\u793a\u5b58\u5728\u957f\u5ea6\u4e3a3\u3002\u8fd9\u662f\u4e3a\u4e86\u548c\u4ee3\u7801\u76f8\u5bf9\u5e94\u3002 \u4ee5**\u57fa\u672c\u601d\u60f3/\u539f\u7406**\u4e2d\u7684\u4f8b\u5b50\u4f5c\u4e3a\u6807\u51c6\uff0c\u8981\u6c42\u5f97next\u6570\u7ec4\uff0c\u6211\u4eec\u5c31\u8981\u7406\u89e3\u5728\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4ece\u6a21\u5f0f\u4e32\u7684\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u91cd\u65b0\u5f00\u59cb\u6bd4\u8f83\u3002\u5176\u5b9enext\u6570\u7ec4\u5c31\u662f\u8bf4\u5bf9\u4e8e\u6a21\u5f0f\u4e32j\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\uff081\u5230j-1\uff09\u7684\u4e32\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4ece\u6a21\u5f0f\u4e32\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u53d1\u5f80\u53f3\u79fb\u52a8\u5f97\u5230\u7684\u5b50\u4e32\u548c\u4ece\u6a21\u5f0f\u4e32\u7684\u7b2cj-1\u4e2a\u5b57\u7b26\u4f4d\u7f6e\u51fa\u53d1\u5f80\u5de6\u79fb\u52a8\u5f97\u5230\u7684\u5b50\u4e32\u5339\u914d\uff0c\u800c\u4e14\u5f53\u8be5\u4e32\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u65f6\uff0c\u5219next\u503c\u5c31\u662f\u8be5\u4e32\u7684\u957f\u5ea6\u52a0\u4e00\uff0c\u4f8b\u5982\uff1aabaabc\u8fd9\u4e2a\u6a21\u5f0f\u4e32\u4e2d\uff0c\u5728c\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u5b58\u5728\u4e00\u4e2a\u6700\u5927\u5b50\u4e32\uff1aab\u3002\u7136\u540e\uff0c\u6211\u4eecnext\u503c\u5c31\u662f\u8bb0\u5f55\u8fd9\u4e2a\u6700\u5927\u5b50\u4e32\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5176\u5b9e\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u4e5f\u5c31\u7406\u89e3\u5230\u4e86\u4e3a\u4ec0\u4e48\u8981\u7b2c\u4e09\u4e2a\u5b57\u7b26\u4e86\uff0c\u56e0\u4e3a\u6a21\u5f0f\u4e32\u7684\u524d\u4e24\u4e2a\u5b57\u7b26\u5df2\u7ecf\u548c\u4e3b\u4e32\u5339\u914d\u6210\u529f\u4e86\uff08\u751f\u6210next\u503c\u7684\u65f6\u5019\uff0c\u5c31\u5b8c\u6210\u4e86\u8fd9\u4e2a\u4efb\u52a1\uff09\uff0c\u6240\u4ee5\u4e0d\u7528\u518d\u6bd4\u8f83\u4e86\u3002 \u6c42\u5f97next\u6570\u7ec4\u7684\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u5176\u601d\u60f3\u662f\u8f83\u96be\u7406\u89e3\u7684\uff0c\u9700\u8981\u5bf9\u4e8e\u4ee3\u7801\u8fdb\u884c\u53cd\u590d\u9605\u8bfb\u548c\u6df1\u5165\u4f53\u4f1a void cal_next ( char * str , int * next , int len ) { next [ 0 ] = -1 ; //next[0]\u521d\u59cb\u5316\u4e3a-1\uff0c-1\u8868\u793a\u4e0d\u5b58\u5728\u76f8\u540c\u7684\u6700\u5927\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00 int k = -1 ; //k\u521d\u59cb\u5316\u4e3a-1 for ( int q = 1 ; q <= len -1 ; q ++ ) { while ( k > -1 && str [ k + 1 ] != str [ q ]) //\u5982\u679c\u4e0b\u4e00\u4e2a\u4e0d\u540c\uff0c\u90a3\u4e48k\u5c31\u53d8\u6210next[k]\uff0c\u6ce8\u610fnext[k]\u662f\u5c0f\u4e8ek\u7684\uff0c\u65e0\u8bbak\u53d6\u4efb\u4f55\u503c\u3002 { k = next [ k ]; //\u5f80\u524d\u56de\u6eaf } if ( str [ k + 1 ] == str [ q ]) //\u5982\u679c\u76f8\u540c\uff0ck++ { k = k + 1 ; } next [ q ] = k ; //\u8fd9\u4e2a\u662f\u628a\u7b97\u7684k\u7684\u503c\uff08\u5c31\u662f\u76f8\u540c\u7684\u6700\u5927\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00\u957f\uff09\u8d4b\u7ed9next[q] } } KMP\u7684\u8fc7\u7a0b\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5728\u4e3b\u4e32\u4e0a\u4e0d\u65ad\u5730\u8dd1next\u6570\u7ec4\u7684\u8fc7\u7a0b\uff0c\u4ee3\u7801\u5982\u4e0b int KMP ( char * str , int slen , char * ptr , int plen ) { int * next = new int [ plen ]; cal_next ( ptr , next , plen ); //\u8ba1\u7b97next\u6570\u7ec4 int k = -1 ; for ( int i = 0 ; i < slen ; i ++ ) { while ( k > -1 && ptr [ k + 1 ] != str [ i ]) //ptr\u548cstr\u4e0d\u5339\u914d\uff0c\u4e14k>-1\uff08\u8868\u793aptr\u548cstr\u6709\u90e8\u5206\u5339\u914d\uff09 k = next [ k ]; //\u5f80\u524d\u56de\u6eaf if ( ptr [ k + 1 ] == str [ i ]) k = k + 1 ; if ( k == plen -1 ) //\u8bf4\u660ek\u79fb\u52a8\u5230ptr\u7684\u6700\u672b\u7aef { //cout << \"\u5728\u4f4d\u7f6e\" << i-plen+1<< endl; //k = -1;//\u91cd\u65b0\u521d\u59cb\u5316\uff0c\u5bfb\u627e\u4e0b\u4e00\u4e2a //i = i - plen + 1;//i\u5b9a\u4f4d\u5230\u8be5\u4f4d\u7f6e\uff0c\u5916\u5c42for\u5faa\u73afi++\u53ef\u4ee5\u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\uff08\u8fd9\u91cc\u9ed8\u8ba4\u5b58\u5728\u4e24\u4e2a\u5339\u914d\u5b57\u7b26\u4e32\u53ef\u4ee5\u90e8\u5206\u91cd\u53e0\uff09\uff0c\u611f\u8c22\u8bc4\u8bba\u4e2d\u540c\u5b66\u6307\u51fa\u9519\u8bef\u3002 return i - plen + 1 ; //\u8fd4\u56de\u76f8\u5e94\u7684\u4f4d\u7f6e } } return -1 ; } \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5339\u914d\u4e32\u6bcf\u6b21\u5f80\u524d\u79fb\u52a8\uff0c\u90fd\u662f\u4e00\u5927\u6bb5\u4e00\u5927\u6bb5\u79fb\u52a8\uff0c\u5047\u8bbe\u5339\u914d\u4e32\u91cc\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u524d\u7f00\u548c\u540e\u7f00\uff0c\u5373next\u7684\u503c\u90fd\u662f-1\uff0c\u90a3\u4e48\u6bcf\u6b21\u79fb\u52a8\u5176\u5b9e\u5c31\u662f\u4e00\u6574\u4e2a\u5339\u914d\u4e32\u5f80\u524d\u79fb\u52a8m\u4e2a\u8ddd\u79bb\u3002\u7136\u540e\u91cd\u65b0\u4e00\u4e00\u6bd4\u8f83\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83m\u6b21\uff0c\u6982\u62ec\u4e3a\uff0c\u79fb\u52a8m\u8ddd\u79bb\uff0c\u6bd4\u8f83m\u6b21\uff0c\u79fb\u5230\u672b\u5c3e\uff0c\u5c31\u662f\u6bd4\u8f83n\u6b21\uff0cO(n)\u590d\u6742\u5ea6\u3002 \u5047\u8bbe\u5339\u914d\u4e32\u91cc\u5b58\u5728\u91cd\u590d\u7684\u524d\u7f00\u548c\u540e\u7f00\uff0c\u6211\u4eec\u79fb\u52a8\u7684\u8ddd\u79bb\u76f8\u5bf9\u5c0f\u4e86\u70b9\uff0c\u4f46\u662f\u6bd4\u8f83\u7684\u6b21\u6570\u4e5f\u5c0f\u4e86\uff0c\u6574\u4f53\u4ee3\u4ef7\u4e5f\u662fO(n)\u3002 \u6240\u4ee5\u590d\u6742\u5ea6\u5c31\u6210\u4e86\u7ebf\u6027\u3002 \u5f53\u7136\uff0cnext\u6570\u7ec4\u53ef\u4ee5\u6709\u66f4\u6df1\u7684\u7406\u89e3\uff0c\u53ef\u4ee5\u53bb\u53c2\u8003\u4e00\u4e0bNOI2014\u7684\u52a8\u7269\u56ed\uff0c\u4e0d\u8fc7\u5728\u672c\u7bc7\u4e2d\u4e3b\u8981\u6d89\u53caKMP\u76f8\u5173\u7684\u77e5\u8bc6\u70b9\uff0c\u56e0\u6b64\u4e0d\u591a\u8d58\u8ff0\u3002","title":"kmp\u7b97\u6cd5\u7b80\u5355\u4ecb\u7ecd"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%283%29kmp%E7%AE%97%E6%B3%95/#kmp","text":"","title":"kmp\u7b97\u6cd5\u7b80\u5355\u4ecb\u7ecd"},{"location":"algorithm/string/string%E8%BF%9B%E9%98%B6%283%29kmp%E7%AE%97%E6%B3%95/#_1","text":"\u5728\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u9898\u76ee\u5f53\u4e2d\uff0c\u6211\u65f6\u5e38\u9047\u5230\u5982\u4e0b\u95ee\u9898: \u9898\u76ee\u4e2d\u7ed9\u5b9a\u4e86\u4e24\u4e2a\u5b57\u7b26\u4e32S\u548cT\uff0c\u8981\u6c42\u6211\u4eec\u5224\u65adT\u5728S\u4e2d\u662f\u5426\u6709\u8fc7\u51fa\u73b0\u5e76\u4e14\u8f93\u51faT\u5728S\u5f53\u4e2d\u5177\u4f53\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u79f0\u5b57\u7b26\u4e32S\u4e3a\u6587\u672c\u4e32\uff08\u4e5f\u53eb\u4e3b\u4e32\uff09\uff0c\u79f0T\u4e3a\u6a21\u5f0f\u4e32 \u5728\u4e0d\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u60c5\u51b5\u4e4b\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u91c7\u53d6\u6734\u7d20\u5b57\u7b26\u4e32\u5339\u914d\u65b9\u6cd5 \u539f\u7406\uff1a\u4ece\u4e3b\u4e32\u7684\u6307\u5b9a\u7684\u8d77\u59cb\u4f4d\u7f6e\u5b57\u7b26\u5f00\u59cb\u548c\u6a21\u5f0f\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u4e0d\u7b49\uff0c\u5219\u4ece\u4e3b\u4e32\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u548c\u6a21\u5f0f\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u6bd4\u8f83\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6a21\u5f0f\u4e32\u6240\u6709\u5b57\u7b26\u90fd\u5339\u914d\u5b8c\u6210\uff0c\u5219\u5339\u914d\u6210\u529f\uff0c\u5426\u5219\uff0c\u5339\u914d\u4e0d\u6210\u529f\u3002 \u6b63\u5982\u5176\u540d\u79f0\u4e00\u822c\uff0c\u4ee3\u7801\u4e5f\u76f8\u5f53\u6734\u7d20 int index_force ( char * s , char * t , int pos ) { int i = pos -1 ; //\u5224\u65adpos\u662f\u5426\u5408\u6cd5 if ( ! s [ i ]) cout << \"\u8d77\u59cb\u4f4d\u7f6e\u4e0d\u5408\u6cd5\" << endl ; int j = 0 ; while ( s [ i ] != '\\0' && t [ j ] != '\\0' ) //\u4e3b\u4e32\u6216\u8005\u6a21\u5f0f\u4e32\u904d\u5386\u5b8c\u6210 { if ( s [ i ] == t [ j ]) //\u5982\u679c\u4e3b\u4e32\u548c\u6a21\u5f0f\u4e32\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u76f8\u7b49\uff0c\u5219\u6bd4\u8f83\u540e\u9762\u7684\u5b57\u7b26 { ++ i ; ++ j ; } else //\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219\u6a21\u5f0f\u4e32\u9700\u8981\u56de\u6714\u5230\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c\u4e3b\u4e32\u5219\u4ece\u4e0b\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb { i = i - j + 1 ; j = 0 ; } } if ( t [ j ] == '\\0' ) //\u5982\u679c\u5faa\u73af\u662f\u7531\u4e8e\u6a21\u5f0f\u4e32\u904d\u5386\u5b8c\u4e86\u800c\u7ed3\u675f\u7684\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u5bf9\u5e94\u5b50\u4e32\u7684\u4f4d\u7f6e { return i - j + 1 ; } else //\u5426\u5219\uff0c\u4e3b\u4e32\u4e0d\u5305\u542b\u6a21\u5f0f\u4e32 { return 0 ; } } \u7531\u4e8e\u4ece\u539f\u7406\u5230\u5b9e\u73b0\u90fd\u6bd4\u8f83\u7b80\u5355\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u5c31\u4e0d\u7ec6\u8bb2\u4e86 \u4e0d\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\u6709\u4e00\u4e2a\u975e\u5e38\u81f4\u547d\u7684\u7f3a\u9677\u5c31\u662f\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u9010\u4e2a\u5339\u914d\u7684\uff0c\u5bf9\u4e8e\u957f\u5ea6\u4e3am\u7684\u4e3b\u4e32\u548c\u957f\u5ea6\u4e3an\u7684\u6a21\u5f0f\u4e32\uff0c \u5176\u4e32\u7684\u5339\u914d\u6b21\u6570\u4e3am-n+1\u6b21\uff0c\u800c\u6bcf\u4e00\u6b21\u5339\u914d\u90fd\u9700\u8981\u68c0\u7d22\u6a21\u5f0f\u4e32\u4e2d\u7684n\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u4e00\u5171\u5c31\u9700\u8981\u8fdb\u884c(m-n+1)*n\u6b21\uff0c\u5f53\u6211\u4eec\u8bbe\u5b9am-n+1\u548cn\u5728\u540c\u4e00\u4e2a\u6570\u91cf\u7ea7\u7684\u65f6\u5019\uff0c\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1\u4e8e $$ O(n^2) $$ \u597d\u50cf\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u4e0d\u5b8c\u5168\u80fd\u63a5\u53d7 \u5f53n\u7684\u8303\u56f4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u663e\u7136\u8fd9\u79cd\u505a\u6cd5\u5c31\u5e94\u8be5\u88abpass\u6389\u4e86 \u4e3a\u4e86\u9488\u5bf9\u8fd9\u79cd\u4e00\u5bf9\u4e00\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\u8fdb\u884c\u6539\u8fdb\uff0c\u6211\u4eec\u5f15\u5165\u4e86KMP\u7b97\u6cd5\u6765\u63d0\u5347\u6548\u7387 KMP\u7b97\u6cd5\u662f\u4e00\u79cd\u8f83\u4e3a\u9ad8\u6548\u7684\uff0c\u7528\u4e8e\u89e3\u51b3\u5355\u6a21\u5f0f\u4e32\u5339\u914d\u5355\u4e3b\u4e32\u95ee\u9898\u7684\u7b97\u6cd5 # \u57fa\u672c\u601d\u60f3/\u539f\u7406 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u6734\u7d20\u5b57\u7b26\u4e32\u5339\u914d\u65b9\u6cd5\u5f53\u4e2d\uff0c\u5176\u4f4e\u6548\u4e3b\u8981\u6e90\u81ea\u4e8e\u4e00\u4e9b\u65e0\u7528\u7684\u91cd\u590d\u5339\u914d\uff0c\u5f53\u6211\u4eec\u7528\u8089\u773c\u89c2\u5bdf\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u6a21\u5f0f\u4e32ABCABCD\u7684\u65f6\u5019\uff0c\u524d\u540e\u6709\u4e0d\u540c\u4f4d\u7f6e\u7684\u4e24\u4e2aA AB ABC\u8fd9\u4e09\u79cd\u5b50\u4e32\uff0c\u5982\u679c\u5728\u67d0\u4e00\u4e2a\u5339\u914d\u5f53\u4e2d\u540e\u9762\u7684\u4f4d\u7f6e\u662f\u5339\u914d\u4e0a\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u9010\u4e2a\u7684\u79fb\u52a8\u5339\u914d\u7684\u5934\u6307\u9488\uff0c\u800c\u53ef\u4ee5\u76f4\u63a5\u628a\u6a21\u5f0f\u4e32\u524d\u9762\u7684\u90e8\u5206\u79fb\u52a8\u81f3\u540e\u9762\u5df2\u7ecf\u5339\u914d\u8fc7\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u53ef\u4ee5\u6781\u5927\u5730\u589e\u5927\u5339\u914d\u7684\u6548\u7387\uff0c\u800c\u8fd9\u4e5f\u662fKMP\u7b97\u6cd5\u7684\u6839\u672c\u539f\u7406: \u901a\u8fc7\u5bf9\u6a21\u5f0f\u4e32\u7684\u4e00\u4e2a\u9884\u5904\u7406\uff0c\u5927\u91cf\u51cf\u5c11\u4e86\u65e0\u7528\u7684\u6307\u9488\u79fb\u52a8\uff0c\u4ece\u800c\u51cf\u5c11\u5339\u914d\u6b21\u6570\uff0c\u6700\u7ec8\u5c06\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u51cf\u5c11\u5230\u4e86\u4e00\u4e2a\u7ebf\u6027\u7684\u6c34\u5e73 \u6bd4\u5982\u8bf4\u5728\u5982\u4e0b\u7684\u56fe\u5f53\u4e2d \u73b0\u5728\u6a21\u5f0f\u4e32\u7684\u7b2c\u516d\u4e2a\u5b57\u7b26\u548c\u4e3b\u4e32\u5339\u914d\u4e0d\u4e0a\u4e86\uff0c\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5c31\u9700\u8981\u628a\u6a21\u5f0f\u4e32\u5f80\u53f3\u79fb\u52a8\uff0c\u5e76\u4e14\u91cd\u65b0\u9009\u62e9\u4e3b\u4e32\u548c\u6a21\u5f0f\u4e32\u7684\u6bd4\u8f83\u4f4d\u7f6e\u91cd\u65b0\u5f00\u59cb\u6bd4\u8f83\u3002\u90a3\u4e48\u5982\u679c\u662f\u6734\u7d20\u6cd5\u7684\u8bdd\uff0c\u6211\u4eec\u662f\u76f4\u63a5\u628a\u6a21\u5f0f\u4e32\u5f80\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u7136\u540e\uff0c\u4e3b\u4e32\u7684\u7b2c\u56db\u4e2a\u5b57\u7b26\u548c\u6211\u4eec\u6a21\u5f0f\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u91cd\u65b0\u5f00\u59cb\u505a\u6bd4\u8f83\u3002\u4f46\u662f\uff0c\u4f60\u8981\u77e5\u9053\u5176\u5b9e\u4e3b\u4e32\u7684\u7b2c\u4e09\u4e2a\u5b57\u7b26\u5230\u7b2c\u516d\u4e2a\u5b57\u7b26\u6211\u4eec\u90fd\u662f\u5df2\u7ecf\u548c\u6a21\u5f0f\u4e32\u505a\u8fc7\u6bd4\u8f83\u7684\uff0c\u800c\u4e14\u6211\u4eec\u77e5\u9053\u4ed6\u4eec\u7684\u5404\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u628a\u8fd9\u4e9b\u5df2\u7ecf\u77e5\u9053\u7684\u4fe1\u606f\u5145\u5206\u5229\u7528\u8d77\u6765\u4e86\uff1f\u6bd4\u5982\uff1a\u6211\u4eec\u77e5\u9053\u6a21\u5f0f\u4e32\u4e2d\u7ea2\u8272\u7684\u4e24\u4e2a\u5b57\u7b26\u548c\u7eff\u8272\u7684\u4e24\u4e2a\u5b57\u7b26\u662f\u76f8\u7b49\u7684\uff0c\u800c\u4e14\u7ea2\u8272\u7684\u4e24\u4e2a\u5b57\u7b26\u6b63\u597d\u662f\u6a21\u5f0f\u4e32\u5f00\u59cb\u7684\u4e24\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u6a21\u5f0f\u4e32\u5411\u53f3\u79fb\u52a8\u56db\u4f4d\uff0c\u7136\u540e\uff0c\u6211\u4eec\u4e3b\u4e32\u4ece\u521a\u624d\u53d1\u73b0\u4e0d\u5339\u914d\u90a3\u4e2a\u5b57\u7b26\u4f4d\u7f6e\u5f00\u59cb\u548c\u6a21\u5f0f\u4e32\u7684\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u6bd4\u8f83\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u51cf\u5c11\u4e94\u6b21\u6bd4\u8f83\u3002 \u5c06\u8fd9\u79cd\u505a\u6cd5\u8fdb\u884c\u4ee3\u7801\u7684\u5b9e\u73b0\uff0c\u5c31\u662fKMP\u7b97\u6cd5\u3002 # \u5b9e\u73b0\u65b9\u6cd5 \u4e3a\u4e86\u5b9e\u73b0KMP\u7b97\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165next\u6570\u7ec4\u8fd9\u4e2a\u6982\u5ff5 \u901a\u8fc7\u9884\u5904\u7406\u6211\u4eec\u53ef\u5f97\u5230next\u6570\u7ec4\uff0cnext\u6570\u7ec4\u7684\u542b\u4e49\u5c31\u662f\u4e00\u4e2a\u56fa\u5b9a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u76f8\u540c\u7684\u957f\u5ea6\u3002 \u5982\u679c\u4e0a\u8ff0\u8bf4\u6cd5\u6709\u4e9b\u96be\u61c2\u7684\u8bdd\uff0c\u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\uff0c\u5b83\u4fdd\u5b58\u7684\u4e1c\u897f\u5c31\u662f\u5f53\u6211\u4eec\u5728\u6a21\u5f0f\u4e32\u67d0\u4e2a\u4f4d\u7f6e\u5339\u914d\u5931\u8d25\u540e\uff0c\u5e94\u8be5\u4ece\u6a21\u5f0f\u4e32\u7684\u54ea\u4e2a\u4f4d\u7f6e\u91cd\u65b0\u5f00\u59cb\u6bd4\u8f83\u3002 \u6bd4\u5982\uff1aabcjkdabc\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u76f8\u540c\u5fc5\u7136\u662fabc\u3002 cbcbc\uff0c\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u76f8\u540c\u662fcbc\u3002 abcbc\uff0c\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u76f8\u540c\u662f\u4e0d\u5b58\u5728\u7684\u3002 \u6ce8\u610f\u6700\u957f\u524d\u7f00\uff1a\u662f\u8bf4\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\uff0c\u4f46\u662f\u4e0d\u5305\u542b\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002 \u6bd4\u5982aaaa\u76f8\u540c\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u662faaa\u3002 \u5bf9\u4e8e\u76ee\u6807\u5b57\u7b26\u4e32ptr\uff0cababaca\uff0c\u957f\u5ea6\u662f7\uff0c\u6240\u4ee5next[0]\uff0cnext[1]\uff0cnext[2]\uff0cnext[3]\uff0cnext[4]\uff0cnext[5]\uff0cnext[6]\u5206\u522b\u8ba1\u7b97\u7684\u662f a\uff0cab\uff0caba\uff0cabab\uff0cababa\uff0cababac\uff0cababaca\u7684\u76f8\u540c\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u7684\u957f\u5ea6\u3002\u7531\u4e8ea\uff0cab\uff0caba\uff0cabab\uff0cababa\uff0cababac\uff0cababaca\u7684\u76f8\u540c\u7684\u6700\u957f\u524d\u7f00\u548c\u6700\u957f\u540e\u7f00\u662f\u201c\u201d\uff0c\u201c\u201d\uff0c\u201ca\u201d\uff0c\u201cab\u201d\uff0c\u201caba\u201d\uff0c\u201c\u201d\uff0c\u201ca\u201d,\u6240\u4ee5next\u6570\u7ec4\u7684\u503c\u662f[-1,-1,0,1,2,-1,0]\uff0c\u8fd9\u91cc-1\u8868\u793a\u4e0d\u5b58\u5728\uff0c0\u8868\u793a\u5b58\u5728\u957f\u5ea6\u4e3a1\uff0c2\u8868\u793a\u5b58\u5728\u957f\u5ea6\u4e3a3\u3002\u8fd9\u662f\u4e3a\u4e86\u548c\u4ee3\u7801\u76f8\u5bf9\u5e94\u3002 \u4ee5**\u57fa\u672c\u601d\u60f3/\u539f\u7406**\u4e2d\u7684\u4f8b\u5b50\u4f5c\u4e3a\u6807\u51c6\uff0c\u8981\u6c42\u5f97next\u6570\u7ec4\uff0c\u6211\u4eec\u5c31\u8981\u7406\u89e3\u5728\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4ece\u6a21\u5f0f\u4e32\u7684\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u91cd\u65b0\u5f00\u59cb\u6bd4\u8f83\u3002\u5176\u5b9enext\u6570\u7ec4\u5c31\u662f\u8bf4\u5bf9\u4e8e\u6a21\u5f0f\u4e32j\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\uff081\u5230j-1\uff09\u7684\u4e32\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4ece\u6a21\u5f0f\u4e32\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u53d1\u5f80\u53f3\u79fb\u52a8\u5f97\u5230\u7684\u5b50\u4e32\u548c\u4ece\u6a21\u5f0f\u4e32\u7684\u7b2cj-1\u4e2a\u5b57\u7b26\u4f4d\u7f6e\u51fa\u53d1\u5f80\u5de6\u79fb\u52a8\u5f97\u5230\u7684\u5b50\u4e32\u5339\u914d\uff0c\u800c\u4e14\u5f53\u8be5\u4e32\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u65f6\uff0c\u5219next\u503c\u5c31\u662f\u8be5\u4e32\u7684\u957f\u5ea6\u52a0\u4e00\uff0c\u4f8b\u5982\uff1aabaabc\u8fd9\u4e2a\u6a21\u5f0f\u4e32\u4e2d\uff0c\u5728c\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u5b58\u5728\u4e00\u4e2a\u6700\u5927\u5b50\u4e32\uff1aab\u3002\u7136\u540e\uff0c\u6211\u4eecnext\u503c\u5c31\u662f\u8bb0\u5f55\u8fd9\u4e2a\u6700\u5927\u5b50\u4e32\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5176\u5b9e\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u4e5f\u5c31\u7406\u89e3\u5230\u4e86\u4e3a\u4ec0\u4e48\u8981\u7b2c\u4e09\u4e2a\u5b57\u7b26\u4e86\uff0c\u56e0\u4e3a\u6a21\u5f0f\u4e32\u7684\u524d\u4e24\u4e2a\u5b57\u7b26\u5df2\u7ecf\u548c\u4e3b\u4e32\u5339\u914d\u6210\u529f\u4e86\uff08\u751f\u6210next\u503c\u7684\u65f6\u5019\uff0c\u5c31\u5b8c\u6210\u4e86\u8fd9\u4e2a\u4efb\u52a1\uff09\uff0c\u6240\u4ee5\u4e0d\u7528\u518d\u6bd4\u8f83\u4e86\u3002 \u6c42\u5f97next\u6570\u7ec4\u7684\u4ee3\u7801\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u5176\u601d\u60f3\u662f\u8f83\u96be\u7406\u89e3\u7684\uff0c\u9700\u8981\u5bf9\u4e8e\u4ee3\u7801\u8fdb\u884c\u53cd\u590d\u9605\u8bfb\u548c\u6df1\u5165\u4f53\u4f1a void cal_next ( char * str , int * next , int len ) { next [ 0 ] = -1 ; //next[0]\u521d\u59cb\u5316\u4e3a-1\uff0c-1\u8868\u793a\u4e0d\u5b58\u5728\u76f8\u540c\u7684\u6700\u5927\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00 int k = -1 ; //k\u521d\u59cb\u5316\u4e3a-1 for ( int q = 1 ; q <= len -1 ; q ++ ) { while ( k > -1 && str [ k + 1 ] != str [ q ]) //\u5982\u679c\u4e0b\u4e00\u4e2a\u4e0d\u540c\uff0c\u90a3\u4e48k\u5c31\u53d8\u6210next[k]\uff0c\u6ce8\u610fnext[k]\u662f\u5c0f\u4e8ek\u7684\uff0c\u65e0\u8bbak\u53d6\u4efb\u4f55\u503c\u3002 { k = next [ k ]; //\u5f80\u524d\u56de\u6eaf } if ( str [ k + 1 ] == str [ q ]) //\u5982\u679c\u76f8\u540c\uff0ck++ { k = k + 1 ; } next [ q ] = k ; //\u8fd9\u4e2a\u662f\u628a\u7b97\u7684k\u7684\u503c\uff08\u5c31\u662f\u76f8\u540c\u7684\u6700\u5927\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00\u957f\uff09\u8d4b\u7ed9next[q] } } KMP\u7684\u8fc7\u7a0b\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5728\u4e3b\u4e32\u4e0a\u4e0d\u65ad\u5730\u8dd1next\u6570\u7ec4\u7684\u8fc7\u7a0b\uff0c\u4ee3\u7801\u5982\u4e0b int KMP ( char * str , int slen , char * ptr , int plen ) { int * next = new int [ plen ]; cal_next ( ptr , next , plen ); //\u8ba1\u7b97next\u6570\u7ec4 int k = -1 ; for ( int i = 0 ; i < slen ; i ++ ) { while ( k > -1 && ptr [ k + 1 ] != str [ i ]) //ptr\u548cstr\u4e0d\u5339\u914d\uff0c\u4e14k>-1\uff08\u8868\u793aptr\u548cstr\u6709\u90e8\u5206\u5339\u914d\uff09 k = next [ k ]; //\u5f80\u524d\u56de\u6eaf if ( ptr [ k + 1 ] == str [ i ]) k = k + 1 ; if ( k == plen -1 ) //\u8bf4\u660ek\u79fb\u52a8\u5230ptr\u7684\u6700\u672b\u7aef { //cout << \"\u5728\u4f4d\u7f6e\" << i-plen+1<< endl; //k = -1;//\u91cd\u65b0\u521d\u59cb\u5316\uff0c\u5bfb\u627e\u4e0b\u4e00\u4e2a //i = i - plen + 1;//i\u5b9a\u4f4d\u5230\u8be5\u4f4d\u7f6e\uff0c\u5916\u5c42for\u5faa\u73afi++\u53ef\u4ee5\u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\uff08\u8fd9\u91cc\u9ed8\u8ba4\u5b58\u5728\u4e24\u4e2a\u5339\u914d\u5b57\u7b26\u4e32\u53ef\u4ee5\u90e8\u5206\u91cd\u53e0\uff09\uff0c\u611f\u8c22\u8bc4\u8bba\u4e2d\u540c\u5b66\u6307\u51fa\u9519\u8bef\u3002 return i - plen + 1 ; //\u8fd4\u56de\u76f8\u5e94\u7684\u4f4d\u7f6e } } return -1 ; } \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5339\u914d\u4e32\u6bcf\u6b21\u5f80\u524d\u79fb\u52a8\uff0c\u90fd\u662f\u4e00\u5927\u6bb5\u4e00\u5927\u6bb5\u79fb\u52a8\uff0c\u5047\u8bbe\u5339\u914d\u4e32\u91cc\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u524d\u7f00\u548c\u540e\u7f00\uff0c\u5373next\u7684\u503c\u90fd\u662f-1\uff0c\u90a3\u4e48\u6bcf\u6b21\u79fb\u52a8\u5176\u5b9e\u5c31\u662f\u4e00\u6574\u4e2a\u5339\u914d\u4e32\u5f80\u524d\u79fb\u52a8m\u4e2a\u8ddd\u79bb\u3002\u7136\u540e\u91cd\u65b0\u4e00\u4e00\u6bd4\u8f83\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83m\u6b21\uff0c\u6982\u62ec\u4e3a\uff0c\u79fb\u52a8m\u8ddd\u79bb\uff0c\u6bd4\u8f83m\u6b21\uff0c\u79fb\u5230\u672b\u5c3e\uff0c\u5c31\u662f\u6bd4\u8f83n\u6b21\uff0cO(n)\u590d\u6742\u5ea6\u3002 \u5047\u8bbe\u5339\u914d\u4e32\u91cc\u5b58\u5728\u91cd\u590d\u7684\u524d\u7f00\u548c\u540e\u7f00\uff0c\u6211\u4eec\u79fb\u52a8\u7684\u8ddd\u79bb\u76f8\u5bf9\u5c0f\u4e86\u70b9\uff0c\u4f46\u662f\u6bd4\u8f83\u7684\u6b21\u6570\u4e5f\u5c0f\u4e86\uff0c\u6574\u4f53\u4ee3\u4ef7\u4e5f\u662fO(n)\u3002 \u6240\u4ee5\u590d\u6742\u5ea6\u5c31\u6210\u4e86\u7ebf\u6027\u3002 \u5f53\u7136\uff0cnext\u6570\u7ec4\u53ef\u4ee5\u6709\u66f4\u6df1\u7684\u7406\u89e3\uff0c\u53ef\u4ee5\u53bb\u53c2\u8003\u4e00\u4e0bNOI2014\u7684\u52a8\u7269\u56ed\uff0c\u4e0d\u8fc7\u5728\u672c\u7bc7\u4e2d\u4e3b\u8981\u6d89\u53caKMP\u76f8\u5173\u7684\u77e5\u8bc6\u70b9\uff0c\u56e0\u6b64\u4e0d\u591a\u8d58\u8ff0\u3002","title":"\u7528\u9014"},{"location":"algorithm/tree/lca/lca%E6%B1%82%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","text":"LCA \u6700\u8fd1\u516c\u5171\u7956\u5148 \u00b6 \u5728\u4e00\u68f5\u6ca1\u6709\u73af\u7684\u6811\u4e0a\uff0c\u6bcf\u4e2a\u8282\u70b9\u80af\u5b9a\u6709\u5176\u7236\u4eb2\u8282\u70b9\u548c\u7956\u5148\u8282\u70b9\uff0c\u800c\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5c31\u662f\u4e24\u4e2a\u8282\u70b9\u5728\u8fd9\u68f5\u6811\u4e0a\u6df1\u5ea6\u6700\u5927\u7684\u516c\u5171\u7684\u7956\u5148\u8282\u70b9\u3002 \u3000\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4e24\u4e2a\u70b9\u5728\u8fd9\u68f5\u6811\u4e0a\u8ddd\u79bb\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u8282\u70b9\u3002 \u3000\u5bf9\u4e8e\u4e00\u68f5\u6709\u6743\u6811\uff0c \u5047\u8bbeu,v\u4e24\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148lca(v),\u82e5dis[u]\u8868\u793a\u6839\u8282\u70b9\u5230u\u7684\u957f\u5ea6\uff0c \u5219uv\u95f4\u7684\u8ddd\u79bb\u4e3adis=dis[u]+dis[v]-2*dis[lca(v)] \u6709\u4eba\u53ef\u80fd\u4f1a\u95ee\uff1a\u90a3\u4ed6\u672c\u8eab\u6216\u8005\u5176\u7236\u4eb2\u8282\u70b9\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u7956\u5148\u8282\u70b9\u5462\uff1f \u3000\u3000\u3000\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u5f88\u7b80\u5355\uff0c\u6309\u7167\u4eba\u7684\u4eb2\u621a\u89c2\u5ff5\u6765\u8bf4\uff0c \u4f60\u7684\u7236\u4eb2\u4e5f\u662f\u4f60\u7684\u7956\u5148 \uff0c\u800cLCA\u8fd8\u53ef\u4ee5**\u5c06\u81ea\u5df1\u89c6\u4e3a\u7956\u5148\u8282\u70b9**\u3002 \u3000\u3000\u3000\u4e3e\u4e2a\u4f8b\u5b50\u5427\uff0c\u5982\u4e0b\u56fe\u6240\u793a**\uff14**\u548c**\uff15**\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\uff12**\uff0c \uff15**\u548c**\uff13**\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u662f**\uff11 \uff0c \uff12**\u548c**\uff11**\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u662f**\uff11 \u3002\u3000 \u6c42LCA\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u6cd5: \u79bb\u7ebf\u7684DFS+\u5e76\u67e5\u96c6**\u548c**\u5728\u7ebf\u7684RMQ\u7b97\u6cd5 \u3000\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u8bf4\u5728\u7ebf\u548c\u79bb\u7ebf\u7684\u533a\u522b:\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u4e00\u4e2a\u5728\u7ebf\u7b97\u6cd5\u662f\u6307\u5b83\u53ef\u4ee5\u4ee5\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u4e00\u4e2a\u4e2a\u7684\u5904\u7406\u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u5f00\u59cb\u65f6\u5e76\u4e0d\u9700\u8981\u5df2\u7ecf\u77e5\u9053\u6240\u6709\u7684\u8f93\u5165\u3002\u76f8\u5bf9\u7684\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u79bb\u7ebf\u7b97\u6cd5\uff0c\u5728\u5f00\u59cb\u65f6\u5c31\u9700\u8981\u77e5\u9053\u95ee\u9898\u7684\u6240\u6709\u8f93\u5165\u6570\u636e\uff0c\u800c\u4e14\u5728\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u540e\u5c31\u8981\u7acb\u5373\u8f93\u51fa\u7ed3\u679c\u3002 \u5176\u4e2d,\u6839\u8282\u70b9\u662f\u53ef\u4ee5\u968f\u610f\u9009\u62e9\u7684 RMQ\u7b97\u6cd5 \u00b6 \u4e00\uff1aLCA\u548cRMQ\u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u5316\u7684 LCA\u8f6cRMQ\u7b97\u6cd5\u662f\u4e00\u4e2a\u5728\u7ebf\u7b97\u6cd5\uff1a\u5148\u7528\u65f6\u95f4\u53bb\u505a\u9884\u5904\u7406\uff0c\u7136\u540e\u6bcf\u8bfb\u5165\u4e00\u4e2a\u8be2\u95ee\uff0c\u5c31\u7528\u5f88\u77ed\u7684\u65f6\u95f4\u53bb\u56de\u7b54\u5b83\uff0c\u5373\u201d\u95ee\u4e00\u4e2a\u7b54\u4e00\u4e2a\uff0c\u56de\u7b54\u65f6\u95f4\u5f88\u77ed\u201c \u9884\u5907\u77e5\u8bc6\uff1aLCA\u8f6c\u4e3aRMQ\u540e\uff0c\u51e0\u4e4e\u662f\u88f8\u7684RMQ\uff0c\u8fd9\u91cc\u63a8\u8350ST\u7b97\u6cd5\u6c42\u89e3\uff0c\u5982\u679c\u4e0d\u61c2ST\u7b97\u6cd5\uff0c\u5148\u5b66\u4e60\u4e00\u4e0b RMQ\u7b97\u6cd5\u6c42LCA\u7684\u6a21\u677f\u5982\u4e0b: #include <cstdio> #include <cstring> #include <algorithm> using namespace std ; const int MAXN = 500010 ; const int MAXE = 500010 ; struct Node { int to , next , val ; }; Node edge [ MAXE ]; int head [ MAXN ], cnt ; void addEdge ( int u , int v , int val ) { edge [ cnt ]. to = v ; edge [ cnt ]. val = val ; edge [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int sequence [ MAXN * 2 ]; //\u4fdd\u5b58\u904d\u5386\u7684\u8282\u70b9\u5e8f\u5217,\u957f\u5ea6\u4e3a2*n-1,\u4ece\u4e0b\u68071\u5f00\u59cb\u4fdd\u5b58 int deep [ MAXN * 2 ]; //\u548c\u904d\u5386\u5e8f\u5217\u5bf9\u5e94\u7684\u6df1\u5ea6\u6570\u7ec4,\u957f\u5ea6\u4e3a2*n-1,\u4ece\u4e0b\u68071\u5f00\u59cb\u4fdd\u5b58 int first [ MAXN ]; //\u6bcf\u4e2a\u8282\u70b9\u5728\u904d\u5386\u5e8f\u5217\u65f6\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e int dis [ MAXN ]; //\u6bcf\u4e2a\u8282\u70b9\u5230\u6811\u6839\u7684\u8ddd\u79bb int dp [ MAXN * 1 ][ 25 ]; //Sparse_table bool vis [ MAXN ]; //DFS\u904d\u5386\u7684\u8bbf\u95ee\u6570\u7ec4 int tot ; //\u5e8f\u5217\u4e0b\u6807\u8bb0\u5f55 void DFS ( int u , int dep ) { vis [ u ] = 1 ; sequence [ ++ tot ] = u ; first [ u ] = tot ; deep [ tot ] = dep ; for ( int i = head [ u ]; i != -1 ; i = edge [ i ]. next ) { int v = edge [ i ]. to ; if ( vis [ v ] == 0 ) { dis [ v ] = dis [ u ] + edge [ i ]. val ; DFS ( v , dep + 1 ); sequence [ ++ tot ] = u ; deep [ tot ] = dep ; } } } void ST ( int len ) //index from 1 - len { for ( int i = 1 ; i <= len ; i ++ ) dp [ i ][ 0 ] = i ; for ( int j = 1 ;( 1 << j ) <= len ; j ++ ) //(length)=j<<1 for ( int i = 1 ; i + ( 1 << j ) -1 <= len ; i ++ ) { int a = dp [ i ][ j -1 ], b = dp [ i + ( 1 << ( j -1 ))][ j -1 ]; if ( deep [ a ] < deep [ b ]) dp [ i ][ j ] = a ; else dp [ i ][ j ] = b ; } } int RMQ ( int x , int y ) { int k = 0 ; while ( 1 << ( k + 1 ) <= y - x + 1 ) k ++ ; int a = dp [ x ][ k ], b = dp [ y - ( 1 << k ) + 1 ][ k ]; if ( deep [ a ] < deep [ b ]) return a ; else return b ; } int LCA ( int a , int b ) { int x = first [ a ], y = first [ b ]; if ( x > y ) swap ( x , y ); return sequence [ RMQ ( x , y )]; } int main () { int t , n , m , u , v , val ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); memset ( head , -1 , sizeof ( head )); memset ( vis , 0 , sizeof ( vis )); cnt = tot = 0 ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%d%d%d\" , & u , & v , & val ); addEdge ( u , v , val ); addEdge ( v , u , val ); } dis [ 1 ] = 0 ; DFS ( 1 , 1 ); ST ( tot ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); printf ( \"%d \\n \" , dis [ u ] + dis [ v ] -2 * dis [ LCA ( u , v )]); } } }","title":"Lca\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"algorithm/tree/lca/lca%E6%B1%82%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#lca","text":"\u5728\u4e00\u68f5\u6ca1\u6709\u73af\u7684\u6811\u4e0a\uff0c\u6bcf\u4e2a\u8282\u70b9\u80af\u5b9a\u6709\u5176\u7236\u4eb2\u8282\u70b9\u548c\u7956\u5148\u8282\u70b9\uff0c\u800c\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u5c31\u662f\u4e24\u4e2a\u8282\u70b9\u5728\u8fd9\u68f5\u6811\u4e0a\u6df1\u5ea6\u6700\u5927\u7684\u516c\u5171\u7684\u7956\u5148\u8282\u70b9\u3002 \u3000\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4e24\u4e2a\u70b9\u5728\u8fd9\u68f5\u6811\u4e0a\u8ddd\u79bb\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u8282\u70b9\u3002 \u3000\u5bf9\u4e8e\u4e00\u68f5\u6709\u6743\u6811\uff0c \u5047\u8bbeu,v\u4e24\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148lca(v),\u82e5dis[u]\u8868\u793a\u6839\u8282\u70b9\u5230u\u7684\u957f\u5ea6\uff0c \u5219uv\u95f4\u7684\u8ddd\u79bb\u4e3adis=dis[u]+dis[v]-2*dis[lca(v)] \u6709\u4eba\u53ef\u80fd\u4f1a\u95ee\uff1a\u90a3\u4ed6\u672c\u8eab\u6216\u8005\u5176\u7236\u4eb2\u8282\u70b9\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u7956\u5148\u8282\u70b9\u5462\uff1f \u3000\u3000\u3000\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u5f88\u7b80\u5355\uff0c\u6309\u7167\u4eba\u7684\u4eb2\u621a\u89c2\u5ff5\u6765\u8bf4\uff0c \u4f60\u7684\u7236\u4eb2\u4e5f\u662f\u4f60\u7684\u7956\u5148 \uff0c\u800cLCA\u8fd8\u53ef\u4ee5**\u5c06\u81ea\u5df1\u89c6\u4e3a\u7956\u5148\u8282\u70b9**\u3002 \u3000\u3000\u3000\u4e3e\u4e2a\u4f8b\u5b50\u5427\uff0c\u5982\u4e0b\u56fe\u6240\u793a**\uff14**\u548c**\uff15**\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\uff12**\uff0c \uff15**\u548c**\uff13**\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u662f**\uff11 \uff0c \uff12**\u548c**\uff11**\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u662f**\uff11 \u3002\u3000 \u6c42LCA\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u6cd5: \u79bb\u7ebf\u7684DFS+\u5e76\u67e5\u96c6**\u548c**\u5728\u7ebf\u7684RMQ\u7b97\u6cd5 \u3000\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u8bf4\u5728\u7ebf\u548c\u79bb\u7ebf\u7684\u533a\u522b:\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u4e00\u4e2a\u5728\u7ebf\u7b97\u6cd5\u662f\u6307\u5b83\u53ef\u4ee5\u4ee5\u5e8f\u5217\u5316\u7684\u65b9\u5f0f\u4e00\u4e2a\u4e2a\u7684\u5904\u7406\u8f93\u5165\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u5f00\u59cb\u65f6\u5e76\u4e0d\u9700\u8981\u5df2\u7ecf\u77e5\u9053\u6240\u6709\u7684\u8f93\u5165\u3002\u76f8\u5bf9\u7684\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u79bb\u7ebf\u7b97\u6cd5\uff0c\u5728\u5f00\u59cb\u65f6\u5c31\u9700\u8981\u77e5\u9053\u95ee\u9898\u7684\u6240\u6709\u8f93\u5165\u6570\u636e\uff0c\u800c\u4e14\u5728\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u540e\u5c31\u8981\u7acb\u5373\u8f93\u51fa\u7ed3\u679c\u3002 \u5176\u4e2d,\u6839\u8282\u70b9\u662f\u53ef\u4ee5\u968f\u610f\u9009\u62e9\u7684","title":"LCA \u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"algorithm/tree/lca/lca%E6%B1%82%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#rmq","text":"\u4e00\uff1aLCA\u548cRMQ\u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u5316\u7684 LCA\u8f6cRMQ\u7b97\u6cd5\u662f\u4e00\u4e2a\u5728\u7ebf\u7b97\u6cd5\uff1a\u5148\u7528\u65f6\u95f4\u53bb\u505a\u9884\u5904\u7406\uff0c\u7136\u540e\u6bcf\u8bfb\u5165\u4e00\u4e2a\u8be2\u95ee\uff0c\u5c31\u7528\u5f88\u77ed\u7684\u65f6\u95f4\u53bb\u56de\u7b54\u5b83\uff0c\u5373\u201d\u95ee\u4e00\u4e2a\u7b54\u4e00\u4e2a\uff0c\u56de\u7b54\u65f6\u95f4\u5f88\u77ed\u201c \u9884\u5907\u77e5\u8bc6\uff1aLCA\u8f6c\u4e3aRMQ\u540e\uff0c\u51e0\u4e4e\u662f\u88f8\u7684RMQ\uff0c\u8fd9\u91cc\u63a8\u8350ST\u7b97\u6cd5\u6c42\u89e3\uff0c\u5982\u679c\u4e0d\u61c2ST\u7b97\u6cd5\uff0c\u5148\u5b66\u4e60\u4e00\u4e0b RMQ\u7b97\u6cd5\u6c42LCA\u7684\u6a21\u677f\u5982\u4e0b: #include <cstdio> #include <cstring> #include <algorithm> using namespace std ; const int MAXN = 500010 ; const int MAXE = 500010 ; struct Node { int to , next , val ; }; Node edge [ MAXE ]; int head [ MAXN ], cnt ; void addEdge ( int u , int v , int val ) { edge [ cnt ]. to = v ; edge [ cnt ]. val = val ; edge [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int sequence [ MAXN * 2 ]; //\u4fdd\u5b58\u904d\u5386\u7684\u8282\u70b9\u5e8f\u5217,\u957f\u5ea6\u4e3a2*n-1,\u4ece\u4e0b\u68071\u5f00\u59cb\u4fdd\u5b58 int deep [ MAXN * 2 ]; //\u548c\u904d\u5386\u5e8f\u5217\u5bf9\u5e94\u7684\u6df1\u5ea6\u6570\u7ec4,\u957f\u5ea6\u4e3a2*n-1,\u4ece\u4e0b\u68071\u5f00\u59cb\u4fdd\u5b58 int first [ MAXN ]; //\u6bcf\u4e2a\u8282\u70b9\u5728\u904d\u5386\u5e8f\u5217\u65f6\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e int dis [ MAXN ]; //\u6bcf\u4e2a\u8282\u70b9\u5230\u6811\u6839\u7684\u8ddd\u79bb int dp [ MAXN * 1 ][ 25 ]; //Sparse_table bool vis [ MAXN ]; //DFS\u904d\u5386\u7684\u8bbf\u95ee\u6570\u7ec4 int tot ; //\u5e8f\u5217\u4e0b\u6807\u8bb0\u5f55 void DFS ( int u , int dep ) { vis [ u ] = 1 ; sequence [ ++ tot ] = u ; first [ u ] = tot ; deep [ tot ] = dep ; for ( int i = head [ u ]; i != -1 ; i = edge [ i ]. next ) { int v = edge [ i ]. to ; if ( vis [ v ] == 0 ) { dis [ v ] = dis [ u ] + edge [ i ]. val ; DFS ( v , dep + 1 ); sequence [ ++ tot ] = u ; deep [ tot ] = dep ; } } } void ST ( int len ) //index from 1 - len { for ( int i = 1 ; i <= len ; i ++ ) dp [ i ][ 0 ] = i ; for ( int j = 1 ;( 1 << j ) <= len ; j ++ ) //(length)=j<<1 for ( int i = 1 ; i + ( 1 << j ) -1 <= len ; i ++ ) { int a = dp [ i ][ j -1 ], b = dp [ i + ( 1 << ( j -1 ))][ j -1 ]; if ( deep [ a ] < deep [ b ]) dp [ i ][ j ] = a ; else dp [ i ][ j ] = b ; } } int RMQ ( int x , int y ) { int k = 0 ; while ( 1 << ( k + 1 ) <= y - x + 1 ) k ++ ; int a = dp [ x ][ k ], b = dp [ y - ( 1 << k ) + 1 ][ k ]; if ( deep [ a ] < deep [ b ]) return a ; else return b ; } int LCA ( int a , int b ) { int x = first [ a ], y = first [ b ]; if ( x > y ) swap ( x , y ); return sequence [ RMQ ( x , y )]; } int main () { int t , n , m , u , v , val ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); memset ( head , -1 , sizeof ( head )); memset ( vis , 0 , sizeof ( vis )); cnt = tot = 0 ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%d%d%d\" , & u , & v , & val ); addEdge ( u , v , val ); addEdge ( v , u , val ); } dis [ 1 ] = 0 ; DFS ( 1 , 1 ); ST ( tot ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); printf ( \"%d \\n \" , dis [ u ] + dis [ v ] -2 * dis [ LCA ( u , v )]); } } }","title":"RMQ\u7b97\u6cd5"},{"location":"algorithm/tree/lca/%E7%A6%BB%E7%BA%BFlca/","text":"Tarjan\u79bb\u7ebf\u6c42lca \u00b6 \u4e0b\u9762\u8be6\u7ec6\u4ecb\u7ecd\u4e00\u4e0bTarjan\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u8def\uff1a 1. \u4efb\u9009\u4e00\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u3002 2.\u904d\u5386\u8be5\u70b9u\u6240\u6709\u5b50\u8282\u70b9v\uff0c\u5e76\u6807\u8bb0\u8fd9\u4e9b\u5b50\u8282\u70b9v\u5df2\u88ab\u8bbf\u95ee\u8fc7\u3002 3.\u82e5\u662fv\u8fd8\u6709\u5b50\u8282\u70b9\uff0c\u8fd4\u56de2\uff0c\u5426\u5219\u4e0b\u4e00\u6b65\u3002 4.\u5408\u5e76v\u5230u\u4e0a\u3002 5.\u5bfb\u627e\u4e0e\u5f53\u524d\u70b9u\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9v\u3002 6.\u82e5\u662fv\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5219\u53ef\u4ee5\u786e\u8ba4u\u548cv\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3av\u88ab\u5408 \u5e76\u5230\u7684\u7236\u4eb2\u8282\u70b9a\u3002 \u904d\u5386\u7684\u8bdd\u9700\u8981\u7528\u5230**dfs**\u6765\u904d\u5386(\u6211\u76f8\u4fe1\u6765\u770b\u7684\u4eba\u90fd\u61c2\u5427...)\uff0c\u81f3\u4e8e\u5408\u5e76\uff0c\u6700\u4f18\u5316\u7684\u65b9\u5f0f\u5c31\u662f\u5229\u7528\u5e76\u67e5\u96c6\u6765\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\u3002 void dfs ( int u ) { vis [ u ] = 1 ; for ( int i = 0 ; i < ve [ u ]. size (); i ++ ) //\u904d\u5386\u5b50\u8282\u70b9 { int v = ve [ u ][ i ]; dfs ( ve [ u ][ i ]); //\u8fd8\u6709\u5b50\u8282\u70b9 ouin ( u , ve [ u ][ i ]); //\u5408\u5e76\u7236\u5b50\u8282\u70b9 } for ( int j = 0 ; j < pp [ u ]. size (); j ++ ) //\u5bfb\u627e\u5f53\u524d\u70b9u\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9 { int w = pp [ u ][ j ]; if ( vis [ w ] == 1 ) //\u5982\u679c\u70b9\u5df2\u7ecf\u88ab\u8bbf\u95ee\uff0c\u5c31\u786e\u8ba4\u7236\u8282\u70b9\u662f\u8c01 { ans = find ( w ); } } } \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u7ec4\u6570\u636e 9\u4e2a\u8282\u70b9 8\u6761\u8fb9 \u8054\u901a\u60c5\u51b5\u5982\u4e0b\uff1a 1--2\uff0c1--3\uff0c2--4\uff0c2--5\uff0c3--6\uff0c5--7\uff0c5--8\uff0c7--9 \u5373\u4e0b\u56fe\u6240\u793a\u7684\u6811 \u8bbe\u6211\u4eec\u8981\u67e5\u627e\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u70b9\u4e3a9--8\uff0c4--6\uff0c7--5\uff0c5--3\uff1b \u8bbef[]\u6570\u7ec4\u4e3a\u5e76\u67e5\u96c6\u7684\u7236\u4eb2\u8282\u70b9\u6570\u7ec4\uff0c\u521d\u59cb\u5316f[i]=i\uff0cvis[]\u6570\u7ec4\u4e3a\u662f\u5426\u8bbf\u95ee\u8fc7\u7684\u6570\u7ec4\uff0c\u521d\u59cb\u4e3a0; \u4e0b\u9762\u5f00\u59cb\u6a21\u62df\u8fc7\u7a0b\uff1a \u53d61\u4e3a**\u6839\u8282\u70b9**\uff0c**\u5f80\u4e0b\u641c\u7d22**\u53d1\u73b0\u6709\u4e24\u4e2a\u513f\u5b502\u548c3\uff1b \u5148\u641c2\uff0c\u53d1\u73b02\u6709\u4e24\u4e2a\u513f\u5b504\u548c5\uff0c\u5148\u641c\u7d224\uff0c\u53d1\u73b04**\u6ca1\u6709\u5b50\u8282\u70b9**\uff0c\u5219\u5bfb\u627e\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b06\u4e0e4\u6709\u5173\u7cfb\uff0c\u4f46\u662f**vis[6]=0**\uff0c\u53736\u8fd8\u6ca1\u88ab\u641c\u8fc7\uff0c\u6240\u4ee5**\u4e0d\u64cd\u4f5c**\uff1b \u53d1\u73b0\u6ca1\u6709\u548c4\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[4]=1 \uff1b \u8868\u793a4\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[4]=2 \uff0c\u7ee7\u7eed**\u641c5**\uff0c\u53d1\u73b05\u6709\u4e24\u4e2a\u513f\u5b507\u548c8; \u5148**\u641c7**\uff0c\u53d1\u73b07\u6709\u4e00\u4e2a\u5b50\u8282\u70b99\uff0c \u641c\u7d229 \uff0c\u53d1\u73b0\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5bfb\u627e\u4e0e\u5176>\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b08\u548c9\u6709\u5173\u7cfb\uff0c\u4f46\u662f**vis[8]=0**,\u53738\u6ca1\u88ab\u641c\u5230\u8fc7\uff0c\u6240\u4ee5\u4e0d\u64cd\u4f5c\uff1b \u53d1\u73b0\u6ca1\u6709\u548c9\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[9]=1 \uff1b \u8868\u793a9\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[9]=7 \uff0c\u53d1\u73b07\u6ca1\u6709\u6ca1\u88ab\u641c\u8fc7\u7684\u5b50\u8282\u70b9\u4e86\uff0c\u5bfb\u627e>\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b05\u548c7\u6709\u5173\u7cfb\uff0c\u4f46\u662f**vis[5]=0**\uff0c\u6240\u4ee5**\u4e0d\u64cd\u4f5c**\uff1b \u53d1\u73b0\u6ca1\u6709\u548c7\u6709\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[7]=1 \uff1b \u8868\u793a7\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[7]=5 \uff0c\u7ee7\u7eed**\u641c8**\uff0c\u53d1\u73b08\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5219\u5bfb\u627e\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b09\u4e0e8\u6709\u5173\u7cfb\uff0c \u6b64\u65f6vis[9]=1 \uff0c\u5219\u4ed6\u4eec\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u4e3a> find(9)=5 \uff1b (find(9)\u7684\u987a\u5e8f\u4e3af[9]=7\u2192f[7]=5\u2192f[5]=5 return 5;) \u53d1\u73b0\u6ca1\u6709\u4e0e8\u6709\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[8]=1 \uff1b \u8868\u793a8\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[8]=5 \uff0c\u53d1\u73b05\u6ca1\u6709\u6ca1\u641c\u8fc7\u7684\u5b50\u8282\u70b9\u4e86\uff0c\u5bfb\u627e\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b07\u548c5\u6709\u5173\u7cfb\uff0c \u6b64\u65f6vis[7]=1 \uff0c\u6240\u4ee5\u4ed6\u4eec\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u4e3a**find(7)=5**\uff1b (find(7)\u7684\u987a\u5e8f\u4e3af[7]=5\u2192f[5]=5 return 5;) \u53c8\u53d1\u73b05\u548c3\u6709\u5173\u7cfb\uff0c\u4f46\u662f**vis[3]=0**\uff0c\u6240\u4ee5**\u4e0d\u64cd\u4f5c**\uff0c\u6b64\u65f65\u7684\u5b50\u8282\u70b9\u5168 \u90e8\u641c\u5b8c\u4e86\uff1b \u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[5]=1 \uff0c\u8868\u793a5\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[5]=2 \uff1b \u53d1\u73b02\u6ca1\u6709\u672a\u88ab\u641c\u5b8c\u7684\u5b50\u8282\u70b9\uff0c\u5bfb\u627e\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53c8\u53d1\u73b0\u6ca1\u6709\u548c2\u6709\u5173\u7cfb\u7684\u70b9\uff0c\u5219\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[2]=1 \uff1b \u8868\u793a2\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[2]=1 \uff0c\u7ee7\u7eed**\u641c3**\uff0c\u53d1\u73b03\u6709\u4e00\u4e2a\u5b50\u8282\u70b96\uff1b \u641c\u7d226 \uff0c\u53d1\u73b06\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5219\u5bfb\u627e\u4e0e6\u6709\u5173\u7cfb\u7684\u70b9\uff0c\u53d1\u73b04\u548c6\u6709\u5173\u7cfb\uff1b \u6b64\u65f6vis[4]=1 \uff0c\u6240\u4ee5\u5b83\u4eec\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u4e3a**find(4)=1**; (find(4)\u7684\u987a\u5e8f\u4e3af[4]=2\u2192f[2]=2\u2192f[1]=1 return 1;) \u53d1\u73b0\u6ca1\u6709\u4e0e6\u6709\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[6]=1 \uff0c\u8868\u793a6\u5df2>\u7ecf\u88ab\u641c\u5b8c\u4e86\uff1b \u66f4\u65b0f[6]=3 \uff0c\u53d1\u73b03\u6ca1\u6709\u6ca1\u88ab\u641c\u8fc7\u7684\u5b50\u8282\u70b9\u4e86\uff0c\u5219\u5bfb\u627e\u4e0e3\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b05\u548c3\u6709\u5173\u7cfb\uff0c \u6b64\u65f6vis[5]=1 \uff0c\u5219\u5b83\u4eec\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u4e3a> find(5)=1 \uff1b (find(5)\u7684\u987a\u5e8f\u4e3af[5]=2\u2192f[2]=1\u2192f[1]=1 return 1;) \u53d1\u73b0\u6ca1\u6709\u548c3\u6709\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[3]=1 \uff1b \u66f4\u65b0f[3]=1 \uff0c\u53d1\u73b01\u6ca1\u6709\u88ab\u641c\u8fc7\u7684\u5b50\u8282\u70b9\u4e5f\u6ca1\u6709\u6709\u5173\u7cfb\u7684\u70b9\uff0c\u6b64\u65f6\u53ef\u4ee5**\u9000\u51fa\u6574\u4e2adfs**\u4e86\u3002 \u7ecf\u8fc7\u8fd9\u6b21dfs\u6211\u4eec\u5f97\u51fa\u4e86\u6240\u6709\u7684\u7b54\u6848\uff0c\u6709\u6ca1\u6709\u89c9\u5f97\u5f88\u795e\u5947\u5462\uff1f\u662f\u5426\u5bf9Tarjan\u7b97\u6cd5\u6709\u66f4\u6df1\u5c42\u6b21\u7684\u7406\u89e3\u4e86\u5462\uff1f #include <iostream> #include <cstdio> #include <string.h> #include <vector> #define MAN 10005 using namespace std ; vector < int > ve [ MAN ]; vector < int > pp [ MAN ]; int fa [ MAN ], vis [ MAN ]; int ans , n ; int find ( int x ) { if ( x == fa [ x ]) { return x ; } else { return find ( fa [ x ]); } } void ouin ( int x , int y ) { x = find ( x ); y = find ( y ); if ( x != y ) { fa [ y ] = x ; } } void init ( ) { for ( int i = 0 ; i <= n ; i ++ ) { fa [ i ] = i ; ve [ i ]. clear (); pp [ i ]. clear (); vis [ i ] = 0 ; } } void dfs ( int u ) { vis [ u ] = 1 ; for ( int i = 0 ; i < ve [ u ]. size (); i ++ ) { int v = ve [ u ][ i ]; dfs ( ve [ u ][ i ]); ouin ( u , ve [ u ][ i ]); } for ( int j = 0 ; j < pp [ u ]. size (); j ++ ) { int w = pp [ u ][ j ]; if ( vis [ w ] == 1 ) { //cout<<w<<endl; ans = find ( w ); } } } int main ( ) { int t , x , y , a , b ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d\" , & n ); init ( ); for ( int i = 1 ; i <= n -1 ; i ++ ) { scanf ( \"%d%d\" , & x , & y ); ve [ x ]. push_back ( y ); vis [ y ] = 1 ; } scanf ( \"%d%d\" , & a , & b ); pp [ a ]. push_back ( b ); pp [ b ]. push_back ( a ); for ( int i = 1 ; i <= n ; i ++ ) { if ( vis [ i ] == 0 ) { memset ( vis , 0 , sizeof ( vis )); dfs ( i ); break ; } } // for(int i=1;i<=n;i++) // { // cout<<fa[i]<<\" \"; // } cout << endl ; printf ( \"%d \\n \" , ans ); } return 0 ; }","title":"\u79bb\u7ebflca"},{"location":"algorithm/tree/lca/%E7%A6%BB%E7%BA%BFlca/#tarjanlca","text":"\u4e0b\u9762\u8be6\u7ec6\u4ecb\u7ecd\u4e00\u4e0bTarjan\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u8def\uff1a 1. \u4efb\u9009\u4e00\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u3002 2.\u904d\u5386\u8be5\u70b9u\u6240\u6709\u5b50\u8282\u70b9v\uff0c\u5e76\u6807\u8bb0\u8fd9\u4e9b\u5b50\u8282\u70b9v\u5df2\u88ab\u8bbf\u95ee\u8fc7\u3002 3.\u82e5\u662fv\u8fd8\u6709\u5b50\u8282\u70b9\uff0c\u8fd4\u56de2\uff0c\u5426\u5219\u4e0b\u4e00\u6b65\u3002 4.\u5408\u5e76v\u5230u\u4e0a\u3002 5.\u5bfb\u627e\u4e0e\u5f53\u524d\u70b9u\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9v\u3002 6.\u82e5\u662fv\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5219\u53ef\u4ee5\u786e\u8ba4u\u548cv\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3av\u88ab\u5408 \u5e76\u5230\u7684\u7236\u4eb2\u8282\u70b9a\u3002 \u904d\u5386\u7684\u8bdd\u9700\u8981\u7528\u5230**dfs**\u6765\u904d\u5386(\u6211\u76f8\u4fe1\u6765\u770b\u7684\u4eba\u90fd\u61c2\u5427...)\uff0c\u81f3\u4e8e\u5408\u5e76\uff0c\u6700\u4f18\u5316\u7684\u65b9\u5f0f\u5c31\u662f\u5229\u7528\u5e76\u67e5\u96c6\u6765\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\u3002 void dfs ( int u ) { vis [ u ] = 1 ; for ( int i = 0 ; i < ve [ u ]. size (); i ++ ) //\u904d\u5386\u5b50\u8282\u70b9 { int v = ve [ u ][ i ]; dfs ( ve [ u ][ i ]); //\u8fd8\u6709\u5b50\u8282\u70b9 ouin ( u , ve [ u ][ i ]); //\u5408\u5e76\u7236\u5b50\u8282\u70b9 } for ( int j = 0 ; j < pp [ u ]. size (); j ++ ) //\u5bfb\u627e\u5f53\u524d\u70b9u\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9 { int w = pp [ u ][ j ]; if ( vis [ w ] == 1 ) //\u5982\u679c\u70b9\u5df2\u7ecf\u88ab\u8bbf\u95ee\uff0c\u5c31\u786e\u8ba4\u7236\u8282\u70b9\u662f\u8c01 { ans = find ( w ); } } } \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u7ec4\u6570\u636e 9\u4e2a\u8282\u70b9 8\u6761\u8fb9 \u8054\u901a\u60c5\u51b5\u5982\u4e0b\uff1a 1--2\uff0c1--3\uff0c2--4\uff0c2--5\uff0c3--6\uff0c5--7\uff0c5--8\uff0c7--9 \u5373\u4e0b\u56fe\u6240\u793a\u7684\u6811 \u8bbe\u6211\u4eec\u8981\u67e5\u627e\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u70b9\u4e3a9--8\uff0c4--6\uff0c7--5\uff0c5--3\uff1b \u8bbef[]\u6570\u7ec4\u4e3a\u5e76\u67e5\u96c6\u7684\u7236\u4eb2\u8282\u70b9\u6570\u7ec4\uff0c\u521d\u59cb\u5316f[i]=i\uff0cvis[]\u6570\u7ec4\u4e3a\u662f\u5426\u8bbf\u95ee\u8fc7\u7684\u6570\u7ec4\uff0c\u521d\u59cb\u4e3a0; \u4e0b\u9762\u5f00\u59cb\u6a21\u62df\u8fc7\u7a0b\uff1a \u53d61\u4e3a**\u6839\u8282\u70b9**\uff0c**\u5f80\u4e0b\u641c\u7d22**\u53d1\u73b0\u6709\u4e24\u4e2a\u513f\u5b502\u548c3\uff1b \u5148\u641c2\uff0c\u53d1\u73b02\u6709\u4e24\u4e2a\u513f\u5b504\u548c5\uff0c\u5148\u641c\u7d224\uff0c\u53d1\u73b04**\u6ca1\u6709\u5b50\u8282\u70b9**\uff0c\u5219\u5bfb\u627e\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b06\u4e0e4\u6709\u5173\u7cfb\uff0c\u4f46\u662f**vis[6]=0**\uff0c\u53736\u8fd8\u6ca1\u88ab\u641c\u8fc7\uff0c\u6240\u4ee5**\u4e0d\u64cd\u4f5c**\uff1b \u53d1\u73b0\u6ca1\u6709\u548c4\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[4]=1 \uff1b \u8868\u793a4\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[4]=2 \uff0c\u7ee7\u7eed**\u641c5**\uff0c\u53d1\u73b05\u6709\u4e24\u4e2a\u513f\u5b507\u548c8; \u5148**\u641c7**\uff0c\u53d1\u73b07\u6709\u4e00\u4e2a\u5b50\u8282\u70b99\uff0c \u641c\u7d229 \uff0c\u53d1\u73b0\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5bfb\u627e\u4e0e\u5176>\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b08\u548c9\u6709\u5173\u7cfb\uff0c\u4f46\u662f**vis[8]=0**,\u53738\u6ca1\u88ab\u641c\u5230\u8fc7\uff0c\u6240\u4ee5\u4e0d\u64cd\u4f5c\uff1b \u53d1\u73b0\u6ca1\u6709\u548c9\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[9]=1 \uff1b \u8868\u793a9\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[9]=7 \uff0c\u53d1\u73b07\u6ca1\u6709\u6ca1\u88ab\u641c\u8fc7\u7684\u5b50\u8282\u70b9\u4e86\uff0c\u5bfb\u627e>\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b05\u548c7\u6709\u5173\u7cfb\uff0c\u4f46\u662f**vis[5]=0**\uff0c\u6240\u4ee5**\u4e0d\u64cd\u4f5c**\uff1b \u53d1\u73b0\u6ca1\u6709\u548c7\u6709\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[7]=1 \uff1b \u8868\u793a7\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[7]=5 \uff0c\u7ee7\u7eed**\u641c8**\uff0c\u53d1\u73b08\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5219\u5bfb\u627e\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b09\u4e0e8\u6709\u5173\u7cfb\uff0c \u6b64\u65f6vis[9]=1 \uff0c\u5219\u4ed6\u4eec\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u4e3a> find(9)=5 \uff1b (find(9)\u7684\u987a\u5e8f\u4e3af[9]=7\u2192f[7]=5\u2192f[5]=5 return 5;) \u53d1\u73b0\u6ca1\u6709\u4e0e8\u6709\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[8]=1 \uff1b \u8868\u793a8\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[8]=5 \uff0c\u53d1\u73b05\u6ca1\u6709\u6ca1\u641c\u8fc7\u7684\u5b50\u8282\u70b9\u4e86\uff0c\u5bfb\u627e\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b07\u548c5\u6709\u5173\u7cfb\uff0c \u6b64\u65f6vis[7]=1 \uff0c\u6240\u4ee5\u4ed6\u4eec\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u4e3a**find(7)=5**\uff1b (find(7)\u7684\u987a\u5e8f\u4e3af[7]=5\u2192f[5]=5 return 5;) \u53c8\u53d1\u73b05\u548c3\u6709\u5173\u7cfb\uff0c\u4f46\u662f**vis[3]=0**\uff0c\u6240\u4ee5**\u4e0d\u64cd\u4f5c**\uff0c\u6b64\u65f65\u7684\u5b50\u8282\u70b9\u5168 \u90e8\u641c\u5b8c\u4e86\uff1b \u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[5]=1 \uff0c\u8868\u793a5\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[5]=2 \uff1b \u53d1\u73b02\u6ca1\u6709\u672a\u88ab\u641c\u5b8c\u7684\u5b50\u8282\u70b9\uff0c\u5bfb\u627e\u4e0e\u5176\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53c8\u53d1\u73b0\u6ca1\u6709\u548c2\u6709\u5173\u7cfb\u7684\u70b9\uff0c\u5219\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[2]=1 \uff1b \u8868\u793a2\u5df2\u7ecf\u88ab\u641c\u5b8c\uff0c \u66f4\u65b0f[2]=1 \uff0c\u7ee7\u7eed**\u641c3**\uff0c\u53d1\u73b03\u6709\u4e00\u4e2a\u5b50\u8282\u70b96\uff1b \u641c\u7d226 \uff0c\u53d1\u73b06\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5219\u5bfb\u627e\u4e0e6\u6709\u5173\u7cfb\u7684\u70b9\uff0c\u53d1\u73b04\u548c6\u6709\u5173\u7cfb\uff1b \u6b64\u65f6vis[4]=1 \uff0c\u6240\u4ee5\u5b83\u4eec\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u4e3a**find(4)=1**; (find(4)\u7684\u987a\u5e8f\u4e3af[4]=2\u2192f[2]=2\u2192f[1]=1 return 1;) \u53d1\u73b0\u6ca1\u6709\u4e0e6\u6709\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[6]=1 \uff0c\u8868\u793a6\u5df2>\u7ecf\u88ab\u641c\u5b8c\u4e86\uff1b \u66f4\u65b0f[6]=3 \uff0c\u53d1\u73b03\u6ca1\u6709\u6ca1\u88ab\u641c\u8fc7\u7684\u5b50\u8282\u70b9\u4e86\uff0c\u5219\u5bfb\u627e\u4e0e3\u6709\u5173\u7cfb\u7684\u70b9\uff1b \u53d1\u73b05\u548c3\u6709\u5173\u7cfb\uff0c \u6b64\u65f6vis[5]=1 \uff0c\u5219\u5b83\u4eec\u7684**\u6700\u8fd1\u516c\u5171\u7956\u5148**\u4e3a> find(5)=1 \uff1b (find(5)\u7684\u987a\u5e8f\u4e3af[5]=2\u2192f[2]=1\u2192f[1]=1 return 1;) \u53d1\u73b0\u6ca1\u6709\u548c3\u6709\u5173\u7cfb\u7684\u70b9\u4e86\uff0c\u8fd4\u56de\u6b64\u524d\u4e00\u6b21\u641c\u7d22\uff0c \u66f4\u65b0vis[3]=1 \uff1b \u66f4\u65b0f[3]=1 \uff0c\u53d1\u73b01\u6ca1\u6709\u88ab\u641c\u8fc7\u7684\u5b50\u8282\u70b9\u4e5f\u6ca1\u6709\u6709\u5173\u7cfb\u7684\u70b9\uff0c\u6b64\u65f6\u53ef\u4ee5**\u9000\u51fa\u6574\u4e2adfs**\u4e86\u3002 \u7ecf\u8fc7\u8fd9\u6b21dfs\u6211\u4eec\u5f97\u51fa\u4e86\u6240\u6709\u7684\u7b54\u6848\uff0c\u6709\u6ca1\u6709\u89c9\u5f97\u5f88\u795e\u5947\u5462\uff1f\u662f\u5426\u5bf9Tarjan\u7b97\u6cd5\u6709\u66f4\u6df1\u5c42\u6b21\u7684\u7406\u89e3\u4e86\u5462\uff1f #include <iostream> #include <cstdio> #include <string.h> #include <vector> #define MAN 10005 using namespace std ; vector < int > ve [ MAN ]; vector < int > pp [ MAN ]; int fa [ MAN ], vis [ MAN ]; int ans , n ; int find ( int x ) { if ( x == fa [ x ]) { return x ; } else { return find ( fa [ x ]); } } void ouin ( int x , int y ) { x = find ( x ); y = find ( y ); if ( x != y ) { fa [ y ] = x ; } } void init ( ) { for ( int i = 0 ; i <= n ; i ++ ) { fa [ i ] = i ; ve [ i ]. clear (); pp [ i ]. clear (); vis [ i ] = 0 ; } } void dfs ( int u ) { vis [ u ] = 1 ; for ( int i = 0 ; i < ve [ u ]. size (); i ++ ) { int v = ve [ u ][ i ]; dfs ( ve [ u ][ i ]); ouin ( u , ve [ u ][ i ]); } for ( int j = 0 ; j < pp [ u ]. size (); j ++ ) { int w = pp [ u ][ j ]; if ( vis [ w ] == 1 ) { //cout<<w<<endl; ans = find ( w ); } } } int main ( ) { int t , x , y , a , b ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d\" , & n ); init ( ); for ( int i = 1 ; i <= n -1 ; i ++ ) { scanf ( \"%d%d\" , & x , & y ); ve [ x ]. push_back ( y ); vis [ y ] = 1 ; } scanf ( \"%d%d\" , & a , & b ); pp [ a ]. push_back ( b ); pp [ b ]. push_back ( a ); for ( int i = 1 ; i <= n ; i ++ ) { if ( vis [ i ] == 0 ) { memset ( vis , 0 , sizeof ( vis )); dfs ( i ); break ; } } // for(int i=1;i<=n;i++) // { // cout<<fa[i]<<\" \"; // } cout << endl ; printf ( \"%d \\n \" , ans ); } return 0 ; }","title":"Tarjan\u79bb\u7ebf\u6c42lca"},{"location":"cmake/cmake/","text":"cmake\u57fa\u672c\u8bed\u6cd5 \u00b6 cmake_minimum_required - \u6307\u5b9aCMake\u7684\u6700\u5c0f\u7248\u672c\u8981\u6c42 # CMake\u6700\u5c0f\u7248\u672c\u8981\u6c42\u4e3a2.8.3 cmake_minimum_required(VERSION 2.8.3) \u8bed\u6cd5\uff1a cmake_minimum_required(VERSION versionNumber [FATAL_ERROR]) project - \u5b9a\u4e49\u5de5\u7a0b\u540d\u79f0\uff0c\u5e76\u53ef\u6307\u5b9a\u5de5\u7a0b\u652f\u6301\u7684\u8bed\u8a00 # \u6307\u5b9a\u5de5\u7a0b\u540d\u4e3aHELLOWORLD project(HELLOWORLD) \u8bed\u6cd5\uff1a project(projectname [CXX] [C] [Java]) set - \u663e\u5f0f\u7684\u5b9a\u4e49\u53d8\u91cf # \u5b9a\u4e49SRC\u53d8\u91cf\uff0c\u5176\u503c\u4e3amain.cpp hello.cpp set(SRC sayhello.cpp hello.cpp) \u8bed\u6cd5\uff1a set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]]) include_directories - \u5411\u5de5\u7a0b\u6dfb\u52a0\u591a\u4e2a\u7279\u5b9a\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84 --->\u76f8\u5f53\u4e8e\u6307\u5b9ag++\u7f16\u8bd1\u5668\u7684-I\u53c2\u6570 # \u5c06/usr/include/myincludefolder \u548c ./include \u6dfb\u52a0\u5230\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84 include_directories(/usr/include/myincludefolder ./include) \u8bed\u6cd5\uff1a include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 \u2026) link_directories - \u5411\u5de5\u7a0b\u6dfb\u52a0\u591a\u4e2a\u7279\u5b9a\u7684\u5e93\u6587\u4ef6\u641c\u7d22\u8def\u5f84 --->\u76f8\u5f53\u4e8e\u6307\u5b9ag++\u7f16\u8bd1\u5668\u7684-L\u53c2\u6570 # \u5c06/usr/lib/mylibfolder \u548c ./lib \u6dfb\u52a0\u5230\u5e93\u6587\u4ef6\u641c\u7d22\u8def\u5f84 link_directories(/usr/lib/mylibfolder ./lib) \u8bed\u6cd5\uff1alink_directories(dir1 dir2 \u2026) add_library - \u751f\u6210\u5e93\u6587\u4ef6 # \u901a\u8fc7\u53d8\u91cf SRC \u751f\u6210 libhello.so \u5171\u4eab\u5e93 add_library(hello SHARED ${SRC}) \u8bed\u6cd5\uff1a add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 \u2026 sourceN) add_compile_options - \u6dfb\u52a0\u7f16\u8bd1\u53c2\u6570 # \u6dfb\u52a0\u7f16\u8bd1\u53c2\u6570 -Wall -std=c++11 add_compile_options(-Wall -std=c++11 -O2) \u8bed\u6cd5\uff1a add_compile_options( add_executable - \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 # \u7f16\u8bd1main.cpp\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6main add_executable(main main.cpp) \u8bed\u6cd5\uff1a add_library(exename source1 source2 \u2026 sourceN) target_link_libraries - \u4e3a target \u6dfb\u52a0\u9700\u8981\u94fe\u63a5\u7684\u5171\u4eab\u5e93 --->\u76f8\u540c\u4e8e\u6307\u5b9ag++\u7f16\u8bd1\u5668-l\u53c2\u6570 # \u5c06hello\u52a8\u6001\u5e93\u6587\u4ef6\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6maincmake target_link_libraries(main hello) \u8bed\u6cd5\uff1a target_link_libraries(target library1library2\u2026) add_subdirectory - \u5411\u5f53\u524d\u5de5\u7a0b\u6dfb\u52a0\u5b58\u653e\u6e90\u6587\u4ef6\u7684\u5b50\u76ee\u5f55\uff0c\u5e76\u53ef\u4ee5\u6307\u5b9a\u4e2d\u95f4\u4e8c\u8fdb\u5236\u548c\u76ee\u6807\u4e8c\u8fdb\u5236\u5b58\u653e\u7684\u4f4d\u7f6e # \u6dfb\u52a0src\u5b50\u76ee\u5f55\uff0csrc\u4e2d\u9700\u6709\u4e00\u4e2aCMakeLists.txt add_subdirectory(src) \u8bed\u6cd5\uff1a add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL]) aux_source_directory - \u53d1\u73b0\u4e00\u4e2a\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u5e76\u5c06\u5217\u8868\u5b58\u50a8\u5728\u4e00\u4e2a\u53d8\u91cf\u4e2d\uff0c\u8fd9\u4e2a\u6307\u4ee4\u4e34\u65f6\u88ab\u7528\u6765\u81ea\u52a8\u6784\u5efa\u6e90\u6587\u4ef6\u5217\u8868 # \u5b9a\u4e49SRC\u53d8\u91cf\uff0c\u5176\u503c\u4e3a\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6 aux_source_directory(. SRC) # \u7f16\u8bd1SRC\u53d8\u91cf\u6240\u4ee3\u8868\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u751f\u6210main\u53ef\u6267\u884c\u6587\u4ef6 add_executable(main ${SRC}) \u8bed\u6cd5\uff1a aux_source_directory(dir VARIABLE) CMake\u5e38\u7528\u53d8\u91cf \u00b6 CMAKE_C_FLAGS gcc\u7f16\u8bd1\u9009\u9879 CMAKE_CXX_FLAGS g++\u7f16\u8bd1\u9009\u9879 # \u5728CMAKE_CXX_FLAGS\u7f16\u8bd1\u9009\u9879\u540e\u8ffd\u52a0-std=c++11 set( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\") CMAKE_BUILD_TYPE \u7f16\u8bd1\u7c7b\u578b(Debug, Release) # \u8bbe\u5b9a\u7f16\u8bd1\u7c7b\u578b\u4e3adebug\uff0c\u8c03\u8bd5\u65f6\u9700\u8981\u9009\u62e9debug set(CMAKE_BUILD_TYPE Debug) # \u8bbe\u5b9a\u7f16\u8bd1\u7c7b\u578b\u4e3arelease\uff0c\u53d1\u5e03\u65f6\u9700\u8981\u9009\u62e9release set(CMAKE_BUILD_TYPE Release) CMAKE_BINARY_DIR PROJECT_BINARY_DIR __BINARY_DIR \u8fd9\u4e09\u4e2a\u53d8\u91cf\u6307\u4ee3\u7684\u5185\u5bb9\u662f\u4e00\u81f4\u7684\u3002 \u5982\u679c\u662f in source build\uff0c\u6307\u7684\u5c31\u662f\u5de5\u7a0b\u9876\u5c42\u76ee\u5f55\u3002 \u5982\u679c\u662f out-of-source \u7f16\u8bd1,\u6307\u7684\u662f\u5de5\u7a0b\u7f16\u8bd1\u53d1\u751f\u7684\u76ee\u5f55\u3002 PROJECT_BINARY_DIR \u8ddf\u5176\u4ed6\u6307\u4ee4\u7a0d\u6709\u533a\u522b\uff0c\u4e0d\u8fc7\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ed6\u4eec\u662f\u4e00\u81f4\u7684\u3002 CMAKE_SOURCE_DIR PROJECT_SOURCE_DIR __SOURCE_DIR \u8fd9\u4e09\u4e2a\u53d8\u91cf\u6307\u4ee3\u7684\u5185\u5bb9\u662f\u4e00\u81f4\u7684,\u4e0d\u8bba\u91c7\u7528\u4f55\u79cd\u7f16\u8bd1\u65b9\u5f0f,\u90fd\u662f\u5de5\u7a0b\u9876\u5c42\u76ee\u5f55\u3002 \u4e5f\u5c31\u662f\u5728 in source build\u65f6,\u4ed6\u8ddf CMAKE_BINARY_DIR \u7b49\u53d8\u91cf\u4e00\u81f4\u3002 PROJECT_SOURCE_DIR \u8ddf\u5176\u4ed6\u6307\u4ee4\u7a0d\u6709\u533a\u522b,\u73b0\u5728,\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ed6\u4eec\u662f\u4e00\u81f4\u7684\u3002 CMAKE_C_COMPILER\uff1a\u6307\u5b9aC\u7f16\u8bd1\u5668 CMAKE_CXX_COMPILER\uff1a\u6307\u5b9aC++\u7f16\u8bd1\u5668 EXECUTABLE_OUTPUT_PATH\uff1a\u53ef\u6267\u884c\u6587\u4ef6\u8f93\u51fa\u7684\u5b58\u653e\u8def\u5f84 LIBRARY_OUTPUT_PATH\uff1a\u5e93\u6587\u4ef6\u8f93\u51fa\u7684\u5b58\u653e\u8def\u5f84 CMake\u76ee\u5f55\u7ed3\u6784\uff1a \u00b6 \u9879\u76ee\u4e3b\u76ee\u5f55\u5b58\u5728\u4e00\u4e2aCMakeLists.txt\u6587\u4ef6 \u4e24\u79cd\u65b9\u5f0f\u8bbe\u7f6e\u7f16\u8bd1\u89c4\u5219 \uff1a \u5305\u542b\u6e90\u6587\u4ef6\u7684\u5b50\u6587\u4ef6\u5939\u5305\u542bCMakeLists.txt\u6587\u4ef6\uff0c\u4e3b\u76ee\u5f55\u7684CMakeLists.txt\u901a\u8fc7add_subdirectory\u6dfb\u52a0\u5b50\u76ee\u5f55\u5373\u53ef\uff1b \u5305\u542b\u6e90\u6587\u4ef6\u7684\u5b50\u6587\u4ef6\u5939\u672a\u5305\u542bCMakeLists.txt\u6587\u4ef6\uff0c\u5b50\u76ee\u5f55\u7f16\u8bd1\u89c4\u5219\u4f53\u73b0\u5728\u4e3b\u76ee\u5f55\u7684CMakeLists.txt\u4e2d\uff1b \u7f16\u8bd1\u6d41\u7a0b \u00b6 \u5728 linux \u5e73\u53f0\u4e0b\u4f7f\u7528 CMake \u6784\u5efaC/C++\u5de5\u7a0b\u7684\u6d41\u7a0b\u5982\u4e0b: \u624b\u52a8\u7f16\u5199 CmakeLists.txt\u3002 \u6267\u884c\u547d\u4ee4 cmake PATH \u751f\u6210 Makefile ( PATH \u662f\u9876\u5c42CMakeLists.txt \u6240\u5728\u7684\u76ee\u5f55 )\u3002 \u6267\u884c\u547d\u4ee4 make \u8fdb\u884c\u7f16\u8bd1\u3002 1# important tips 2. # \u8868\u793a\u5f53\u524d\u76ee\u5f55 3./ # \u8868\u793a\u5f53\u524d\u76ee\u5f55 4 5.. # \u8868\u793a\u4e0a\u7ea7\u76ee\u5f55 6../ # \u8868\u793a\u4e0a\u7ea7\u76ee\u5f55 \u4e24\u79cd\u6784\u5efa\u65b9\u5f0f \u00b6 \u5185\u90e8\u6784\u5efa(in-source build) \uff1a\u4e0d\u63a8\u8350\u4f7f\u7528 \u5185\u90e8\u6784\u5efa\u4f1a\u5728\u540c\u7ea7\u76ee\u5f55\u4e0b\u4ea7\u751f\u4e00\u5927\u5806\u4e2d\u95f4\u6587\u4ef6\uff0c\u8fd9\u4e9b\u4e2d\u95f4\u6587\u4ef6\u5e76\u4e0d\u662f\u6211\u4eec\u6700\u7ec8\u6240\u9700\u8981\u7684\uff0c\u548c\u5de5\u7a0b\u6e90\u6587\u4ef6\u653e\u5728\u4e00\u8d77\u4f1a\u663e\u5f97\u6742\u4e71\u65e0\u7ae0\u3002 ## \u5185\u90e8\u6784\u5efa # \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\uff0c\u7f16\u8bd1\u672c\u76ee\u5f55\u7684CMakeLists.txt\uff0c\u751f\u6210Makefile\u548c\u5176\u4ed6\u6587\u4ef6 cmake . # \u6267\u884cmake\u547d\u4ee4\uff0c\u751f\u6210target make \u5916\u90e8\u6784\u5efa(out-of-source build) \uff1a \u63a8\u8350\u4f7f\u7528 \u5c06\u7f16\u8bd1\u8f93\u51fa\u6587\u4ef6\u4e0e\u6e90\u6587\u4ef6\u653e\u5230\u4e0d\u540c\u76ee\u5f55\u4e2d ## \u5916\u90e8\u6784\u5efa # 1. \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\uff0c\u521b\u5efabuild\u6587\u4ef6\u5939 mkdir build # 2. \u8fdb\u5165\u5230build\u6587\u4ef6\u5939 cd build # 3. \u7f16\u8bd1\u4e0a\u7ea7\u76ee\u5f55\u7684CMakeLists.txt\uff0c\u751f\u6210Makefile\u548c\u5176\u4ed6\u6587\u4ef6 cmake .. # 4. \u6267\u884cmake\u547d\u4ee4\uff0c\u751f\u6210target make \u6700\u5c0fCMake\u5de5\u7a0b \u00b6 # Set the minimum version of CMake that can be used cmake_minimum_required(VERSION 3.0) # Set the project name project (HELLO) # Add an executable add_executable(hello_cmake main.cpp) \u591a\u76ee\u5f55\u5de5\u7a0b - \u76f4\u63a5\u7f16\u8bd1 \u00b6 # Set the minimum version of CMake that can be used cmake_minimum_required(VERSION 3.0) #project name project(SWAP) #head file pat include_directories( include ) #source directory files to var add_subdirectory( src DIR_SRCS ) #add executable file add_executable(swap_02 ${TEST_MATH}) #add link library target_link_libraries(${FS_BUILD_BINARY_PREFIX}sqrt ${LIBRARIES}) \u591a\u76ee\u5f55\u5de5\u7a0b - \u751f\u6210\u5e93\u7f16\u8bd1 \u00b6 # Set the minimum version of CMake that can be used cmake_minimum_required(VERSION 3.0) #project name project(SWAP_LIBRARY) #add compile options add_compile_options(\"-Wall -std=c++11\") #set CMAKE_BUILD_TYPE set( CMAKE_BUILD_TYPE Debug ) # set output binary path set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin) ############################################################ # Create a library ############################################################ #Generate the static library from the library sources add_library( swap_library STATIC src/Swap.cpp ) target_include_directories( swap_lib PUBLIC ${PROJECT_SOURCE_DIR}/include ) ############################################################ # Create an executable ############################################################ # Add an executable with the above sources add_executable( swap_01 main.cpp ) # link the new swap_01 target with the swap_lib target target_link_libraries( swap_01 swap_liby )","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"cmake/cmake/#cmake","text":"cmake_minimum_required - \u6307\u5b9aCMake\u7684\u6700\u5c0f\u7248\u672c\u8981\u6c42 # CMake\u6700\u5c0f\u7248\u672c\u8981\u6c42\u4e3a2.8.3 cmake_minimum_required(VERSION 2.8.3) \u8bed\u6cd5\uff1a cmake_minimum_required(VERSION versionNumber [FATAL_ERROR]) project - \u5b9a\u4e49\u5de5\u7a0b\u540d\u79f0\uff0c\u5e76\u53ef\u6307\u5b9a\u5de5\u7a0b\u652f\u6301\u7684\u8bed\u8a00 # \u6307\u5b9a\u5de5\u7a0b\u540d\u4e3aHELLOWORLD project(HELLOWORLD) \u8bed\u6cd5\uff1a project(projectname [CXX] [C] [Java]) set - \u663e\u5f0f\u7684\u5b9a\u4e49\u53d8\u91cf # \u5b9a\u4e49SRC\u53d8\u91cf\uff0c\u5176\u503c\u4e3amain.cpp hello.cpp set(SRC sayhello.cpp hello.cpp) \u8bed\u6cd5\uff1a set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]]) include_directories - \u5411\u5de5\u7a0b\u6dfb\u52a0\u591a\u4e2a\u7279\u5b9a\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84 --->\u76f8\u5f53\u4e8e\u6307\u5b9ag++\u7f16\u8bd1\u5668\u7684-I\u53c2\u6570 # \u5c06/usr/include/myincludefolder \u548c ./include \u6dfb\u52a0\u5230\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84 include_directories(/usr/include/myincludefolder ./include) \u8bed\u6cd5\uff1a include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 \u2026) link_directories - \u5411\u5de5\u7a0b\u6dfb\u52a0\u591a\u4e2a\u7279\u5b9a\u7684\u5e93\u6587\u4ef6\u641c\u7d22\u8def\u5f84 --->\u76f8\u5f53\u4e8e\u6307\u5b9ag++\u7f16\u8bd1\u5668\u7684-L\u53c2\u6570 # \u5c06/usr/lib/mylibfolder \u548c ./lib \u6dfb\u52a0\u5230\u5e93\u6587\u4ef6\u641c\u7d22\u8def\u5f84 link_directories(/usr/lib/mylibfolder ./lib) \u8bed\u6cd5\uff1alink_directories(dir1 dir2 \u2026) add_library - \u751f\u6210\u5e93\u6587\u4ef6 # \u901a\u8fc7\u53d8\u91cf SRC \u751f\u6210 libhello.so \u5171\u4eab\u5e93 add_library(hello SHARED ${SRC}) \u8bed\u6cd5\uff1a add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 \u2026 sourceN) add_compile_options - \u6dfb\u52a0\u7f16\u8bd1\u53c2\u6570 # \u6dfb\u52a0\u7f16\u8bd1\u53c2\u6570 -Wall -std=c++11 add_compile_options(-Wall -std=c++11 -O2) \u8bed\u6cd5\uff1a add_compile_options( add_executable - \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 # \u7f16\u8bd1main.cpp\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6main add_executable(main main.cpp) \u8bed\u6cd5\uff1a add_library(exename source1 source2 \u2026 sourceN) target_link_libraries - \u4e3a target \u6dfb\u52a0\u9700\u8981\u94fe\u63a5\u7684\u5171\u4eab\u5e93 --->\u76f8\u540c\u4e8e\u6307\u5b9ag++\u7f16\u8bd1\u5668-l\u53c2\u6570 # \u5c06hello\u52a8\u6001\u5e93\u6587\u4ef6\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6maincmake target_link_libraries(main hello) \u8bed\u6cd5\uff1a target_link_libraries(target library1library2\u2026) add_subdirectory - \u5411\u5f53\u524d\u5de5\u7a0b\u6dfb\u52a0\u5b58\u653e\u6e90\u6587\u4ef6\u7684\u5b50\u76ee\u5f55\uff0c\u5e76\u53ef\u4ee5\u6307\u5b9a\u4e2d\u95f4\u4e8c\u8fdb\u5236\u548c\u76ee\u6807\u4e8c\u8fdb\u5236\u5b58\u653e\u7684\u4f4d\u7f6e # \u6dfb\u52a0src\u5b50\u76ee\u5f55\uff0csrc\u4e2d\u9700\u6709\u4e00\u4e2aCMakeLists.txt add_subdirectory(src) \u8bed\u6cd5\uff1a add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL]) aux_source_directory - \u53d1\u73b0\u4e00\u4e2a\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u5e76\u5c06\u5217\u8868\u5b58\u50a8\u5728\u4e00\u4e2a\u53d8\u91cf\u4e2d\uff0c\u8fd9\u4e2a\u6307\u4ee4\u4e34\u65f6\u88ab\u7528\u6765\u81ea\u52a8\u6784\u5efa\u6e90\u6587\u4ef6\u5217\u8868 # \u5b9a\u4e49SRC\u53d8\u91cf\uff0c\u5176\u503c\u4e3a\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6 aux_source_directory(. SRC) # \u7f16\u8bd1SRC\u53d8\u91cf\u6240\u4ee3\u8868\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u751f\u6210main\u53ef\u6267\u884c\u6587\u4ef6 add_executable(main ${SRC}) \u8bed\u6cd5\uff1a aux_source_directory(dir VARIABLE)","title":"cmake\u57fa\u672c\u8bed\u6cd5"},{"location":"cmake/cmake/#cmake_1","text":"CMAKE_C_FLAGS gcc\u7f16\u8bd1\u9009\u9879 CMAKE_CXX_FLAGS g++\u7f16\u8bd1\u9009\u9879 # \u5728CMAKE_CXX_FLAGS\u7f16\u8bd1\u9009\u9879\u540e\u8ffd\u52a0-std=c++11 set( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\") CMAKE_BUILD_TYPE \u7f16\u8bd1\u7c7b\u578b(Debug, Release) # \u8bbe\u5b9a\u7f16\u8bd1\u7c7b\u578b\u4e3adebug\uff0c\u8c03\u8bd5\u65f6\u9700\u8981\u9009\u62e9debug set(CMAKE_BUILD_TYPE Debug) # \u8bbe\u5b9a\u7f16\u8bd1\u7c7b\u578b\u4e3arelease\uff0c\u53d1\u5e03\u65f6\u9700\u8981\u9009\u62e9release set(CMAKE_BUILD_TYPE Release) CMAKE_BINARY_DIR PROJECT_BINARY_DIR __BINARY_DIR \u8fd9\u4e09\u4e2a\u53d8\u91cf\u6307\u4ee3\u7684\u5185\u5bb9\u662f\u4e00\u81f4\u7684\u3002 \u5982\u679c\u662f in source build\uff0c\u6307\u7684\u5c31\u662f\u5de5\u7a0b\u9876\u5c42\u76ee\u5f55\u3002 \u5982\u679c\u662f out-of-source \u7f16\u8bd1,\u6307\u7684\u662f\u5de5\u7a0b\u7f16\u8bd1\u53d1\u751f\u7684\u76ee\u5f55\u3002 PROJECT_BINARY_DIR \u8ddf\u5176\u4ed6\u6307\u4ee4\u7a0d\u6709\u533a\u522b\uff0c\u4e0d\u8fc7\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ed6\u4eec\u662f\u4e00\u81f4\u7684\u3002 CMAKE_SOURCE_DIR PROJECT_SOURCE_DIR __SOURCE_DIR \u8fd9\u4e09\u4e2a\u53d8\u91cf\u6307\u4ee3\u7684\u5185\u5bb9\u662f\u4e00\u81f4\u7684,\u4e0d\u8bba\u91c7\u7528\u4f55\u79cd\u7f16\u8bd1\u65b9\u5f0f,\u90fd\u662f\u5de5\u7a0b\u9876\u5c42\u76ee\u5f55\u3002 \u4e5f\u5c31\u662f\u5728 in source build\u65f6,\u4ed6\u8ddf CMAKE_BINARY_DIR \u7b49\u53d8\u91cf\u4e00\u81f4\u3002 PROJECT_SOURCE_DIR \u8ddf\u5176\u4ed6\u6307\u4ee4\u7a0d\u6709\u533a\u522b,\u73b0\u5728,\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ed6\u4eec\u662f\u4e00\u81f4\u7684\u3002 CMAKE_C_COMPILER\uff1a\u6307\u5b9aC\u7f16\u8bd1\u5668 CMAKE_CXX_COMPILER\uff1a\u6307\u5b9aC++\u7f16\u8bd1\u5668 EXECUTABLE_OUTPUT_PATH\uff1a\u53ef\u6267\u884c\u6587\u4ef6\u8f93\u51fa\u7684\u5b58\u653e\u8def\u5f84 LIBRARY_OUTPUT_PATH\uff1a\u5e93\u6587\u4ef6\u8f93\u51fa\u7684\u5b58\u653e\u8def\u5f84","title":"CMake\u5e38\u7528\u53d8\u91cf"},{"location":"cmake/cmake/#cmake_2","text":"\u9879\u76ee\u4e3b\u76ee\u5f55\u5b58\u5728\u4e00\u4e2aCMakeLists.txt\u6587\u4ef6 \u4e24\u79cd\u65b9\u5f0f\u8bbe\u7f6e\u7f16\u8bd1\u89c4\u5219 \uff1a \u5305\u542b\u6e90\u6587\u4ef6\u7684\u5b50\u6587\u4ef6\u5939\u5305\u542bCMakeLists.txt\u6587\u4ef6\uff0c\u4e3b\u76ee\u5f55\u7684CMakeLists.txt\u901a\u8fc7add_subdirectory\u6dfb\u52a0\u5b50\u76ee\u5f55\u5373\u53ef\uff1b \u5305\u542b\u6e90\u6587\u4ef6\u7684\u5b50\u6587\u4ef6\u5939\u672a\u5305\u542bCMakeLists.txt\u6587\u4ef6\uff0c\u5b50\u76ee\u5f55\u7f16\u8bd1\u89c4\u5219\u4f53\u73b0\u5728\u4e3b\u76ee\u5f55\u7684CMakeLists.txt\u4e2d\uff1b","title":"CMake\u76ee\u5f55\u7ed3\u6784\uff1a"},{"location":"cmake/cmake/#_1","text":"\u5728 linux \u5e73\u53f0\u4e0b\u4f7f\u7528 CMake \u6784\u5efaC/C++\u5de5\u7a0b\u7684\u6d41\u7a0b\u5982\u4e0b: \u624b\u52a8\u7f16\u5199 CmakeLists.txt\u3002 \u6267\u884c\u547d\u4ee4 cmake PATH \u751f\u6210 Makefile ( PATH \u662f\u9876\u5c42CMakeLists.txt \u6240\u5728\u7684\u76ee\u5f55 )\u3002 \u6267\u884c\u547d\u4ee4 make \u8fdb\u884c\u7f16\u8bd1\u3002 1# important tips 2. # \u8868\u793a\u5f53\u524d\u76ee\u5f55 3./ # \u8868\u793a\u5f53\u524d\u76ee\u5f55 4 5.. # \u8868\u793a\u4e0a\u7ea7\u76ee\u5f55 6../ # \u8868\u793a\u4e0a\u7ea7\u76ee\u5f55","title":"\u7f16\u8bd1\u6d41\u7a0b"},{"location":"cmake/cmake/#_2","text":"\u5185\u90e8\u6784\u5efa(in-source build) \uff1a\u4e0d\u63a8\u8350\u4f7f\u7528 \u5185\u90e8\u6784\u5efa\u4f1a\u5728\u540c\u7ea7\u76ee\u5f55\u4e0b\u4ea7\u751f\u4e00\u5927\u5806\u4e2d\u95f4\u6587\u4ef6\uff0c\u8fd9\u4e9b\u4e2d\u95f4\u6587\u4ef6\u5e76\u4e0d\u662f\u6211\u4eec\u6700\u7ec8\u6240\u9700\u8981\u7684\uff0c\u548c\u5de5\u7a0b\u6e90\u6587\u4ef6\u653e\u5728\u4e00\u8d77\u4f1a\u663e\u5f97\u6742\u4e71\u65e0\u7ae0\u3002 ## \u5185\u90e8\u6784\u5efa # \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\uff0c\u7f16\u8bd1\u672c\u76ee\u5f55\u7684CMakeLists.txt\uff0c\u751f\u6210Makefile\u548c\u5176\u4ed6\u6587\u4ef6 cmake . # \u6267\u884cmake\u547d\u4ee4\uff0c\u751f\u6210target make \u5916\u90e8\u6784\u5efa(out-of-source build) \uff1a \u63a8\u8350\u4f7f\u7528 \u5c06\u7f16\u8bd1\u8f93\u51fa\u6587\u4ef6\u4e0e\u6e90\u6587\u4ef6\u653e\u5230\u4e0d\u540c\u76ee\u5f55\u4e2d ## \u5916\u90e8\u6784\u5efa # 1. \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\uff0c\u521b\u5efabuild\u6587\u4ef6\u5939 mkdir build # 2. \u8fdb\u5165\u5230build\u6587\u4ef6\u5939 cd build # 3. \u7f16\u8bd1\u4e0a\u7ea7\u76ee\u5f55\u7684CMakeLists.txt\uff0c\u751f\u6210Makefile\u548c\u5176\u4ed6\u6587\u4ef6 cmake .. # 4. \u6267\u884cmake\u547d\u4ee4\uff0c\u751f\u6210target make","title":"\u4e24\u79cd\u6784\u5efa\u65b9\u5f0f"},{"location":"cmake/cmake/#cmake_3","text":"# Set the minimum version of CMake that can be used cmake_minimum_required(VERSION 3.0) # Set the project name project (HELLO) # Add an executable add_executable(hello_cmake main.cpp)","title":"\u6700\u5c0fCMake\u5de5\u7a0b"},{"location":"cmake/cmake/#-","text":"# Set the minimum version of CMake that can be used cmake_minimum_required(VERSION 3.0) #project name project(SWAP) #head file pat include_directories( include ) #source directory files to var add_subdirectory( src DIR_SRCS ) #add executable file add_executable(swap_02 ${TEST_MATH}) #add link library target_link_libraries(${FS_BUILD_BINARY_PREFIX}sqrt ${LIBRARIES})","title":"\u591a\u76ee\u5f55\u5de5\u7a0b - \u76f4\u63a5\u7f16\u8bd1"},{"location":"cmake/cmake/#-_1","text":"# Set the minimum version of CMake that can be used cmake_minimum_required(VERSION 3.0) #project name project(SWAP_LIBRARY) #add compile options add_compile_options(\"-Wall -std=c++11\") #set CMAKE_BUILD_TYPE set( CMAKE_BUILD_TYPE Debug ) # set output binary path set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin) ############################################################ # Create a library ############################################################ #Generate the static library from the library sources add_library( swap_library STATIC src/Swap.cpp ) target_include_directories( swap_lib PUBLIC ${PROJECT_SOURCE_DIR}/include ) ############################################################ # Create an executable ############################################################ # Add an executable with the above sources add_executable( swap_01 main.cpp ) # link the new swap_01 target with the swap_lib target target_link_libraries( swap_01 swap_liby )","title":"\u591a\u76ee\u5f55\u5de5\u7a0b - \u751f\u6210\u5e93\u7f16\u8bd1"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/","text":"\u5411\u91cf \u00b6 \u70b9\u79ef\uff08\u5185\u79ef\uff09 \u00b6 \u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u901a\u7528\u516c\u5f0f \u00b6 \u5bf9\u4e8e \u7ef4\u7684\u5411\u91cf \u548c \uff0c \u548c \u8868\u793a\u5411\u91cf \u548c \u5728\u7b2c \u4e2a\u7ef4\u5ea6\u4e0a\u7684\u5206\u91cf\u3002 \u4ea6\u53ef\u5316\u7b80\u4e3a\uff1a \u5bf9\u4e8e\u4e8c\u7ef4\u5411\u91cf \u548c \u00b6 \u8bbe\u5411\u91cf \u548c \u7684\u6a21\u5206\u522b\u4e3a \u548c \uff0c\u5176\u5939\u89d2\u4e3a \uff0c\u5219\u6709 \u5411\u91cf\u81ea\u8eab\u7684\u70b9\u79ef\u4e3a\u5176\u957f\u5ea6\u7684\u5e73\u65b9\u3002 \u70b9\u79ef\u4e0e\u65b9\u5411\u7684\u5173\u7cfb\uff1a \u548c \u7684\u65b9\u5411 <0 \u949d\u89d2 \u53cd\u5411 =0 \u76f4\u89d2 \u5782\u76f4 >0 \u9510\u89d2 \u540c\u5411 \u53c9\u79ef\uff08\u5916\u79ef\uff09 \u00b6 \u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u901a\u7528\u516c\u5f0f \u00b6 \u6d89\u53ca\u5230\u884c\u5217\u5f0f\u5c55\u5f00\u8ba1\u7b97\uff0c\u8fd9\u91cc\u7528\u4e09\u7ef4\u4e3e\u4f8b\u3002 \u5bf9\u4e8e\u4e8c\u7ef4\u5411\u91cf \u548c \u00b6 \u53c9\u79ef\u53ef\u4ee5\u7528\u6765\u6c42\u51fa\u6cd5\u5411\u91cf\u65b9\u5411\u3002 \u53c9\u79ef\u4e3a\u5411\u91cf\u56f4\u6210\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u9762\u79ef\uff08\u5e26\u7b26\u53f7\uff09\u3002 \u82e5 \uff0c\u5219\u8868\u793a \u53ef\u901a\u8fc7\u9006\u65f6\u9488\u65b9\u5411\u65cb\u8f6c\u81f3 \u65b9\u5411\uff0c\u5c0f\u4e8e0\u5219\u4e3a\u987a\u65f6\u9488\uff0c\u7b49\u4e8e0\u5219\u8868\u793a\u4e24\u4e2a\u5411\u91cf\u5171\u7ebf\u3002 \u5355\u4f4d\u5411\u91cf \u00b6 \u5bf9\u4e8e\u5411\u91cf \uff0c\u5176\u5355\u4f4d\u5411\u91cf \u6295\u5f71 \u00b6 \u5bf9\u4e8e\u5411\u91cf \u3001 \uff0c \u5728 \u4e0a\u7684\u6295\u5f71\u4e3a \u4f8b\u9898 \u00b6 POJ 2007\uff1aScrambled Polygon \u4ee3\u7801\u6a21\u677f \u00b6 // \u4e8c\u7ef4\u5411\u91cf struct Vector { double x , y ; Vector () {} Vector ( double x , double y ) : x ( x ), y ( y ) {} // \u70b9\u79ef double operator * ( Vector v ) { return x * v . x + y * v . y ; } // \u53c9\u79ef double operator ^ ( Vector v ) { return x * v . y - y * v . x ; } // \u4e58\u6cd5 Vector operator * ( double d ) { return Vector ( x * d , y * d ); } // \u52a0\u6cd5 Vector operator + ( Vector v ) { return Vector ( x + v . x , y + v . y ); } // \u51cf\u6cd5 Vector operator - ( Vector v ) { return Vector ( x - v . x , y - v . y ); } // \u6a21 double length () { return sqrt (( * this ) * ( * this )); } // \u5355\u4f4d\u5316 Vector unit () { return ( * this ) * ( 1.0 / length ()); } }; \u70b9 \u00b6 \u70b9\u4e0e\u5411\u91cf\u7684\u8868\u793a\u65b9\u6cd5\u76f8\u540c\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a\u5750\u6807\u6765\u8868\u793a\uff0c\u76f4\u63a5\u91cd\u7528\u5411\u91cf\u5373\u53ef\uff0c\u65e0\u9700\u91cd\u590d\u5b9a\u4e49\u3002 \u7ed5\u70b9\u65cb\u8f6c \u00b6 \u70b9\u7ed5\u70b9\u65cb\u8f6c\uff0c\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u7406\u89e3\u6210 \u65cb\u8f6c\u5230 \uff0c\u5176\u4e2d\u70b9 \u4e3a\u65cb\u8f6c\u7684\u4e2d\u5fc3\u3002 \u53ef\u4ee5\u5148\u5c06 \u5e73\u79fb\u81f3\u539f\u70b9\uff0c\u65cb\u8f6c\u5b8c\u6210\u540e\uff0c\u518d\u5e73\u79fb\u56de\u539f\u6765\u4f4d\u7f6e\u3002 \u8bbe: \u539f\u5411\u91cf \u4e0ex\u8f74\u5939\u89d2\u4e3a \uff0c\u8868\u793a\u4e3a \u65cb\u8f6c\u540e\u7684\u5411\u91cf \u4e0ex\u8f74\u5939\u89d2\u4e3a ,\u8868\u793a\u4e3a \u4e3a \u6709\u5982\u4e0b\u63a8\u5bfc\uff1a \u4ee3\u7801\u6a21\u677f \u00b6 #define Point Vector // \u4f5c\u4e3aVector\u6210\u5458\u51fd\u6570 Vector rotate ( double alpha ) { return Vector ( x + ( x * cos ( alpha ) - y * sin ( alpha )), y + ( x * sin ( alpha ) + y * cos ( alpha ))); } \u4f8b\u9898 \u00b6 POJ 2624\uff1a4 th Point \u76f4\u7ebf \u00b6 \u4e24\u70b9\u8fde\u6210\u7ebf\uff0c\u7528\u4e24\u4e2a\u70b9\u76f8\u51cf\u5373\u53ef\u8868\u793a\u3002 \u70b9-\u7ebf\u8ddd\u79bb \u00b6 \u5bf9\u4e8e\u70b9A\u3001B\u6240\u5728\u76f4\u7ebf \u548c\u70b9P\uff0cP\u70b9\u5230\u76f4\u7ebf \u7684\u8ddd\u79bb\u6709\uff1a \u8bbe \u5230 \u7684\u8ddd\u79bb\u4e3a \u70b9-\u7ebf\u4f4d\u7f6e \u00b6 \u5bf9\u4e8e\u70b9A\u3001B\u6240\u5728\u76f4\u7ebf \u548c\u70b9P\uff0c\u5229\u7528\u524d\u9762\u4ecb\u7ecd\u7684\u53c9\u79ef\u4e0e\u5411\u91cf\u65b9\u5411\u5173\u7cfb\u7684\u6027\u8d28\uff0c\u6784\u9020\u5411\u91cf \uff0c\u901a\u8fc7 \u6765\u5224\u65adP\u548c \u7684\u4f4d\u7f6e\u5173\u7cfb\uff1a \u8fc7\u70b9\u505a\u5782\u7ebf \u00b6 \u5bf9\u4e8e\u70b9A\u3001B\u6240\u5728\u76f4\u7ebf \u548c\u70b9P\uff1a **\u5782\u7ebf\uff1a**\u5c06\u76f4\u7ebf\u6240\u5728\u5411\u91cf \u65cb\u8f6c \uff0c\u5e76\u5e73\u79fb\u81f3\u7ecf\u8fc7\u70b9 \u5373\u53ef\u3002 **\u5782\u8db3\uff1a**\u5229\u7528\u70b9\u79ef\u6c42\u51fa \u5728 \u4e0a\u6295\u5f71\u7684\u957f\u5ea6 \uff0c \u5373\u4e3a\u5782\u8db3\u7684\u4f4d\u7f6e\u3002 \u76f4\u7ebf-\u76f4\u7ebf\u7684\u4f4d\u7f6e \u00b6 \u5bf9\u4e8e\u70b9 \u3001 \u6240\u5728\u76f4\u7ebf \u548cC\u3001D\u6240\u5728\u76f4\u7ebf \uff1a \u5982\u679c\u4e8c\u8005\u4e0d\u76f8\u4ea4\uff08\u5e73\u884c\u6216\u76f8\u7b49\uff09\uff0c\u5219 \u548c \u5728 \u540c\u4e00\u4fa7\uff0c\u5176\u53c9\u79ef\u503c\u548c\u7b26\u53f7\u90fd\u76f8\u540c\uff0c\u76f8\u51cf\u4e3a \u3002\u53cd\u4e4b\u5219\u4e0d\u4e3a\u96f6\u3002 \u5982\u679c\u4e8c\u8005\u4e0d\u76f8\u4ea4\uff0c\u5219\u518d\u901a\u8fc7 \u5230 \u7684\u8ddd\u79bb\u6765\u5224\u65ad\u4e8c\u8005\u662f\u5426\u76f8\u7b49\u3002\u8ddd\u79bb\u4e3a \u5219\u76f8\u7b49\uff0c\u5426\u5219\u5e73\u884c\u3002 \u82e5\u4e8c\u8005\u76f8\u4ea4\uff0c\u901a\u8fc7\u76f8\u4f3c\u4e09\u89d2\u5f62\u7684\u6bd4\u4f8b\u5173\u7cfb\uff0c\u53ef\u6c42\u5f97\u5219\u5176\u4ea4\u70b9\u4f4d\u7f6e\u4e3a\uff1a \u4ee3\u7801 \u00b6 // \u4e8c\u7ef4\u76f4\u7ebf struct Line { Point x , y ; // \u901a\u8fc7\u4e24\u70b9\u6784\u9020\u76f4\u7ebf Line ( Point x , Point y ) : x ( x ), y ( y ) {} // \u70b9\u548c\u65b9\u5411\u5411\u91cf\u6765\u6784\u9020\u7ebf static Line makeLine ( Point x , Vector v ) { return Line ( x , x + v ); } bool operator == ( const Line & rhs ) const { return x == rhs . x && y == rhs . y ; } bool operator != ( const Line & rhs ) const { return ! ( rhs == * this ); } // \u7ebf\u957f\u5ea6 double length () { return ( y - x ). length (); } // \u70b9\u5230\u8be5\u76f4\u7ebf\u7684\u8ddd\u79bb double dist ( Point p ) { return fabs (( x - p ) ^ ( y - p )) / length (); } // #define EPS 1e-6 // \u5224\u65ad\u70b9\u548c\u76f4\u7ebf\u7684\u4f4d\u7f6e int side ( Point p ) { double result = ( y - x ) ^ ( p - x ); if ( fabs ( result ) < EPS ) return 0 ; // \u5728\u7ebf\u4e0a else if ( result > 0 ) return 1 ; // \u5de6\u4fa7 else return -1 ; // \u53f3\u4fa7 } // \u8fc7\u70b9\u505a\u5782\u7ebf Line vertical ( Point p ) { return makeLine ( p , ( y - x ). rotate ( PI / 2 )); } // \u5782\u8db3 Point foot ( Point p ) { Vector self = y - x ; return x + self . unit () * self . project ( p - x ); } Point intersect ( Line l ) { double s1 = (( x - l . x ) ^ ( l . y - l . x )) / 2 ; double s2 = (( l . y - l . x ) ^ ( y - l . x )) / 2 ; if ( fabs ( s1 + s2 ) < EPS ) { if ( l . dist ( x )) return l . x ; // \u91cd\u5408 else return l . y ; // \u5e73\u884c } else return x + ( y - x ) * ( s1 / ( s1 + s2 )); // \u4ea4\u70b9 } }; \u7ebf\u6bb5 \u00b6 \u70b9-\u7ebf\u6bb5\u4f4d\u7f6e \u00b6 \u5bf9\u4e8e\u70b9 \u548c\u7ebf\u6bb5 \uff0c\u6784\u9020\u5411\u91cf \uff0c\u6c42\u53c9\u79ef\u6709\uff1a \u5bf9\u4e8e\u5171\u7ebf\u7684\u60c5\u51b5\uff0c\u518d\u6839\u636e\u4e24\u4e2a\u7aef\u70b9\u7684\u5750\u6807\u5224\u65ad\uff0c \u662f\u5426\u5728\u7ebf\u6bb5 \u4e0a\uff0c\u5373\u6ee1\u8db3\u4ee5\u4e0b\u60c5\u51b5\u7684\uff0c\u5373\u4e3a\u70b9 \u5728\u7ebf\u6bb5 \u4e0a\uff1a \u76f4\u7ebf-\u7ebf\u6bb5\u4f4d\u7f6e \u00b6 \u5bf9\u4e8e\u76f4\u7ebf \u548c\u7ebf\u6bb5 \uff0c\u4e8c\u8005\u4f4d\u7f6e\u5173\u7cfb\u7684\u5224\u65ad\uff1a \u6784\u9020\u5411\u91cf \uff0c\u5e76\u6c42\u53c9\u79ef \u82e5\u53c9\u79ef\u90fd\u4e0d\u4e3a \uff0c\u4e14\u7b26\u53f7\u76f8\u540c\uff0c\u5219\u53ef\u8ba4\u4e3a\u70b9 \u90fd\u5728\u5411\u91cf \u540c\u4e00\u4fa7\uff0c\u6216\u4e8c\u8005\u91cd\u5408\u3002 \u5982\u679c\u4e00\u4e2a\u7aef\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb\u4e3a \uff0c\u5219\u4e8c\u8005\u91cd\u5408\u3002 \u5426\u5219\uff0c\u4e8c\u8005\u4e0d\u76f8\u4ea4\u3002 \u5426\u5219\u4e8c\u8005\u76f8\u4ea4\u3002\u4ea4\u70b9\u4f4d\u7f6e\u6c42\u6cd5\u540c*\u76f4\u7ebf-\u76f4\u7ebf\u4ea4\u70b9*\u4f4d\u7f6e\u3002 \u7ebf\u6bb5-\u7ebf\u6bb5\u4f4d\u7f6e \u00b6 \u89c4\u8303\u76f8\u4ea4\uff1a\u4e24\u6761\u7ebf\u6bb5\u6070\u6709\u4e00\u4e2a\u4e0d\u662f\u7aef\u70b9\u7684\u516c\u5171\u70b9\u3002 \u5bf9\u4e8e\u76f4\u7ebf \u548c\u7ebf\u6bb5 \uff0c\u5229\u7528\u53c9\u79ef\u7684\u7b26\u53f7\u5224\u65ad\u662f\u5426\u4e3a\u89c4\u8303\u76f8\u4ea4\uff0c\u5373\u4efb\u4e00\u6761\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u5206\u5c5e\u53e6\u4e00\u6761\u7ebf\u6bb5\u7684\u4e24\u4fa7\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \u5982\u4e0d\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\uff0c\u518d\u5224\u65ad\u4e24\u6761\u7ebf\u6bb5\u7684\u7aef\u70b9\u662f\u5426\u5728\u53e6\u4e00\u6761\u7ebf\u6bb5\u4e0a\uff0c\u82e5\u662f\u5219\u4e3a\u975e\u89c4\u8303\u76f8\u4ea4\uff0c\u5426\u5219\u4e8c\u8005\u4e0d\u76f8\u4ea4\u3002 \u4f8b\u9898 \u00b6 POJ 3304\uff1aSegments POJ 1039\uff1aPipe \u4ee3\u7801 \u00b6 // \u4e8c\u7ef4\u7ebf\u6bb5 struct Seg { Point x , y ; Seg ( const Point & x , const Point & y ) : x ( x ), y ( y ) {} // \u5224\u65ad\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u5185 bool pointIn ( Point p ) { double cross = ( x - p ) ^ ( y - x ); if ( fabs ( cross ) < EPS ) return 0 ; if ( fabs ( p . x - min ( x . x , y . x )) < EPS && fabs ( p . y - min ( x . y , y . y )) < EPS && fabs ( max ( x . x , y . x ) - p . x ) < EPS && fabs ( max ( x . y , y . y ) - p . y ) < EPS ) return 1 ; return 0 ; } Point intersect ( Line l ) { int s1 = l . side ( x ); int s2 = l . side ( y ); if ( s1 * s2 > 0 ) { // if (l.dist(x) < EPS) // return l.y; // \u91cd\u5408 // else return Point ( EPS / 10 , EPS / 10 ); // \u4e0d\u76f8\u4ea4 } else if ( s1 == 0 && s2 == 0 ) { return l . x ; // \u91cd\u5408 } else if ( s1 == 0 ) // \u4e00\u4e2a\u7aef\u70b9\u5728\u76f4\u7ebf\u4e0a { return x ; } else if ( s2 == 0 ) // \u53e6\u4e00\u4e2a\u7aef\u70b9\u5728\u76f4\u7ebf\u4e0a { return y ; } else { return Line ( x , y ). intersect ( l ); // \u4ea4\u70b9 } } // \u5224\u65ad\u7ebf\u6bb5\u76f8\u4ea4 bool isIntersected ( Seg s ) { Point p1 = x ; Point p2 = y ; Point p3 = s . x ; Point p4 = s . y ; double s1 = ( p3 - p1 ) ^ ( p4 - p1 ); double s2 = ( p4 - p2 ) ^ ( p3 - p2 ); if ((( p2 - p1 ) ^ ( p3 - p1 ) * (( p2 - p1 ) ^ ( p4 - p1 ))) < - EPS && ((( p4 - p3 ) ^ ( p1 - p3 )) * (( p4 - p3 ) ^ ( p2 - p3 ))) < - EPS ) return 1 ; // \u89c4\u8303\u76f8\u4ea4 if ( s . pointIn ( p1 ) || s . pointIn ( p2 ) || pointIn ( p3 ) || pointIn ( p4 )) return 1 ; // \u975e\u89c4\u8303\u76f8\u4ea4 return 0 ; } bool operator == ( const Seg & rhs ) const { return x == rhs . x && y == rhs . y ; } bool operator != ( const Seg & rhs ) const { return ! ( rhs == * this ); } }; \u591a\u8fb9\u5f62 \u00b6 \u51f8\u591a\u8fb9\u5f62 \u00b6 \u767e\u5ea6\u767e\u79d1 \uff1a\u51f8\u591a\u8fb9\u5f62\u662f\u4e00\u4e2a\u5185\u90e8\u4e3a \u51f8\u96c6 \u7684\u7b80\u5355\u591a\u8fb9\u5f62\u3002\u51f8\u591a\u8fb9\u5f62\uff08Convex Polygon\uff09\u6307\u5982\u679c\u628a\u4e00\u4e2a \u591a\u8fb9\u5f62 \u7684\u6240\u6709\u8fb9\u4e2d\uff0c\u4efb\u610f\u4e00\u6761\u8fb9\u5411\u4e24\u65b9\u65e0\u9650\u5ef6\u957f\u6210\u4e3a\u4e00\u76f4\u7ebf\u65f6\uff0c\u5176\u4ed6\u5404\u8fb9\u90fd\u5728\u6b64\u76f4\u7ebf\u7684\u540c\u65c1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u591a\u8fb9\u5f62\u5c31\u53eb\u505a\u51f8\u591a\u8fb9\u5f62\uff0c\u5176 \u5185\u89d2 \u5e94\u8be5\u5168\u4e0d\u662f\u4f18\u89d2\uff0c\u4efb\u610f\u4e24\u4e2a \u9876\u70b9 \u95f4\u7684 \u7ebf\u6bb5 \u4f4d\u4e8e\u591a\u8fb9\u5f62\u7684\u5185\u90e8\u6216\u8fb9\u4e0a\u3002 \u5c31\u662f\u6ca1\u6709\u51f9\u89d2\u7684\u591a\u8fb9\u5f62\uff0c\u7279\u70b9\u662f\u6240\u6709\u8fb9\u6240\u5728\u7684\u76f4\u7ebf\u90fd\u4e0d\u4f1a\u7a7f\u8fc7\u5176\u4ed6\u8fb9\u3002 \u591a\u8fb9\u5f62\u9762\u79ef \u00b6 \u5bf9\u591a\u8fb9\u5f62\u8fdb\u884c\u4e09\u89d2\u5256\u5206\uff1a \u8bbe\u539f\u70b9\u4e3a \u6309\u9006\u65f6\u9488\u65b9\u5411\u4e3a\u4e2a\u6761\u8fb9\u6307\u5b9a\u65b9\u5411 \u5bf9\u4e8e\u6bcf\u6761\u8fb9 \uff0c\u7d2f\u52a0 \u70b9-\u591a\u8fb9\u5f62\u4f4d\u7f6e \u00b6 \u8bbe\u591a\u8fb9\u5f62 \u7684\u9876\u70b9\u5e8f\u5217\u4e3a \u3001\u5f85\u5224\u5b9a\u7684\u70b9 \u3002 \u5c04\u7ebf\u6cd5 \u00b6 \u7b97\u6cd5\u601d\u8def \u00b6 \u8fc7 \u505a\u6c34\u5e73\u5c04\u7ebf \uff1a \u82e5 \u4e0e \u7684\u8fb9\u754c\u4e0d\u76f8\u4ea4\uff0c\u5219 \u5728 \u7684\u5916\u90e8\u3002 \u82e5\u76f8\u4ea4\uff0c\u5219\u518d\u5206\u6790\u4ea4\u70b9\u6570\u7684\u5947\u5076\u6027\u3002 \u4ea4\u70b9\u6570 \u70b9\u76f8\u5bf9\u4e8e\u591a\u8fb9\u5f62\u7684\u4f4d\u7f6e \u5947\u6570 \u5185\u90e8 \u5076\u6570 \u5916\u90e8 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u591a\u8fb9\u5f62\u4e0d\u662f\u51f8\u591a\u8fb9\u5f62\u65f6\uff0c\u9700\u8981\u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff1a \u5c04\u7ebf\u6070\u597d\u7ecf\u8fc7 \u7684\u67d0\u4e2a\u9876\u70b9 \u5c04\u7ebf\u6070\u597d\u4e0e \u7684\u67d0\u6761\u8fb9\u91cd\u5408 \u7b97\u6cd5\u7279\u70b9 \u00b6 \u8fd0\u7b97\u901f\u5ea6\u5feb \u7cbe\u5ea6\u9ad8 \u7279\u6b8a\u60c5\u51b5\u8f83\u591a \u8f6c\u89d2\u6cd5 \u00b6 \u7b97\u6cd5\u601d\u8def \u00b6 \u6cbf\u591a\u8fb9\u5f62\u8d70\u4e00\u5708\uff0c\u7d2f\u8ba1\u7ed5\u70b9\u65cb\u8f6c\u4e86\u591a\u5c11\u89d2\u5ea6\u3002\uff08\u9700\u8981\u4fdd\u8bc1\u8fb9\u7684\u65b9\u5411\u4e00\u81f4\uff09 \u89d2\u5ea6 \u70b9\u76f8\u5bf9\u4e8e\u591a\u8fb9\u5f62\u7684\u4f4d\u7f6e \u5916\u90e8 \u70b9\u5728\u591a\u8fb9\u5f62\u7684\u8fb9\u4e0a \u5185\u90e8 \u901a\u8fc7\u70b9\u79ef\u516c\u5f0f\u53ef\u4ee5\u6c42\u51fa: **\uff08\u4ec5\u9002\u7528\u4e8e\u51f8\u5305)**\u6216\u4f7f\u7528\u7d2f\u4e58\u53c9\u4e58\uff0c\u5224\u65ad\u70b9\u548c\u8fb9\u7684\u4f4d\u7f6e\u5173\u7cfb\uff1a \u5f53\u70b9\u4f4d\u4e8e\u6240\u6709\u8fb9\u5411\u91cf\u7684\u540c\u4e00\u4fa7\u65f6\uff08\u53c9\u4e58\u503c\u540c\u53f7\uff09\uff0c\u5176\u5728\u591a\u8fb9\u5f62\u5185\u90e8\u3002 \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5728\u540c\u4e00\u4fa7\uff0c\u5219\u4e3a\u5916\u90e8\uff08\u53c9\u4e58\u503c\u5f02\u53f7\uff09\u3002 \u5728\u591a\u8fb9\u5f62\u4e0a\u7684\u60c5\u51b5\u662f\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u51fa\u6765\u7684\uff08\u53c9\u4e58\u4e3a0\uff09\u3002 \u7b97\u6cd5\u7279\u70b9 \u00b6 \u51e0\u4e4e\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5 \u7cbe\u5ea6\u4f4e\u3001\u901f\u5ea6\u8f83\u6162\uff08\u9700\u8981\u7528\u5230\u53cd\u4e09\u89d2\u51fd\u6570\u3001\u5f00\u65b9\u7b49\uff09 \u6c42\u51f8\u5305\uff08\u51f8\u58f3\uff09 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5e73\u9762\u70b9\u96c6\uff0c\u8981\u6c42\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684\u51f8\u591a\u8fb9\u5f62\uff0c\u6ee1\u8db3\u70b9\u96c6\u4e2d\u6240\u6709\u70b9\u90fd\u5728\u51f8\u591a\u8fb9\u5f62\u5185\u90e8\u6216\u8fb9\u4e0a\u3002 \u7a33\u5b9a\u51f8\u5305 \u00b6 \u5bf9\u4e8e\u5df2\u6709\u7684\u51f8\u5305\u4e2d\uff0c\u65e0\u6cd5\u901a\u8fc7\u5728\u5e73\u9762\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u70b9\u83b7\u53d6\u5230\u66f4\u5927\u7684\u51f8\u5305\uff0c\u5219\u8be5\u5df2\u6709\u7684\u51f8\u5305\u79f0\u4e3a*\u7a33\u5b9a\u51f8\u5305*\u3002 \u7279\u6027 \uff1a\u51f8\u5305\u7684\u6bcf\u6761\u8fb9\u4e0a\uff0c\u90fd\u6709\u5927\u4e8e\u7b49\u4e8e \u4e2a\u7684\u9876\u70b9\u3002 \u5177\u4f53\u53ef\u89c1\u4f8b\u9898\u3010 POJ 1228 Grandpa's Estate \u3011\u3002 \u534a\u5e73\u9762\u4ea4 \u00b6 \u534a\u5e73\u9762 \u00b6 \u4e00\u6761\u76f4\u7ebf\u5c06\u4e00\u4e2a\u5e73\u9762\u5206\u4e3a2\u4e2a\u534a\u5e73\u9762\uff0c\u76f4\u7ebf\u662f\u6709\u5411\u7684\uff0c\u8bbe\u76f4\u7ebf\u65b9\u5411\u5de6\u8fb9\u7684\u5e73\u9762\u4e3a\u6211\u4eec\u7814\u7a76\u7684\u534a\u5e73\u9762\uff08\u5305\u542b\u76f4\u7ebf\uff09\u3002 \u534a\u5e73\u9762\u4ea4 \u00b6 \u88ab\uff08\u591a\u4e2a\uff09\u534a\u5e73\u9762\u5305\u542b\u7684\u70b9\u7684\u96c6\u5408\u3002 **\u6027\u8d28\uff1a**\u534a\u5e73\u9762\u4ea4\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u51f8\u533a\u57df\u3002 \u6c42\u4ea4 \u00b6 \u5bf9\u4e8e\u6bcf\u4e00\u6761\u591a\u8fb9\u5f62\u7684\u6bcf\u4e00\u6761\u8fb9 \u3001\u8868\u793a\u534a\u5e73\u9762\u7684\u76f4\u7ebf \uff1a \u5bf9\u591a\u8fb9\u5f62\u6309\u7167\u9006\u65f6\u9488\u6392\u5e8f\u3002 \u5982\u679c\u8fb9 \u7684\u8d77\u70b9 \u4f4d\u4e8e\u534a\u5e73\u9762 \u4e2d\uff0c\u5219\u5c06\u70b9 \u52a0\u5165\u7ed3\u679c\u96c6\u3002 \u6c42\u8fb9 \u4e0e \u7684\u4ea4\u70b9\uff0c\u5e76\u5c06\u7ed3\u679c\u52a0\u5165\u7ed3\u679c\u96c6\u3002\uff08\u5373\u4f7f\u70b9 \u4e0d\u5728\u534a\u5e73\u9762\u4e2d\uff0c\u4e5f\u9700\u8981\u8fd9\u6b65\u64cd\u4f5c\uff09 \u589e\u91cf\u6cd5 \u00b6 \u6784\u9020\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u77e9\u5f62\u3002 \u4f9d\u6b21\u7528\u534a\u5e73\u9762\u548c\u8be5\u77e9\u5f62\u6c42\u4ea4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u5206\u6cbb\u6cd5\uff08\u4e8c\u5206\uff09 \u00b6 \u5c06 \u4e2a\u534a\u5e73\u9762\u5206\u6210 \u4e2a\u5927\u5c0f\u8fd1\u4f3c\u76f8\u7b49\u7684\u96c6\u5408\u3002 \u9012\u5f52\u5730\u6784\u9020\u51f8\u591a\u8fb9\u5f62\u533a\u57df \u4e0e \u3002 \u5408\u5e76 \u4e0e \u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u4f8b\u9898 \u00b6 POJ 1569:Myacm Triangles POJ 1113-Wall POJ 1228-Grandpa's Estate \u4ee3\u7801 \u00b6 // \u4e8c\u7ef4\u591a\u8fb9\u5f62 struct Polygon { // \u70b9\u96c6 vector < Point > points ; Polygon ( const vector < Point > & points ) : points ( points ) {} Polygon () {} /** * \u6839\u636e\u5df2\u6392\u5e8f\u7684\u70b9\u96c6\u6765\u6c42\u534a\u4e2a\u51f8\u58f3\uff08\u4e0a\u534a\u4e2a\u6216\u4e0b\u534a\u4e2a\uff09 * @param pts \u5df2\u6392\u5e8f\u7684\u70b9\u96c6 * @return \u534a\u4e2a\u51f8\u5305\u4e2d\u7684\u70b9\uff0c\u6709\u5e8f\uff0c\u9006\u65f6\u9488\u5e8f */ deque < Point > getHalfConvexHull ( const vector < Point > & pts ) const { deque < Point > deq ; int si = pts . size (); int i = 2 ; deq . pb ( pts [ 0 ]); deq . pb ( pts [ 1 ]); while ( i < si ) { Point nt = pts [ i ]; ++ i ; while ( deq . size () >= 2 ) { Point p2 = deq [ deq . size () - 2 ], p1 = deq . back (); Vector b = p2 - p1 , a = p1 - nt ; double d = ( b ^ a ); if ( d <= 0 ) deq . pop_back (); else break ; } deq . pb ( nt ); } return deq ; } /** * \u6c34\u5e73\u5e8f\u626b\u63cf\u6cd5 * \u6c42\u8be5\u591a\u8fb9\u5f62\u7684\u51f8\u5305 * @return \u51f8\u5305\u7684\u70b9\u96c6\uff0c\u6709\u5e8f\uff0c\u9006\u65f6\u9488\u5e8f */ vector < Point > getConvexHull () { vector < Point > pts ( points ); vector < Point > con ; // 2\u4e2a\u70b9\u65e0\u6cd5\u6784\u6210\u51f8\u5305 if ( pts . size () <= 2 ) { return con ; } // \u4e0b\u51f8\u58f3 sort ( pts . begin (), pts . end ()); deque < Point > temp = getHalfConvexHull ( pts ); for ( int i = 0 ; i < temp . size (); ++ i ) { con . pb ( temp [ i ]); } temp . clear (); // \u4e0a\u51f8\u58f3 sort ( pts . begin (), pts . end (), greater < Point > ()); temp = getHalfConvexHull ( pts ); for ( int i = 1 ; i < temp . size () - 1 ; ++ i ) { con . pb ( temp [ i ]); } return con ; } };","title":"\u8ba1\u7b97\u51e0\u4f55\u57fa\u7840"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_1","text":"","title":"\u5411\u91cf"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_2","text":"","title":"\u70b9\u79ef\uff08\u5185\u79ef\uff09"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_3","text":"\u5bf9\u4e8e \u7ef4\u7684\u5411\u91cf \u548c \uff0c \u548c \u8868\u793a\u5411\u91cf \u548c \u5728\u7b2c \u4e2a\u7ef4\u5ea6\u4e0a\u7684\u5206\u91cf\u3002 \u4ea6\u53ef\u5316\u7b80\u4e3a\uff1a","title":"\u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u901a\u7528\u516c\u5f0f"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_4","text":"\u8bbe\u5411\u91cf \u548c \u7684\u6a21\u5206\u522b\u4e3a \u548c \uff0c\u5176\u5939\u89d2\u4e3a \uff0c\u5219\u6709 \u5411\u91cf\u81ea\u8eab\u7684\u70b9\u79ef\u4e3a\u5176\u957f\u5ea6\u7684\u5e73\u65b9\u3002 \u70b9\u79ef\u4e0e\u65b9\u5411\u7684\u5173\u7cfb\uff1a \u548c \u7684\u65b9\u5411 <0 \u949d\u89d2 \u53cd\u5411 =0 \u76f4\u89d2 \u5782\u76f4 >0 \u9510\u89d2 \u540c\u5411","title":"\u5bf9\u4e8e\u4e8c\u7ef4\u5411\u91cf\u548c"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_5","text":"","title":"\u53c9\u79ef\uff08\u5916\u79ef\uff09"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_6","text":"\u6d89\u53ca\u5230\u884c\u5217\u5f0f\u5c55\u5f00\u8ba1\u7b97\uff0c\u8fd9\u91cc\u7528\u4e09\u7ef4\u4e3e\u4f8b\u3002","title":"\u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u901a\u7528\u516c\u5f0f"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_7","text":"\u53c9\u79ef\u53ef\u4ee5\u7528\u6765\u6c42\u51fa\u6cd5\u5411\u91cf\u65b9\u5411\u3002 \u53c9\u79ef\u4e3a\u5411\u91cf\u56f4\u6210\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u9762\u79ef\uff08\u5e26\u7b26\u53f7\uff09\u3002 \u82e5 \uff0c\u5219\u8868\u793a \u53ef\u901a\u8fc7\u9006\u65f6\u9488\u65b9\u5411\u65cb\u8f6c\u81f3 \u65b9\u5411\uff0c\u5c0f\u4e8e0\u5219\u4e3a\u987a\u65f6\u9488\uff0c\u7b49\u4e8e0\u5219\u8868\u793a\u4e24\u4e2a\u5411\u91cf\u5171\u7ebf\u3002","title":"\u5bf9\u4e8e\u4e8c\u7ef4\u5411\u91cf\u548c"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_8","text":"\u5bf9\u4e8e\u5411\u91cf \uff0c\u5176\u5355\u4f4d\u5411\u91cf","title":"\u5355\u4f4d\u5411\u91cf"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_9","text":"\u5bf9\u4e8e\u5411\u91cf \u3001 \uff0c \u5728 \u4e0a\u7684\u6295\u5f71\u4e3a","title":"\u6295\u5f71"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_10","text":"POJ 2007\uff1aScrambled Polygon","title":"\u4f8b\u9898"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_11","text":"// \u4e8c\u7ef4\u5411\u91cf struct Vector { double x , y ; Vector () {} Vector ( double x , double y ) : x ( x ), y ( y ) {} // \u70b9\u79ef double operator * ( Vector v ) { return x * v . x + y * v . y ; } // \u53c9\u79ef double operator ^ ( Vector v ) { return x * v . y - y * v . x ; } // \u4e58\u6cd5 Vector operator * ( double d ) { return Vector ( x * d , y * d ); } // \u52a0\u6cd5 Vector operator + ( Vector v ) { return Vector ( x + v . x , y + v . y ); } // \u51cf\u6cd5 Vector operator - ( Vector v ) { return Vector ( x - v . x , y - v . y ); } // \u6a21 double length () { return sqrt (( * this ) * ( * this )); } // \u5355\u4f4d\u5316 Vector unit () { return ( * this ) * ( 1.0 / length ()); } };","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_12","text":"\u70b9\u4e0e\u5411\u91cf\u7684\u8868\u793a\u65b9\u6cd5\u76f8\u540c\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a\u5750\u6807\u6765\u8868\u793a\uff0c\u76f4\u63a5\u91cd\u7528\u5411\u91cf\u5373\u53ef\uff0c\u65e0\u9700\u91cd\u590d\u5b9a\u4e49\u3002","title":"\u70b9"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_13","text":"\u70b9\u7ed5\u70b9\u65cb\u8f6c\uff0c\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u7406\u89e3\u6210 \u65cb\u8f6c\u5230 \uff0c\u5176\u4e2d\u70b9 \u4e3a\u65cb\u8f6c\u7684\u4e2d\u5fc3\u3002 \u53ef\u4ee5\u5148\u5c06 \u5e73\u79fb\u81f3\u539f\u70b9\uff0c\u65cb\u8f6c\u5b8c\u6210\u540e\uff0c\u518d\u5e73\u79fb\u56de\u539f\u6765\u4f4d\u7f6e\u3002 \u8bbe: \u539f\u5411\u91cf \u4e0ex\u8f74\u5939\u89d2\u4e3a \uff0c\u8868\u793a\u4e3a \u65cb\u8f6c\u540e\u7684\u5411\u91cf \u4e0ex\u8f74\u5939\u89d2\u4e3a ,\u8868\u793a\u4e3a \u4e3a \u6709\u5982\u4e0b\u63a8\u5bfc\uff1a","title":"\u7ed5\u70b9\u65cb\u8f6c"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_14","text":"#define Point Vector // \u4f5c\u4e3aVector\u6210\u5458\u51fd\u6570 Vector rotate ( double alpha ) { return Vector ( x + ( x * cos ( alpha ) - y * sin ( alpha )), y + ( x * sin ( alpha ) + y * cos ( alpha ))); }","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_15","text":"POJ 2624\uff1a4 th Point","title":"\u4f8b\u9898"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_16","text":"\u4e24\u70b9\u8fde\u6210\u7ebf\uff0c\u7528\u4e24\u4e2a\u70b9\u76f8\u51cf\u5373\u53ef\u8868\u793a\u3002","title":"\u76f4\u7ebf"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#-","text":"\u5bf9\u4e8e\u70b9A\u3001B\u6240\u5728\u76f4\u7ebf \u548c\u70b9P\uff0cP\u70b9\u5230\u76f4\u7ebf \u7684\u8ddd\u79bb\u6709\uff1a \u8bbe \u5230 \u7684\u8ddd\u79bb\u4e3a","title":"\u70b9-\u7ebf\u8ddd\u79bb"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#-_1","text":"\u5bf9\u4e8e\u70b9A\u3001B\u6240\u5728\u76f4\u7ebf \u548c\u70b9P\uff0c\u5229\u7528\u524d\u9762\u4ecb\u7ecd\u7684\u53c9\u79ef\u4e0e\u5411\u91cf\u65b9\u5411\u5173\u7cfb\u7684\u6027\u8d28\uff0c\u6784\u9020\u5411\u91cf \uff0c\u901a\u8fc7 \u6765\u5224\u65adP\u548c \u7684\u4f4d\u7f6e\u5173\u7cfb\uff1a","title":"\u70b9-\u7ebf\u4f4d\u7f6e"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_17","text":"\u5bf9\u4e8e\u70b9A\u3001B\u6240\u5728\u76f4\u7ebf \u548c\u70b9P\uff1a **\u5782\u7ebf\uff1a**\u5c06\u76f4\u7ebf\u6240\u5728\u5411\u91cf \u65cb\u8f6c \uff0c\u5e76\u5e73\u79fb\u81f3\u7ecf\u8fc7\u70b9 \u5373\u53ef\u3002 **\u5782\u8db3\uff1a**\u5229\u7528\u70b9\u79ef\u6c42\u51fa \u5728 \u4e0a\u6295\u5f71\u7684\u957f\u5ea6 \uff0c \u5373\u4e3a\u5782\u8db3\u7684\u4f4d\u7f6e\u3002","title":"\u8fc7\u70b9\u505a\u5782\u7ebf"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#-_2","text":"\u5bf9\u4e8e\u70b9 \u3001 \u6240\u5728\u76f4\u7ebf \u548cC\u3001D\u6240\u5728\u76f4\u7ebf \uff1a \u5982\u679c\u4e8c\u8005\u4e0d\u76f8\u4ea4\uff08\u5e73\u884c\u6216\u76f8\u7b49\uff09\uff0c\u5219 \u548c \u5728 \u540c\u4e00\u4fa7\uff0c\u5176\u53c9\u79ef\u503c\u548c\u7b26\u53f7\u90fd\u76f8\u540c\uff0c\u76f8\u51cf\u4e3a \u3002\u53cd\u4e4b\u5219\u4e0d\u4e3a\u96f6\u3002 \u5982\u679c\u4e8c\u8005\u4e0d\u76f8\u4ea4\uff0c\u5219\u518d\u901a\u8fc7 \u5230 \u7684\u8ddd\u79bb\u6765\u5224\u65ad\u4e8c\u8005\u662f\u5426\u76f8\u7b49\u3002\u8ddd\u79bb\u4e3a \u5219\u76f8\u7b49\uff0c\u5426\u5219\u5e73\u884c\u3002 \u82e5\u4e8c\u8005\u76f8\u4ea4\uff0c\u901a\u8fc7\u76f8\u4f3c\u4e09\u89d2\u5f62\u7684\u6bd4\u4f8b\u5173\u7cfb\uff0c\u53ef\u6c42\u5f97\u5219\u5176\u4ea4\u70b9\u4f4d\u7f6e\u4e3a\uff1a","title":"\u76f4\u7ebf-\u76f4\u7ebf\u7684\u4f4d\u7f6e"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_18","text":"// \u4e8c\u7ef4\u76f4\u7ebf struct Line { Point x , y ; // \u901a\u8fc7\u4e24\u70b9\u6784\u9020\u76f4\u7ebf Line ( Point x , Point y ) : x ( x ), y ( y ) {} // \u70b9\u548c\u65b9\u5411\u5411\u91cf\u6765\u6784\u9020\u7ebf static Line makeLine ( Point x , Vector v ) { return Line ( x , x + v ); } bool operator == ( const Line & rhs ) const { return x == rhs . x && y == rhs . y ; } bool operator != ( const Line & rhs ) const { return ! ( rhs == * this ); } // \u7ebf\u957f\u5ea6 double length () { return ( y - x ). length (); } // \u70b9\u5230\u8be5\u76f4\u7ebf\u7684\u8ddd\u79bb double dist ( Point p ) { return fabs (( x - p ) ^ ( y - p )) / length (); } // #define EPS 1e-6 // \u5224\u65ad\u70b9\u548c\u76f4\u7ebf\u7684\u4f4d\u7f6e int side ( Point p ) { double result = ( y - x ) ^ ( p - x ); if ( fabs ( result ) < EPS ) return 0 ; // \u5728\u7ebf\u4e0a else if ( result > 0 ) return 1 ; // \u5de6\u4fa7 else return -1 ; // \u53f3\u4fa7 } // \u8fc7\u70b9\u505a\u5782\u7ebf Line vertical ( Point p ) { return makeLine ( p , ( y - x ). rotate ( PI / 2 )); } // \u5782\u8db3 Point foot ( Point p ) { Vector self = y - x ; return x + self . unit () * self . project ( p - x ); } Point intersect ( Line l ) { double s1 = (( x - l . x ) ^ ( l . y - l . x )) / 2 ; double s2 = (( l . y - l . x ) ^ ( y - l . x )) / 2 ; if ( fabs ( s1 + s2 ) < EPS ) { if ( l . dist ( x )) return l . x ; // \u91cd\u5408 else return l . y ; // \u5e73\u884c } else return x + ( y - x ) * ( s1 / ( s1 + s2 )); // \u4ea4\u70b9 } };","title":"\u4ee3\u7801"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_19","text":"","title":"\u7ebf\u6bb5"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#-_3","text":"\u5bf9\u4e8e\u70b9 \u548c\u7ebf\u6bb5 \uff0c\u6784\u9020\u5411\u91cf \uff0c\u6c42\u53c9\u79ef\u6709\uff1a \u5bf9\u4e8e\u5171\u7ebf\u7684\u60c5\u51b5\uff0c\u518d\u6839\u636e\u4e24\u4e2a\u7aef\u70b9\u7684\u5750\u6807\u5224\u65ad\uff0c \u662f\u5426\u5728\u7ebf\u6bb5 \u4e0a\uff0c\u5373\u6ee1\u8db3\u4ee5\u4e0b\u60c5\u51b5\u7684\uff0c\u5373\u4e3a\u70b9 \u5728\u7ebf\u6bb5 \u4e0a\uff1a","title":"\u70b9-\u7ebf\u6bb5\u4f4d\u7f6e"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#-_4","text":"\u5bf9\u4e8e\u76f4\u7ebf \u548c\u7ebf\u6bb5 \uff0c\u4e8c\u8005\u4f4d\u7f6e\u5173\u7cfb\u7684\u5224\u65ad\uff1a \u6784\u9020\u5411\u91cf \uff0c\u5e76\u6c42\u53c9\u79ef \u82e5\u53c9\u79ef\u90fd\u4e0d\u4e3a \uff0c\u4e14\u7b26\u53f7\u76f8\u540c\uff0c\u5219\u53ef\u8ba4\u4e3a\u70b9 \u90fd\u5728\u5411\u91cf \u540c\u4e00\u4fa7\uff0c\u6216\u4e8c\u8005\u91cd\u5408\u3002 \u5982\u679c\u4e00\u4e2a\u7aef\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb\u4e3a \uff0c\u5219\u4e8c\u8005\u91cd\u5408\u3002 \u5426\u5219\uff0c\u4e8c\u8005\u4e0d\u76f8\u4ea4\u3002 \u5426\u5219\u4e8c\u8005\u76f8\u4ea4\u3002\u4ea4\u70b9\u4f4d\u7f6e\u6c42\u6cd5\u540c*\u76f4\u7ebf-\u76f4\u7ebf\u4ea4\u70b9*\u4f4d\u7f6e\u3002","title":"\u76f4\u7ebf-\u7ebf\u6bb5\u4f4d\u7f6e"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#-_5","text":"\u89c4\u8303\u76f8\u4ea4\uff1a\u4e24\u6761\u7ebf\u6bb5\u6070\u6709\u4e00\u4e2a\u4e0d\u662f\u7aef\u70b9\u7684\u516c\u5171\u70b9\u3002 \u5bf9\u4e8e\u76f4\u7ebf \u548c\u7ebf\u6bb5 \uff0c\u5229\u7528\u53c9\u79ef\u7684\u7b26\u53f7\u5224\u65ad\u662f\u5426\u4e3a\u89c4\u8303\u76f8\u4ea4\uff0c\u5373\u4efb\u4e00\u6761\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u5206\u5c5e\u53e6\u4e00\u6761\u7ebf\u6bb5\u7684\u4e24\u4fa7\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \u5982\u4e0d\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\uff0c\u518d\u5224\u65ad\u4e24\u6761\u7ebf\u6bb5\u7684\u7aef\u70b9\u662f\u5426\u5728\u53e6\u4e00\u6761\u7ebf\u6bb5\u4e0a\uff0c\u82e5\u662f\u5219\u4e3a\u975e\u89c4\u8303\u76f8\u4ea4\uff0c\u5426\u5219\u4e8c\u8005\u4e0d\u76f8\u4ea4\u3002","title":"\u7ebf\u6bb5-\u7ebf\u6bb5\u4f4d\u7f6e"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_20","text":"POJ 3304\uff1aSegments POJ 1039\uff1aPipe","title":"\u4f8b\u9898"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_21","text":"// \u4e8c\u7ef4\u7ebf\u6bb5 struct Seg { Point x , y ; Seg ( const Point & x , const Point & y ) : x ( x ), y ( y ) {} // \u5224\u65ad\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u5185 bool pointIn ( Point p ) { double cross = ( x - p ) ^ ( y - x ); if ( fabs ( cross ) < EPS ) return 0 ; if ( fabs ( p . x - min ( x . x , y . x )) < EPS && fabs ( p . y - min ( x . y , y . y )) < EPS && fabs ( max ( x . x , y . x ) - p . x ) < EPS && fabs ( max ( x . y , y . y ) - p . y ) < EPS ) return 1 ; return 0 ; } Point intersect ( Line l ) { int s1 = l . side ( x ); int s2 = l . side ( y ); if ( s1 * s2 > 0 ) { // if (l.dist(x) < EPS) // return l.y; // \u91cd\u5408 // else return Point ( EPS / 10 , EPS / 10 ); // \u4e0d\u76f8\u4ea4 } else if ( s1 == 0 && s2 == 0 ) { return l . x ; // \u91cd\u5408 } else if ( s1 == 0 ) // \u4e00\u4e2a\u7aef\u70b9\u5728\u76f4\u7ebf\u4e0a { return x ; } else if ( s2 == 0 ) // \u53e6\u4e00\u4e2a\u7aef\u70b9\u5728\u76f4\u7ebf\u4e0a { return y ; } else { return Line ( x , y ). intersect ( l ); // \u4ea4\u70b9 } } // \u5224\u65ad\u7ebf\u6bb5\u76f8\u4ea4 bool isIntersected ( Seg s ) { Point p1 = x ; Point p2 = y ; Point p3 = s . x ; Point p4 = s . y ; double s1 = ( p3 - p1 ) ^ ( p4 - p1 ); double s2 = ( p4 - p2 ) ^ ( p3 - p2 ); if ((( p2 - p1 ) ^ ( p3 - p1 ) * (( p2 - p1 ) ^ ( p4 - p1 ))) < - EPS && ((( p4 - p3 ) ^ ( p1 - p3 )) * (( p4 - p3 ) ^ ( p2 - p3 ))) < - EPS ) return 1 ; // \u89c4\u8303\u76f8\u4ea4 if ( s . pointIn ( p1 ) || s . pointIn ( p2 ) || pointIn ( p3 ) || pointIn ( p4 )) return 1 ; // \u975e\u89c4\u8303\u76f8\u4ea4 return 0 ; } bool operator == ( const Seg & rhs ) const { return x == rhs . x && y == rhs . y ; } bool operator != ( const Seg & rhs ) const { return ! ( rhs == * this ); } };","title":"\u4ee3\u7801"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_22","text":"","title":"\u591a\u8fb9\u5f62"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_23","text":"\u767e\u5ea6\u767e\u79d1 \uff1a\u51f8\u591a\u8fb9\u5f62\u662f\u4e00\u4e2a\u5185\u90e8\u4e3a \u51f8\u96c6 \u7684\u7b80\u5355\u591a\u8fb9\u5f62\u3002\u51f8\u591a\u8fb9\u5f62\uff08Convex Polygon\uff09\u6307\u5982\u679c\u628a\u4e00\u4e2a \u591a\u8fb9\u5f62 \u7684\u6240\u6709\u8fb9\u4e2d\uff0c\u4efb\u610f\u4e00\u6761\u8fb9\u5411\u4e24\u65b9\u65e0\u9650\u5ef6\u957f\u6210\u4e3a\u4e00\u76f4\u7ebf\u65f6\uff0c\u5176\u4ed6\u5404\u8fb9\u90fd\u5728\u6b64\u76f4\u7ebf\u7684\u540c\u65c1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u591a\u8fb9\u5f62\u5c31\u53eb\u505a\u51f8\u591a\u8fb9\u5f62\uff0c\u5176 \u5185\u89d2 \u5e94\u8be5\u5168\u4e0d\u662f\u4f18\u89d2\uff0c\u4efb\u610f\u4e24\u4e2a \u9876\u70b9 \u95f4\u7684 \u7ebf\u6bb5 \u4f4d\u4e8e\u591a\u8fb9\u5f62\u7684\u5185\u90e8\u6216\u8fb9\u4e0a\u3002 \u5c31\u662f\u6ca1\u6709\u51f9\u89d2\u7684\u591a\u8fb9\u5f62\uff0c\u7279\u70b9\u662f\u6240\u6709\u8fb9\u6240\u5728\u7684\u76f4\u7ebf\u90fd\u4e0d\u4f1a\u7a7f\u8fc7\u5176\u4ed6\u8fb9\u3002","title":"\u51f8\u591a\u8fb9\u5f62"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_24","text":"\u5bf9\u591a\u8fb9\u5f62\u8fdb\u884c\u4e09\u89d2\u5256\u5206\uff1a \u8bbe\u539f\u70b9\u4e3a \u6309\u9006\u65f6\u9488\u65b9\u5411\u4e3a\u4e2a\u6761\u8fb9\u6307\u5b9a\u65b9\u5411 \u5bf9\u4e8e\u6bcf\u6761\u8fb9 \uff0c\u7d2f\u52a0","title":"\u591a\u8fb9\u5f62\u9762\u79ef"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#-_6","text":"\u8bbe\u591a\u8fb9\u5f62 \u7684\u9876\u70b9\u5e8f\u5217\u4e3a \u3001\u5f85\u5224\u5b9a\u7684\u70b9 \u3002","title":"\u70b9-\u591a\u8fb9\u5f62\u4f4d\u7f6e"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_25","text":"","title":"\u5c04\u7ebf\u6cd5"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_26","text":"\u8fc7 \u505a\u6c34\u5e73\u5c04\u7ebf \uff1a \u82e5 \u4e0e \u7684\u8fb9\u754c\u4e0d\u76f8\u4ea4\uff0c\u5219 \u5728 \u7684\u5916\u90e8\u3002 \u82e5\u76f8\u4ea4\uff0c\u5219\u518d\u5206\u6790\u4ea4\u70b9\u6570\u7684\u5947\u5076\u6027\u3002 \u4ea4\u70b9\u6570 \u70b9\u76f8\u5bf9\u4e8e\u591a\u8fb9\u5f62\u7684\u4f4d\u7f6e \u5947\u6570 \u5185\u90e8 \u5076\u6570 \u5916\u90e8 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u591a\u8fb9\u5f62\u4e0d\u662f\u51f8\u591a\u8fb9\u5f62\u65f6\uff0c\u9700\u8981\u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff1a \u5c04\u7ebf\u6070\u597d\u7ecf\u8fc7 \u7684\u67d0\u4e2a\u9876\u70b9 \u5c04\u7ebf\u6070\u597d\u4e0e \u7684\u67d0\u6761\u8fb9\u91cd\u5408","title":"\u7b97\u6cd5\u601d\u8def"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_27","text":"\u8fd0\u7b97\u901f\u5ea6\u5feb \u7cbe\u5ea6\u9ad8 \u7279\u6b8a\u60c5\u51b5\u8f83\u591a","title":"\u7b97\u6cd5\u7279\u70b9"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_28","text":"","title":"\u8f6c\u89d2\u6cd5"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_29","text":"\u6cbf\u591a\u8fb9\u5f62\u8d70\u4e00\u5708\uff0c\u7d2f\u8ba1\u7ed5\u70b9\u65cb\u8f6c\u4e86\u591a\u5c11\u89d2\u5ea6\u3002\uff08\u9700\u8981\u4fdd\u8bc1\u8fb9\u7684\u65b9\u5411\u4e00\u81f4\uff09 \u89d2\u5ea6 \u70b9\u76f8\u5bf9\u4e8e\u591a\u8fb9\u5f62\u7684\u4f4d\u7f6e \u5916\u90e8 \u70b9\u5728\u591a\u8fb9\u5f62\u7684\u8fb9\u4e0a \u5185\u90e8 \u901a\u8fc7\u70b9\u79ef\u516c\u5f0f\u53ef\u4ee5\u6c42\u51fa: **\uff08\u4ec5\u9002\u7528\u4e8e\u51f8\u5305)**\u6216\u4f7f\u7528\u7d2f\u4e58\u53c9\u4e58\uff0c\u5224\u65ad\u70b9\u548c\u8fb9\u7684\u4f4d\u7f6e\u5173\u7cfb\uff1a \u5f53\u70b9\u4f4d\u4e8e\u6240\u6709\u8fb9\u5411\u91cf\u7684\u540c\u4e00\u4fa7\u65f6\uff08\u53c9\u4e58\u503c\u540c\u53f7\uff09\uff0c\u5176\u5728\u591a\u8fb9\u5f62\u5185\u90e8\u3002 \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5728\u540c\u4e00\u4fa7\uff0c\u5219\u4e3a\u5916\u90e8\uff08\u53c9\u4e58\u503c\u5f02\u53f7\uff09\u3002 \u5728\u591a\u8fb9\u5f62\u4e0a\u7684\u60c5\u51b5\u662f\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u51fa\u6765\u7684\uff08\u53c9\u4e58\u4e3a0\uff09\u3002","title":"\u7b97\u6cd5\u601d\u8def"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_30","text":"\u51e0\u4e4e\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5 \u7cbe\u5ea6\u4f4e\u3001\u901f\u5ea6\u8f83\u6162\uff08\u9700\u8981\u7528\u5230\u53cd\u4e09\u89d2\u51fd\u6570\u3001\u5f00\u65b9\u7b49\uff09","title":"\u7b97\u6cd5\u7279\u70b9"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_31","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e73\u9762\u70b9\u96c6\uff0c\u8981\u6c42\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684\u51f8\u591a\u8fb9\u5f62\uff0c\u6ee1\u8db3\u70b9\u96c6\u4e2d\u6240\u6709\u70b9\u90fd\u5728\u51f8\u591a\u8fb9\u5f62\u5185\u90e8\u6216\u8fb9\u4e0a\u3002","title":"\u6c42\u51f8\u5305\uff08\u51f8\u58f3\uff09"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_32","text":"\u5bf9\u4e8e\u5df2\u6709\u7684\u51f8\u5305\u4e2d\uff0c\u65e0\u6cd5\u901a\u8fc7\u5728\u5e73\u9762\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u70b9\u83b7\u53d6\u5230\u66f4\u5927\u7684\u51f8\u5305\uff0c\u5219\u8be5\u5df2\u6709\u7684\u51f8\u5305\u79f0\u4e3a*\u7a33\u5b9a\u51f8\u5305*\u3002 \u7279\u6027 \uff1a\u51f8\u5305\u7684\u6bcf\u6761\u8fb9\u4e0a\uff0c\u90fd\u6709\u5927\u4e8e\u7b49\u4e8e \u4e2a\u7684\u9876\u70b9\u3002 \u5177\u4f53\u53ef\u89c1\u4f8b\u9898\u3010 POJ 1228 Grandpa's Estate \u3011\u3002","title":"\u7a33\u5b9a\u51f8\u5305"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_33","text":"","title":"\u534a\u5e73\u9762\u4ea4"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_34","text":"\u4e00\u6761\u76f4\u7ebf\u5c06\u4e00\u4e2a\u5e73\u9762\u5206\u4e3a2\u4e2a\u534a\u5e73\u9762\uff0c\u76f4\u7ebf\u662f\u6709\u5411\u7684\uff0c\u8bbe\u76f4\u7ebf\u65b9\u5411\u5de6\u8fb9\u7684\u5e73\u9762\u4e3a\u6211\u4eec\u7814\u7a76\u7684\u534a\u5e73\u9762\uff08\u5305\u542b\u76f4\u7ebf\uff09\u3002","title":"\u534a\u5e73\u9762"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_35","text":"\u88ab\uff08\u591a\u4e2a\uff09\u534a\u5e73\u9762\u5305\u542b\u7684\u70b9\u7684\u96c6\u5408\u3002 **\u6027\u8d28\uff1a**\u534a\u5e73\u9762\u4ea4\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u51f8\u533a\u57df\u3002","title":"\u534a\u5e73\u9762\u4ea4"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_36","text":"\u5bf9\u4e8e\u6bcf\u4e00\u6761\u591a\u8fb9\u5f62\u7684\u6bcf\u4e00\u6761\u8fb9 \u3001\u8868\u793a\u534a\u5e73\u9762\u7684\u76f4\u7ebf \uff1a \u5bf9\u591a\u8fb9\u5f62\u6309\u7167\u9006\u65f6\u9488\u6392\u5e8f\u3002 \u5982\u679c\u8fb9 \u7684\u8d77\u70b9 \u4f4d\u4e8e\u534a\u5e73\u9762 \u4e2d\uff0c\u5219\u5c06\u70b9 \u52a0\u5165\u7ed3\u679c\u96c6\u3002 \u6c42\u8fb9 \u4e0e \u7684\u4ea4\u70b9\uff0c\u5e76\u5c06\u7ed3\u679c\u52a0\u5165\u7ed3\u679c\u96c6\u3002\uff08\u5373\u4f7f\u70b9 \u4e0d\u5728\u534a\u5e73\u9762\u4e2d\uff0c\u4e5f\u9700\u8981\u8fd9\u6b65\u64cd\u4f5c\uff09","title":"\u6c42\u4ea4"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_37","text":"\u6784\u9020\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u77e9\u5f62\u3002 \u4f9d\u6b21\u7528\u534a\u5e73\u9762\u548c\u8be5\u77e9\u5f62\u6c42\u4ea4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a","title":"\u589e\u91cf\u6cd5"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_38","text":"\u5c06 \u4e2a\u534a\u5e73\u9762\u5206\u6210 \u4e2a\u5927\u5c0f\u8fd1\u4f3c\u76f8\u7b49\u7684\u96c6\u5408\u3002 \u9012\u5f52\u5730\u6784\u9020\u51f8\u591a\u8fb9\u5f62\u533a\u57df \u4e0e \u3002 \u5408\u5e76 \u4e0e \u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a","title":"\u5206\u6cbb\u6cd5\uff08\u4e8c\u5206\uff09"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_39","text":"POJ 1569:Myacm Triangles POJ 1113-Wall POJ 1228-Grandpa's Estate","title":"\u4f8b\u9898"},{"location":"datastructure/geometry/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/#_40","text":"// \u4e8c\u7ef4\u591a\u8fb9\u5f62 struct Polygon { // \u70b9\u96c6 vector < Point > points ; Polygon ( const vector < Point > & points ) : points ( points ) {} Polygon () {} /** * \u6839\u636e\u5df2\u6392\u5e8f\u7684\u70b9\u96c6\u6765\u6c42\u534a\u4e2a\u51f8\u58f3\uff08\u4e0a\u534a\u4e2a\u6216\u4e0b\u534a\u4e2a\uff09 * @param pts \u5df2\u6392\u5e8f\u7684\u70b9\u96c6 * @return \u534a\u4e2a\u51f8\u5305\u4e2d\u7684\u70b9\uff0c\u6709\u5e8f\uff0c\u9006\u65f6\u9488\u5e8f */ deque < Point > getHalfConvexHull ( const vector < Point > & pts ) const { deque < Point > deq ; int si = pts . size (); int i = 2 ; deq . pb ( pts [ 0 ]); deq . pb ( pts [ 1 ]); while ( i < si ) { Point nt = pts [ i ]; ++ i ; while ( deq . size () >= 2 ) { Point p2 = deq [ deq . size () - 2 ], p1 = deq . back (); Vector b = p2 - p1 , a = p1 - nt ; double d = ( b ^ a ); if ( d <= 0 ) deq . pop_back (); else break ; } deq . pb ( nt ); } return deq ; } /** * \u6c34\u5e73\u5e8f\u626b\u63cf\u6cd5 * \u6c42\u8be5\u591a\u8fb9\u5f62\u7684\u51f8\u5305 * @return \u51f8\u5305\u7684\u70b9\u96c6\uff0c\u6709\u5e8f\uff0c\u9006\u65f6\u9488\u5e8f */ vector < Point > getConvexHull () { vector < Point > pts ( points ); vector < Point > con ; // 2\u4e2a\u70b9\u65e0\u6cd5\u6784\u6210\u51f8\u5305 if ( pts . size () <= 2 ) { return con ; } // \u4e0b\u51f8\u58f3 sort ( pts . begin (), pts . end ()); deque < Point > temp = getHalfConvexHull ( pts ); for ( int i = 0 ; i < temp . size (); ++ i ) { con . pb ( temp [ i ]); } temp . clear (); // \u4e0a\u51f8\u58f3 sort ( pts . begin (), pts . end (), greater < Point > ()); temp = getHalfConvexHull ( pts ); for ( int i = 1 ; i < temp . size () - 1 ; ++ i ) { con . pb ( temp [ i ]); } return con ; } };","title":"\u4ee3\u7801"},{"location":"datastructure/graph/","text":"Graph data structure \u00b6 Adjacency list \u00b6 Vertices are stored as records or objects, and every vertex stores a list of adjacent vertices. This data structure allows the storage of additional data on the vertices. Additional data can be stored if edges are also stored as objects, in which case each vertex stores its incident edges and each edge stores its incident vertices. Adjacency matrix \u00b6 A two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. Data on edges and vertices must be stored externally. Only the cost for one edge can be stored between each pair of vertices. wiki page","title":"Graph data structure"},{"location":"datastructure/graph/#graph-data-structure","text":"","title":"Graph data structure"},{"location":"datastructure/graph/#adjacency-list","text":"Vertices are stored as records or objects, and every vertex stores a list of adjacent vertices. This data structure allows the storage of additional data on the vertices. Additional data can be stored if edges are also stored as objects, in which case each vertex stores its incident edges and each edge stores its incident vertices.","title":"Adjacency list"},{"location":"datastructure/graph/#adjacency-matrix","text":"A two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. Data on edges and vertices must be stored externally. Only the cost for one edge can be stored between each pair of vertices. wiki page","title":"Adjacency matrix"},{"location":"datastructure/heap/%E5%A0%86/","text":"\u5806\u5c31\u662f\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u4f7f\u7528\u7236\u6307\u9488\u6216\u8005\u5b50\u6307\u9488\u3002\u5806\u6839\u636e\u201c\u5806\u5c5e\u6027\u201d\u6765\u6392\u5e8f\uff0c\u201c\u5806\u5c5e\u6027\u201d\u51b3\u5b9a\u4e86\u6811\u4e2d\u8282\u70b9\u7684\u4f4d\u7f6e\u3002 \u5806\u7684\u5e38\u7528\u65b9\u6cd5\uff1a \u6784\u5efa\u4f18\u5148\u961f\u5217 \u652f\u6301\u5806\u6392\u5e8f \u5feb\u901f\u627e\u51fa\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c\uff08\u6216\u8005\u6700\u5927\u503c\uff09 \u5728\u670b\u53cb\u9762\u524d\u88c5\u903c \u5806\u5c5e\u6027 \u00b6 \u5806\u5206\u4e3a\u4e24\u79cd\uff1a \u6700\u5927\u5806*\u548c*\u6700\u5c0f\u5806 \uff0c\u4e24\u8005\u7684\u5dee\u522b\u5728\u4e8e\u8282\u70b9\u7684\u6392\u5e8f\u65b9\u5f0f\u3002 \u5728\u6700\u5927\u5806\u4e2d\uff0c\u7236\u8282\u70b9\u7684\u503c\u6bd4\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u503c\u90fd\u8981\u5927\u3002\u5728\u6700\u5c0f\u5806\u4e2d\uff0c\u7236\u8282\u70b9\u7684\u503c\u6bd4\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u503c\u90fd\u8981\u5c0f\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u5806\u5c5e\u6027\u201d\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5c5e\u6027\u5bf9\u5806\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u6210\u7acb\u3002 \u4f8b\u5b50\uff1a \u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u5806\uff0c\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u7684\u503c\u90fd\u6bd4\u5176\u5b50\u8282\u70b9\u8981\u5927\u3002 10 \u6bd4 7 \u548c 2 \u90fd\u5927\u3002 7 \u6bd4 5 \u548c 1 \u90fd\u5927\u3002 \u6839\u636e\u8fd9\u4e00\u5c5e\u6027\uff0c\u90a3\u4e48\u6700\u5927\u5806\u603b\u662f\u5c06\u5176\u4e2d\u7684\u6700\u5927\u503c\u5b58\u653e\u5728\u6811\u7684\u6839\u8282\u70b9\u3002\u800c\u5bf9\u4e8e\u6700\u5c0f\u5806\uff0c\u6839\u8282\u70b9\u4e2d\u7684\u5143\u7d20\u603b\u662f\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u3002\u5806\u5c5e\u6027\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u5806\u5e38\u5e38\u88ab\u5f53\u505a\u4f18\u5148\u961f\u5217\u4f7f\u7528\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5feb\u901f\u5730\u8bbf\u95ee\u5230\u201c\u6700\u91cd\u8981\u201d\u7684\u5143\u7d20\u3002 **\u6ce8\u610f\uff1a**\u5806\u7684\u6839\u8282\u70b9\u4e2d\u5b58\u653e\u7684\u662f\u6700\u5927\u6216\u8005\u6700\u5c0f\u5143\u7d20\uff0c\u4f46\u662f\u5176\u4ed6\u8282\u70b9\u7684\u6392\u5e8f\u987a\u5e8f\u662f\u672a\u77e5\u7684\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u6700\u5927\u5806\u4e2d\uff0c\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u5143\u7d20\u603b\u662f\u4f4d\u4e8e index 0 \u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u6700\u5c0f\u7684\u5143\u7d20\u5219\u672a\u5fc5\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002--\u552f\u4e00\u80fd\u591f\u4fdd\u8bc1\u7684\u662f\u6700\u5c0f\u7684\u5143\u7d20\u662f\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u4f46\u662f\u4e0d\u786e\u5b9a\u662f\u54ea\u4e00\u4e2a\u3002 \u5806\u548c\u666e\u901a\u6811\u7684\u533a\u522b \u00b6 \u5806\u5e76\u4e0d\u80fd\u53d6\u4ee3\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5b83\u4eec\u4e4b\u95f4\u6709\u76f8\u4f3c\u4e4b\u5904\u4e5f\u6709\u4e00\u4e9b\u4e0d\u540c\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4e24\u8005\u7684\u4e3b\u8981\u5dee\u522b\uff1a **\u8282\u70b9\u7684\u987a\u5e8f\u3002**\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u5de6\u5b50\u8282\u70b9\u5fc5\u987b\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u53f3\u5b50\u8282\u70b9\u5fc5\u987b\u5fc5\u6bd4\u7236\u8282\u70b9\u5927\u3002\u4f46\u662f\u5728\u5806\u4e2d\u5e76\u975e\u5982\u6b64\u3002\u5728\u6700\u5927\u5806\u4e2d\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u5fc5\u987b\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u800c\u5728\u6700\u5c0f\u5806\u4e2d\uff0c\u5b83\u4eec\u90fd\u5fc5\u987b\u6bd4\u7236\u8282\u70b9\u5927\u3002 **\u5185\u5b58\u5360\u7528\u3002**\u666e\u901a\u6811\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u6bd4\u5b83\u4eec\u5b58\u50a8\u7684\u6570\u636e\u8981\u591a\u3002\u4f60\u5fc5\u987b\u4e3a\u8282\u70b9\u5bf9\u8c61\u4ee5\u53ca\u5de6/\u53f3\u5b50\u8282\u70b9\u6307\u9488\u5206\u914d\u5185\u5b58\u3002\u5806\u4ec5\u4ec5\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u6765\u5b58\u50a8\u6570\u7ec4\uff0c\u4e14\u4e0d\u4f7f\u7528\u6307\u9488\u3002 \u5e73\u8861\u3002**\u4e8c\u53c9\u641c\u7d22\u6811\u5fc5\u987b\u662f\u201c\u5e73\u8861\u201d\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u5927\u90e8\u5206\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u624d\u80fd\u8fbe\u5230**O(log n) \u3002\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u4f4d\u7f6e\u63d2\u5165/\u5220\u9664\u6570\u636e\uff0c\u6216\u8005\u4f7f\u7528 AVL \u6811\u6216\u8005\u7ea2\u9ed1\u6811\uff0c\u4f46\u662f\u5728\u5806\u4e2d\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u6574\u68f5\u6811\u90fd\u662f\u6709\u5e8f\u7684\u3002\u6211\u4eec\u53ea\u9700\u8981\u6ee1\u8db3\u5806\u5c5e\u6027\u5373\u53ef\uff0c\u6240\u4ee5\u5728\u5806\u4e2d\u5e73\u8861\u4e0d\u662f\u95ee\u9898\u3002\u56e0\u4e3a\u5806\u4e2d\u6570\u636e\u7684\u7ec4\u7ec7\u65b9\u5f0f\u53ef\u4ee5\u4fdd\u8bc1**O(log n)** \u7684\u6027\u80fd\u3002 **\u641c\u7d22\u3002**\u5728\u4e8c\u53c9\u6811\u4e2d\u641c\u7d22\u4f1a\u5f88\u5feb\uff0c\u4f46\u662f\u5728\u5806\u4e2d\u641c\u7d22\u4f1a\u5f88\u6162\u3002\u5728\u5806\u4e2d\u641c\u7d22\u4e0d\u662f\u7b2c\u4e00\u4f18\u5148\u7ea7\uff0c\u56e0\u4e3a\u4f7f\u7528\u5806\u7684\u76ee\u7684\u662f\u5c06\u6700\u5927\uff08\u6216\u8005\u6700\u5c0f\uff09\u7684\u8282\u70b9\u653e\u5728\u6700\u524d\u9762\uff0c\u4ece\u800c\u5feb\u901f\u7684\u8fdb\u884c\u76f8\u5173\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u3002 \u6765\u81ea\u6570\u7ec4\u7684\u6811 \u00b6 \u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u6811\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u4e5f\u8bb8\u770b\u8d77\u6765\u6709\u70b9\u53e4\u602a\uff0c\u4f46\u662f\u5b83\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u4e0a\u90fd\u662f\u5f88\u9ad8\u6548\u7684\u3002 \u6211\u4eec\u51c6\u5907\u5c06\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u6811\u8fd9\u6837\u5b58\u50a8\uff1a [ 10 , 7 , 2 , 5 , 1 ] \u5c31\u8fd9\u4e48\u591a\uff01\u6211\u4eec\u9664\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u7ec4\u4ee5\u5916\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u95f4\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u5141\u8bb8\u4f7f\u7528\u6307\u9488\uff0c\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u77e5\u9053\u54ea\u4e00\u4e2a\u8282\u70b9\u662f\u7236\u8282\u70b9\uff0c\u54ea\u4e00\u4e2a\u8282\u70b9\u662f\u5b83\u7684\u5b50\u8282\u70b9\u5462\uff1f\u95ee\u5f97\u597d\uff01\u8282\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6eindex \u548c\u5b83\u7684\u7236\u8282\u70b9\u4ee5\u53ca\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e4b\u95f4\u6709\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb\u3002 \u5982\u679c i \u662f\u8282\u70b9\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u4e0b\u9762\u7684\u516c\u5f0f\u5c31\u7ed9\u51fa\u4e86\u5b83\u7684\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff1a parent ( i ) = floor (( i - 1 ) / 2 ) left ( i ) = 2i + 1 right ( i ) = 2i + 2 \u6ce8\u610f right(i) \u5c31\u662f\u7b80\u5355\u7684 left(i) + 1 \u3002\u5de6\u53f3\u8282\u70b9\u603b\u662f\u5904\u4e8e\u76f8\u90bb\u7684\u4f4d\u7f6e\u3002 \u6211\u4eec\u5c06\u5199\u516c\u5f0f\u653e\u5230\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\u9a8c\u8bc1\u4e00\u4e0b\u3002 Node Array index ( i ) Parent index Left child Right child 10 0 -1 1 2 7 1 0 3 4 2 2 0 5 6 5 3 1 7 8 1 4 1 9 10 **\u6ce8\u610f\uff1a**\u6839\u8282\u70b9 (10) \u6ca1\u6709\u7236\u8282\u70b9\uff0c\u56e0\u4e3a -1 \u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6570\u7ec4\u7d22\u5f15\u3002\u540c\u6837\uff0c\u8282\u70b9 (2) \uff0c (5) \u548c (1) \u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7d22\u5f15\u5df2\u7ecf\u8d85\u8fc7\u4e86\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4f7f\u7528\u8fd9\u4e9b\u7d22\u5f15\u503c\u7684\u65f6\u5019\u9700\u8981\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u7d22\u5f15\u503c\u3002 \u590d\u4e60\u4e00\u4e0b\uff0c\u5728\u6700\u5927\u5806\u4e2d\uff0c\u7236\u8282\u70b9\u7684\u503c\u603b\u662f\u8981\u5927\u4e8e\uff08\u6216\u8005\u7b49\u4e8e\uff09\u5176\u5b50\u8282\u70b9\u7684\u503c\u3002\u8fd9\u610f\u5473\u4e0b\u9762\u7684\u516c\u5f0f\u5bf9\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u7d22\u5f15 i \u90fd\u6210\u7acb\uff1a array[parent(i)] >= array[i] \u53ef\u4ee5\u7528\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u9a8c\u8bc1\u4e00\u4e0b\u8fd9\u4e2a\u5806\u5c5e\u6027\u3002 \u5982\u4f60\u6240\u89c1\uff0c\u8fd9\u4e9b\u516c\u5f0f\u5141\u8bb8\u6211\u4eec\u4e0d\u4f7f\u7528\u6307\u9488\u5c31\u53ef\u4ee5\u627e\u5230\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u6216\u8005\u5b50\u8282\u70b9\u3002\u4e8b\u60c5\u6bd4\u7b80\u5355\u7684\u53bb\u6389\u6307\u9488\u8981\u590d\u6742\uff0c\u4f46\u8fd9\u5c31\u662f\u4ea4\u6613\uff1a\u6211\u4eec\u8282\u7ea6\u4e86\u7a7a\u95f4\uff0c\u4f46\u662f\u8981\u8fdb\u884c\u66f4\u591a\u8ba1\u7b97\u3002\u5e78\u597d\u8fd9\u4e9b\u8ba1\u7b97\u5f88\u5feb\u5e76\u4e14\u53ea\u9700\u8981**O(1)**\u7684\u65f6\u95f4\u3002 \u7406\u89e3\u6570\u7ec4\u7d22\u5f15\u548c\u8282\u70b9\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5173\u7cfb\u975e\u5e38\u91cd\u8981\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u66f4\u5927\u7684\u5806\uff0c\u5b83\u670915\u4e2a\u8282\u70b9\u88ab\u5206\u6210\u4e864\u5c42\uff1a Array.png \u56fe\u7247\u4e2d\u7684\u6570\u5b57\u4e0d\u662f\u8282\u70b9\u7684\u503c\uff0c\u800c\u662f\u5b58\u50a8\u8fd9\u4e2a\u8282\u70b9\u7684\u6570\u7ec4\u7d22\u5f15\uff01\u8fd9\u91cc\u662f\u6570\u7ec4\u7d22\u5f15\u548c\u6811\u7684\u5c42\u7ea7\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff0c\u6570\u7ec4\u4e2d\u7236\u8282\u70b9\u603b\u662f\u5728\u5b50\u8282\u70b9\u7684\u524d\u9762\u3002 \u6ce8\u610f\u8fd9\u4e2a\u65b9\u6848\u4e0e\u4e00\u4e9b\u9650\u5236\u3002\u4f60\u53ef\u4ee5\u5728\u666e\u901a\u4e8c\u53c9\u6811\u4e2d\u6309\u7167\u4e0b\u9762\u7684\u65b9\u5f0f\u7ec4\u7ec7\u6570\u636e\uff0c\u4f46\u662f\u5728\u5806\u4e2d\u4e0d\u53ef\u4ee5\uff1a \u5728\u5806\u4e2d\uff0c\u5728\u5f53\u524d\u5c42\u7ea7\u6240\u6709\u7684\u8282\u70b9\u90fd\u5df2\u7ecf\u586b\u6ee1\u4e4b\u524d\u4e0d\u5141\u8bb8\u5f00\u662f\u4e0b\u4e00\u5c42\u7684\u586b\u5145\uff0c\u6240\u4ee5\u5806\u603b\u662f\u6709\u8fd9\u6837\u7684\u5f62\u72b6\uff1a **\u6ce8\u610f\uff1a**\u4f60\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u6811\u6765\u6a21\u62df\u5806\uff0c\u4f46\u662f\u90a3\u5bf9\u7a7a\u95f4\u662f\u6781\u5927\u7684\u6d6a\u8d39\u3002 \u5c0f\u6d4b\u9a8c\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u6570\u7ec4\uff1a [ 10 , 14 , 25 , 33 , 81 , 82 , 99 ] \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5806\u5417\uff1f\u7b54\u6848\u662f yes \uff01\u4e00\u4e2a\u4ece\u4f4e\u5230\u9ad8\u6709\u5e8f\u6392\u5217\u7684\u6570\u7ec4\u662f\u4ee5\u6709\u6548\u7684\u6700\u5c0f\u5806\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5806\u753b\u51fa\u6765\uff1a \u5806\u5c5e\u6027\u9002\u7528\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u4e3a\u7236\u8282\u70b9\u603b\u662f\u6bd4\u5b83\u7684\u5b57\u8282\u70b9\u5c0f\u3002\uff08\u4f60\u4e5f\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\uff1a\u4e00\u4e2a\u4ece\u9ad8\u5230\u4f4e\u6709\u5e8f\u6392\u5217\u7684\u6570\u7ec4\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6700\u5927\u5806\uff09 **\u6ce8\u610f\uff1a**\u5e76\u4e0d\u662f\u6bcf\u4e00\u4e2a\u6700\u5c0f\u5806\u90fd\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff01\u8981\u5c06\u5806\u8f6c\u6362\u6210\u6709\u5e8f\u6570\u7ec4\uff0c\u9700\u8981\u4f7f\u7528\u5806\u6392\u5e8f\u3002 \u66f4\u591a\u6570\u5b66\u516c\u5f0f \u00b6 \u5982\u679c\u4f60\u597d\u5947\uff0c\u8fd9\u91cc\u6709\u66f4\u591a\u7684\u516c\u5f0f\u63cf\u8ff0\u4e86\u5806\u7684\u4e00\u4e9b\u786e\u5b9a\u5c5e\u6027\u3002\u4f60\u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u4e9b\uff0c\u4f46\u5b83\u4eec\u6709\u65f6\u4f1a\u6d3e\u4e0a\u7528\u573a\u3002 \u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u6b64\u90e8\u5206\uff01 \u6811\u7684*\u9ad8\u5ea6*\u662f\u6307\u4ece\u6811\u7684\u6839\u8282\u70b9\u5230\u6700\u4f4e\u7684\u53f6\u8282\u70b9\u6240\u9700\u8981\u7684\u6b65\u6570\uff0c\u6216\u8005\u66f4\u6b63\u5f0f\u7684\u5b9a\u4e49\uff1a\u9ad8\u5ea6\u662f\u6307\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u6700\u5927\u503c\u3002\u4e00\u4e2a\u9ad8\u5ea6\u4e3a h \u7684\u5806\u6709 h+1 \u5c42\u3002 \u4e0b\u9762\u8fd9\u4e2a\u5bf9\u7684\u9ad8\u5ea6\u662f3\uff0c\u6240\u4ee5\u5b83\u67094\u5c42\uff1a \u5982\u679c\u4e00\u4e2a\u5806\u6709 n \u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u7684\u9ad8\u5ea6\u662f h = floor(log2(n)) \u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u603b\u662f\u8981\u5c06\u8fd9\u4e00\u5c42\u5b8c\u5168\u586b\u6ee1\u4ee5\u540e\u624d\u4f1a\u586b\u5145\u65b0\u7684\u4e00\u5c42\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u6709 15 \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5b83\u7684\u9ad8\u5ea6\u662f floor(log2(15)) = floor(3.91) = 3 \u3002 \u5982\u679c\u6700\u4e0b\u9762\u7684\u4e00\u5c42\u5df2\u7ecf\u586b\u6ee1\uff0c\u90a3\u4e48\u90a3\u4e00\u5c42\u5305\u542b 2^h \u4e2a\u8282\u70b9\u3002\u6811\u4e2d\u8fd9\u4e00\u5c42\u4ee5\u4e0a\u6240\u6709\u7684\u8282\u70b9\u6570\u76ee\u4e3a 2^h - 1 \u3002\u540c\u6837\u662f\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6700\u4e0b\u9762\u7684\u4e00\u5c42\u67098\u4e2a\u8282\u70b9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f 2^3 = 8 \u3002\u524d\u9762\u7684\u4e09\u5c42\u4e00\u5171\u5305\u542b7\u7684\u8282\u70b9\uff0c\u5373\uff1a 2^3 - 1 = 8 - 1 = 7 \u3002 \u6240\u4ee5\u6574\u4e2a\u5806\u4e2d\u7684\u8282\u70b9\u6570\u76ee\u4e3a\uff1a* 2^(h+1) - 1*\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c 2^4 - 1 = 16 - 1 = 15 \u53f6\u8282\u70b9\u603b\u662f\u4f4d\u4e8e\u6570\u7ec4\u7684 floor(n/2) \u548c n-1 \u4e4b\u95f4\u3002 \u53ef\u4ee5\u7528\u5806\u505a\u4ec0\u4e48\uff1f \u00b6 \u6709\u4e24\u4e2a\u539f\u59cb\u64cd\u4f5c\u7528\u4e8e\u4fdd\u8bc1\u63d2\u5165\u6216\u5220\u9664\u8282\u70b9\u4ee5\u540e\u5806\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6700\u5927\u5806\u6216\u8005\u6700\u5c0f\u5806\uff1a shiftUp() : \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6bd4\u5b83\u7684\u7236\u8282\u70b9\u5927\uff08\u6700\u5927\u5806\uff09\u6216\u8005\u5c0f\uff08\u6700\u5c0f\u5806\uff09\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u5b83\u540c\u7236\u8282\u70b9\u4ea4\u6362\u4f4d\u7f6e\u3002\u8fd9\u6837\u662f\u8fd9\u4e2a\u8282\u70b9\u5728\u6570\u7ec4\u7684\u4f4d\u7f6e\u4e0a\u5347\u3002 shiftDown() : \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6bd4\u5b83\u7684\u5b50\u8282\u70b9\u5c0f\uff08\u6700\u5927\u5806\uff09\u6216\u8005\u5927\uff08\u6700\u5c0f\u5806\uff09\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u5b83\u5411\u4e0b\u79fb\u52a8\u3002\u8fd9\u4e2a\u64cd\u4f5c\u4e5f\u79f0\u4f5c\u201c\u5806\u5316\uff08heapify\uff09\u201d\u3002 shiftUp \u6216\u8005 shiftDown \u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(log n) \u3002 \u57fa\u4e8e\u8fd9\u4e24\u4e2a\u539f\u59cb\u64cd\u4f5c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u64cd\u4f5c\uff1a insert(value) : \u5728\u5806\u7684\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u7136\u540e\u4f7f\u7528 shiftUp \u6765\u4fee\u590d\u5bf9\u3002 remove() : \u79fb\u9664\u5e76\u8fd4\u56de\u6700\u5927\u503c\uff08\u6700\u5927\u5806\uff09\u6216\u8005\u6700\u5c0f\u503c\uff08\u6700\u5c0f\u5806\uff09\u3002\u4e3a\u4e86\u5c06\u8fd9\u4e2a\u8282\u70b9\u5220\u9664\u540e\u7684\u7a7a\u4f4d\u586b\u8865\u4e0a\uff0c\u9700\u8981\u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u79fb\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u4f7f\u7528 shiftDown \u65b9\u6cd5\u6765\u4fee\u590d\u5806\u3002 removeAtIndex(index) : \u548c remove() \u4e00\u6837\uff0c\u5dee\u522b\u5728\u4e8e\u53ef\u4ee5\u79fb\u9664\u5806\u4e2d\u4efb\u610f\u8282\u70b9\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6839\u8282\u70b9\u3002\u5f53\u5b83\u4e0e\u5b50\u8282\u70b9\u6bd4\u8f83\u4f4d\u7f6e\u4e0d\u65f6\u65e0\u5e8f\u65f6\u4f7f\u7528 shiftDown() \uff0c\u5982\u679c\u4e0e\u7236\u8282\u70b9\u6bd4\u8f83\u53d1\u73b0\u65e0\u5e8f\u5219\u4f7f\u7528 shiftUp() \u3002 replace(index, value) \uff1a\u5c06\u4e00\u4e2a\u66f4\u5c0f\u7684\u503c\uff08\u6700\u5c0f\u5806\uff09\u6216\u8005\u66f4\u5927\u7684\u503c\uff08\u6700\u5927\u5806\uff09\u8d4b\u503c\u7ed9\u4e00\u4e2a\u8282\u70b9\u3002\u7531\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\u7834\u574f\u4e86\u5806\u5c5e\u6027\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 shiftUp() \u6765\u4fee\u590d\u5806\u5c5e\u6027\u3002 \u4e0a\u9762\u6240\u6709\u7684\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(log n) \uff0c\u56e0\u4e3a shiftUp \u548c shiftDown \u90fd\u5f88\u8d39\u65f6\u3002\u8fd8\u6709\u5c11\u6570\u4e00\u4e9b\u64cd\u4f5c\u9700\u8981\u66f4\u591a\u7684\u65f6\u95f4\uff1a search(value) :\u5806\u4e0d\u662f\u4e3a\u5feb\u901f\u641c\u7d22\u800c\u5efa\u7acb\u7684\uff0c\u4f46\u662f replace() \u548c removeAtIndex() \u64cd\u4f5c\u9700\u8981\u627e\u5230\u8282\u70b9\u5728\u6570\u7ec4\u4e2d\u7684index\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5148\u627e\u5230\u8fd9\u4e2aindex\u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n) \u3002 buildHeap(array) :\u901a\u8fc7\u53cd\u590d\u8c03\u7528 insert() \u65b9\u6cd5\u5c06\u4e00\u4e2a\uff08\u65e0\u5e8f\uff09\u6570\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u5806\u3002\u5982\u679c\u4f60\u8db3\u591f\u806a\u660e\uff0c\u4f60\u53ef\u4ee5\u5728 O(n) \u65f6\u95f4\u5185\u5b8c\u6210\u3002 \u5806\u6392\u5e8f\uff1a\u7531\u4e8e\u5806\u5c31\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u72ec\u7279\u7684\u5c5e\u6027\u5c06\u6570\u7ec4\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n lg n) \u3002 \u5806\u8fd8\u6709\u4e00\u4e2a peek() \u65b9\u6cd5\uff0c\u4e0d\u7528\u5220\u9664\u8282\u70b9\u5c31\u8fd4\u56de\u6700\u5927\u503c\uff08\u6700\u5927\u5806\uff09\u6216\u8005\u6700\u5c0f\u503c\uff08\u6700\u5c0f\u5806\uff09\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(1) \u3002 \u6ce8\u610f\uff1a**\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5806\u7684\u5e38\u7528\u64cd\u4f5c\u8fd8\u662f\u4f7f\u7528 insert() \u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u548c\u901a\u8fc7 remove() \u79fb\u9664\u6700\u5927\u6216\u8005\u6700\u5c0f\u503c\u3002\u4e24\u8005\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f**O(log n) \u3002\u5176\u5176\u4ed6\u7684\u64cd\u4f5c\u662f\u7528\u4e8e\u652f\u6301\u66f4\u9ad8\u7ea7\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u8bf4\u5efa\u7acb\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u3002 \u63d2\u5165 \u00b6 \u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u63d2\u5165\u4f8b\u5b50\u6765\u770b\u770b\u63d2\u5165\u64cd\u4f5c\u7684\u7ec6\u8282\u3002\u6211\u4eec\u5c06\u6570\u5b57 16 \u63d2\u5165\u5230\u8fd9\u4e2a\u5806\u4e2d\uff1a \u5806\u7684\u6570\u7ec4\u662f\uff1a [ 10, 7, 2, 5, 1 ] \u3002 \u7b2c\u4e00\u80a1\u662f\u5c06\u65b0\u7684\u5143\u7d20\u63d2\u5165\u5230\u6570\u7ec4\u7684\u5c3e\u90e8\u3002\u6570\u7ec4\u53d8\u6210\uff1a [ 10 , 7 , 2 , 5 , 1 , 16 ] \u76f8\u5e94\u7684\u6811\u53d8\u6210\u4e86\uff1a 16 \u88ab\u6dfb\u52a0\u6700\u540e\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u4f4d\u3002 \u4e0d\u884c\u7684\u662f\uff0c\u73b0\u5728\u5806\u5c5e\u6027\u4e0d\u6ee1\u8db3\uff0c\u56e0\u4e3a 2 \u5728 16 \u7684\u4e0a\u9762\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5927\u7684\u6570\u5b57\u5728\u4e0a\u9762\uff08\u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u5806\uff09 \u4e3a\u4e86\u6062\u590d\u5806\u5c5e\u6027\uff0c\u6211\u4eec\u9700\u8981\u4ea4\u6362 16 \u548c 2 \u3002 \u73b0\u5728\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u56e0\u4e3a 10 \u4e5f\u6bd4 16 \u5c0f\u3002\u6211\u4eec\u7ee7\u7eed\u4ea4\u6362\u6211\u4eec\u7684\u63d2\u5165\u5143\u7d20\u548c\u5b83\u7684\u7236\u8282\u70b9\uff0c\u76f4\u5230\u5b83\u7684\u7236\u8282\u70b9\u6bd4\u5b83\u5927\u6216\u8005\u6211\u4eec\u5230\u8fbe\u6811\u7684\u9876\u90e8\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684 shift-up \uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u540e\u90fd\u9700\u8981\u8fdb\u884c\u3002\u5b83\u5c06\u4e00\u4e2a\u592a\u5927\u6216\u8005\u592a\u5c0f\u7684\u6570\u5b57\u201c\u6d6e\u8d77\u201d\u5230\u6811\u7684\u9876\u90e8\u3002 \u6700\u540e\u6211\u4eec\u5f97\u5230\u7684\u5806\uff1a \u73b0\u5728\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u90fd\u6bd4\u5b83\u7684\u5b50\u8282\u70b9\u5927\u3002 \u5220\u9664\u6839\u8282\u70b9 \u00b6 \u6211\u4eec\u5c06\u8fd9\u4e2a\u6811\u4e2d\u7684 (10) \u5220\u9664\uff1a \u73b0\u5728\u9876\u90e8\u6709\u4e00\u4e2a\u7a7a\u7684\u8282\u70b9\uff0c\u600e\u4e48\u5904\u7406\uff1f \u5f53\u63d2\u5165\u8282\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c06\u65b0\u7684\u503c\u8fd4\u7ed9\u6570\u7ec4\u7684\u5c3e\u90e8\u3002\u73b0\u5728\u6211\u4eec\u6765\u505a\u76f8\u53cd\u7684\u4e8b\u60c5\uff1a\u6211\u4eec\u53d6\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5c06\u5b83\u653e\u5230\u6811\u7684\u9876\u90e8\uff0c\u7136\u540e\u518d\u4fee\u590d\u5806\u5c5e\u6027\u3002 \u73b0\u5728\u6765\u770b\u600e\u4e48 shift-down (1) \u3002\u4e3a\u4e86\u4fdd\u6301\u6700\u5927\u5806\u7684\u5806\u5c5e\u6027\uff0c\u6211\u4eec\u9700\u8981\u6811\u7684\u9876\u90e8\u662f\u6700\u5927\u7684\u6570\u636e\u3002\u73b0\u5728\u6709\u4e24\u4e2a\u6570\u5b57\u53ef\u7528\u4e8e\u4ea4\u6362 7 \u548c 2 \u3002\u6211\u4eec\u9009\u62e9\u8fd9\u4e24\u8005\u4e2d\u7684\u8f83\u5927\u8005\u79f0\u4e3a\u6700\u5927\u503c\u653e\u5728\u6811\u7684\u9876\u90e8\uff0c\u6240\u4ee5\u4ea4\u6362 7 \u548c 1 \uff0c\u73b0\u5728\u6811\u53d8\u6210\u4e86\uff1a \u7ee7\u7eed\u5806\u5316\u76f4\u5230\u8be5\u8282\u70b9\u6ca1\u6709\u4efb\u4f55\u5b50\u8282\u70b9\u6216\u8005\u5b83\u6bd4\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u8981\u5927\u4e3a\u6b62\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u5806\uff0c\u6211\u4eec\u53ea\u9700\u8981\u518d\u6709\u4e00\u6b21\u4ea4\u6362\u5c31\u6062\u590d\u4e86\u5806\u5c5e\u6027\uff1a \u5220\u9664\u4efb\u610f\u8282\u70b9 \u00b6 \u7edd\u5927\u591a\u6570\u65f6\u5019\u4f60\u9700\u8981\u5220\u9664\u7684\u662f\u5806\u7684\u6839\u8282\u70b9\uff0c\u56e0\u4e3a\u8fd9\u5c31\u662f\u5806\u7684\u8bbe\u8ba1\u7528\u9014\u3002 \u4f46\u662f\uff0c\u5220\u9664\u4efb\u610f\u8282\u70b9\u4e5f\u5f88\u6709\u7528\u3002\u8fd9\u662f remove() \u7684\u901a\u7528\u7248\u672c\uff0c\u5b83\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230 shiftDown \u548c shiftUp \u3002 \u6211\u4eec\u8fd8\u662f\u7528\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u5220\u9664 (7) : [\u56fe\u7247\u4e0a\u4f20\u5931\u8d25...(image-d46ac4-1534077058042)] \u5bf9\u5e94\u7684\u6570\u7ec4\u662f [ 10 , 7 , 2 , 5 , 1 ] \u4f60\u77e5\u9053\uff0c\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\u4f1a\u7834\u574f\u6700\u5927\u5806\u6216\u8005\u6700\u5c0f\u5806\u5c5e\u6027\u3002\u6211\u4eec\u9700\u8981\u5c06\u5220\u9664\u7684\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff1a [ 10 , 1 , 2 , 5 , 7 ] \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u6211\u4eec\u9700\u8981\u8fd4\u56de\u7684\u5143\u7d20\uff1b\u7136\u540e\u8c03\u7528 removeLast() \u6765\u5c06\u5b83\u5220\u9664\u3002 (1) \u6bd4\u5b83\u7684\u5b50\u8282\u70b9\u5c0f\uff0c\u6240\u4ee5\u9700\u8981 shiftDown() \u6765\u4fee\u590d\u3002 \u7136\u800c\uff0cshift down \u4e0d\u662f\u6211\u4eec\u8981\u5904\u7406\u7684\u552f\u4e00\u60c5\u51b5\u3002\u4e5f\u6709\u53ef\u80fd\u6211\u4eec\u9700\u8981 shift up\u3002\u8003\u8651\u4e00\u4e0b\u4ece\u4e0b\u9762\u7684\u5806\u4e2d\u5220\u9664 (5) \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a \u73b0\u5728 (5) \u548c (8) \u4ea4\u6362\u4e86\u3002\u56e0\u4e3a (8) \u6bd4\u5b83\u7684\u7236\u8282\u70b9\u5927\uff0c\u6211\u4eec\u9700\u8981 shiftUp() \u3002","title":"\u5806"},{"location":"datastructure/heap/%E5%A0%86/#_1","text":"\u5806\u5206\u4e3a\u4e24\u79cd\uff1a \u6700\u5927\u5806*\u548c*\u6700\u5c0f\u5806 \uff0c\u4e24\u8005\u7684\u5dee\u522b\u5728\u4e8e\u8282\u70b9\u7684\u6392\u5e8f\u65b9\u5f0f\u3002 \u5728\u6700\u5927\u5806\u4e2d\uff0c\u7236\u8282\u70b9\u7684\u503c\u6bd4\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u503c\u90fd\u8981\u5927\u3002\u5728\u6700\u5c0f\u5806\u4e2d\uff0c\u7236\u8282\u70b9\u7684\u503c\u6bd4\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u503c\u90fd\u8981\u5c0f\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u201c\u5806\u5c5e\u6027\u201d\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5c5e\u6027\u5bf9\u5806\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u6210\u7acb\u3002 \u4f8b\u5b50\uff1a \u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u5806\uff0c\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u7684\u503c\u90fd\u6bd4\u5176\u5b50\u8282\u70b9\u8981\u5927\u3002 10 \u6bd4 7 \u548c 2 \u90fd\u5927\u3002 7 \u6bd4 5 \u548c 1 \u90fd\u5927\u3002 \u6839\u636e\u8fd9\u4e00\u5c5e\u6027\uff0c\u90a3\u4e48\u6700\u5927\u5806\u603b\u662f\u5c06\u5176\u4e2d\u7684\u6700\u5927\u503c\u5b58\u653e\u5728\u6811\u7684\u6839\u8282\u70b9\u3002\u800c\u5bf9\u4e8e\u6700\u5c0f\u5806\uff0c\u6839\u8282\u70b9\u4e2d\u7684\u5143\u7d20\u603b\u662f\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u3002\u5806\u5c5e\u6027\u975e\u5e38\u6709\u7528\uff0c\u56e0\u4e3a\u5806\u5e38\u5e38\u88ab\u5f53\u505a\u4f18\u5148\u961f\u5217\u4f7f\u7528\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5feb\u901f\u5730\u8bbf\u95ee\u5230\u201c\u6700\u91cd\u8981\u201d\u7684\u5143\u7d20\u3002 **\u6ce8\u610f\uff1a**\u5806\u7684\u6839\u8282\u70b9\u4e2d\u5b58\u653e\u7684\u662f\u6700\u5927\u6216\u8005\u6700\u5c0f\u5143\u7d20\uff0c\u4f46\u662f\u5176\u4ed6\u8282\u70b9\u7684\u6392\u5e8f\u987a\u5e8f\u662f\u672a\u77e5\u7684\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u6700\u5927\u5806\u4e2d\uff0c\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u5143\u7d20\u603b\u662f\u4f4d\u4e8e index 0 \u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u6700\u5c0f\u7684\u5143\u7d20\u5219\u672a\u5fc5\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002--\u552f\u4e00\u80fd\u591f\u4fdd\u8bc1\u7684\u662f\u6700\u5c0f\u7684\u5143\u7d20\u662f\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u4f46\u662f\u4e0d\u786e\u5b9a\u662f\u54ea\u4e00\u4e2a\u3002","title":"\u5806\u5c5e\u6027"},{"location":"datastructure/heap/%E5%A0%86/#_2","text":"\u5806\u5e76\u4e0d\u80fd\u53d6\u4ee3\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5b83\u4eec\u4e4b\u95f4\u6709\u76f8\u4f3c\u4e4b\u5904\u4e5f\u6709\u4e00\u4e9b\u4e0d\u540c\u3002\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4e24\u8005\u7684\u4e3b\u8981\u5dee\u522b\uff1a **\u8282\u70b9\u7684\u987a\u5e8f\u3002**\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u5de6\u5b50\u8282\u70b9\u5fc5\u987b\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u53f3\u5b50\u8282\u70b9\u5fc5\u987b\u5fc5\u6bd4\u7236\u8282\u70b9\u5927\u3002\u4f46\u662f\u5728\u5806\u4e2d\u5e76\u975e\u5982\u6b64\u3002\u5728\u6700\u5927\u5806\u4e2d\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u5fc5\u987b\u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u800c\u5728\u6700\u5c0f\u5806\u4e2d\uff0c\u5b83\u4eec\u90fd\u5fc5\u987b\u6bd4\u7236\u8282\u70b9\u5927\u3002 **\u5185\u5b58\u5360\u7528\u3002**\u666e\u901a\u6811\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u6bd4\u5b83\u4eec\u5b58\u50a8\u7684\u6570\u636e\u8981\u591a\u3002\u4f60\u5fc5\u987b\u4e3a\u8282\u70b9\u5bf9\u8c61\u4ee5\u53ca\u5de6/\u53f3\u5b50\u8282\u70b9\u6307\u9488\u5206\u914d\u5185\u5b58\u3002\u5806\u4ec5\u4ec5\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u6765\u5b58\u50a8\u6570\u7ec4\uff0c\u4e14\u4e0d\u4f7f\u7528\u6307\u9488\u3002 \u5e73\u8861\u3002**\u4e8c\u53c9\u641c\u7d22\u6811\u5fc5\u987b\u662f\u201c\u5e73\u8861\u201d\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u5927\u90e8\u5206\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u624d\u80fd\u8fbe\u5230**O(log n) \u3002\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u4f4d\u7f6e\u63d2\u5165/\u5220\u9664\u6570\u636e\uff0c\u6216\u8005\u4f7f\u7528 AVL \u6811\u6216\u8005\u7ea2\u9ed1\u6811\uff0c\u4f46\u662f\u5728\u5806\u4e2d\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u6574\u68f5\u6811\u90fd\u662f\u6709\u5e8f\u7684\u3002\u6211\u4eec\u53ea\u9700\u8981\u6ee1\u8db3\u5806\u5c5e\u6027\u5373\u53ef\uff0c\u6240\u4ee5\u5728\u5806\u4e2d\u5e73\u8861\u4e0d\u662f\u95ee\u9898\u3002\u56e0\u4e3a\u5806\u4e2d\u6570\u636e\u7684\u7ec4\u7ec7\u65b9\u5f0f\u53ef\u4ee5\u4fdd\u8bc1**O(log n)** \u7684\u6027\u80fd\u3002 **\u641c\u7d22\u3002**\u5728\u4e8c\u53c9\u6811\u4e2d\u641c\u7d22\u4f1a\u5f88\u5feb\uff0c\u4f46\u662f\u5728\u5806\u4e2d\u641c\u7d22\u4f1a\u5f88\u6162\u3002\u5728\u5806\u4e2d\u641c\u7d22\u4e0d\u662f\u7b2c\u4e00\u4f18\u5148\u7ea7\uff0c\u56e0\u4e3a\u4f7f\u7528\u5806\u7684\u76ee\u7684\u662f\u5c06\u6700\u5927\uff08\u6216\u8005\u6700\u5c0f\uff09\u7684\u8282\u70b9\u653e\u5728\u6700\u524d\u9762\uff0c\u4ece\u800c\u5feb\u901f\u7684\u8fdb\u884c\u76f8\u5173\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u3002","title":"\u5806\u548c\u666e\u901a\u6811\u7684\u533a\u522b"},{"location":"datastructure/heap/%E5%A0%86/#_3","text":"\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u6811\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u4e5f\u8bb8\u770b\u8d77\u6765\u6709\u70b9\u53e4\u602a\uff0c\u4f46\u662f\u5b83\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u4e0a\u90fd\u662f\u5f88\u9ad8\u6548\u7684\u3002 \u6211\u4eec\u51c6\u5907\u5c06\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u6811\u8fd9\u6837\u5b58\u50a8\uff1a [ 10 , 7 , 2 , 5 , 1 ] \u5c31\u8fd9\u4e48\u591a\uff01\u6211\u4eec\u9664\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u7ec4\u4ee5\u5916\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u95f4\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u5141\u8bb8\u4f7f\u7528\u6307\u9488\uff0c\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u77e5\u9053\u54ea\u4e00\u4e2a\u8282\u70b9\u662f\u7236\u8282\u70b9\uff0c\u54ea\u4e00\u4e2a\u8282\u70b9\u662f\u5b83\u7684\u5b50\u8282\u70b9\u5462\uff1f\u95ee\u5f97\u597d\uff01\u8282\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6eindex \u548c\u5b83\u7684\u7236\u8282\u70b9\u4ee5\u53ca\u5b50\u8282\u70b9\u7684\u7d22\u5f15\u4e4b\u95f4\u6709\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb\u3002 \u5982\u679c i \u662f\u8282\u70b9\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u4e0b\u9762\u7684\u516c\u5f0f\u5c31\u7ed9\u51fa\u4e86\u5b83\u7684\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff1a parent ( i ) = floor (( i - 1 ) / 2 ) left ( i ) = 2i + 1 right ( i ) = 2i + 2 \u6ce8\u610f right(i) \u5c31\u662f\u7b80\u5355\u7684 left(i) + 1 \u3002\u5de6\u53f3\u8282\u70b9\u603b\u662f\u5904\u4e8e\u76f8\u90bb\u7684\u4f4d\u7f6e\u3002 \u6211\u4eec\u5c06\u5199\u516c\u5f0f\u653e\u5230\u524d\u9762\u7684\u4f8b\u5b50\u4e2d\u9a8c\u8bc1\u4e00\u4e0b\u3002 Node Array index ( i ) Parent index Left child Right child 10 0 -1 1 2 7 1 0 3 4 2 2 0 5 6 5 3 1 7 8 1 4 1 9 10 **\u6ce8\u610f\uff1a**\u6839\u8282\u70b9 (10) \u6ca1\u6709\u7236\u8282\u70b9\uff0c\u56e0\u4e3a -1 \u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6570\u7ec4\u7d22\u5f15\u3002\u540c\u6837\uff0c\u8282\u70b9 (2) \uff0c (5) \u548c (1) \u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7d22\u5f15\u5df2\u7ecf\u8d85\u8fc7\u4e86\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4f7f\u7528\u8fd9\u4e9b\u7d22\u5f15\u503c\u7684\u65f6\u5019\u9700\u8981\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u7d22\u5f15\u503c\u3002 \u590d\u4e60\u4e00\u4e0b\uff0c\u5728\u6700\u5927\u5806\u4e2d\uff0c\u7236\u8282\u70b9\u7684\u503c\u603b\u662f\u8981\u5927\u4e8e\uff08\u6216\u8005\u7b49\u4e8e\uff09\u5176\u5b50\u8282\u70b9\u7684\u503c\u3002\u8fd9\u610f\u5473\u4e0b\u9762\u7684\u516c\u5f0f\u5bf9\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u7d22\u5f15 i \u90fd\u6210\u7acb\uff1a array[parent(i)] >= array[i] \u53ef\u4ee5\u7528\u4e0a\u9762\u7684\u4f8b\u5b50\u6765\u9a8c\u8bc1\u4e00\u4e0b\u8fd9\u4e2a\u5806\u5c5e\u6027\u3002 \u5982\u4f60\u6240\u89c1\uff0c\u8fd9\u4e9b\u516c\u5f0f\u5141\u8bb8\u6211\u4eec\u4e0d\u4f7f\u7528\u6307\u9488\u5c31\u53ef\u4ee5\u627e\u5230\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u6216\u8005\u5b50\u8282\u70b9\u3002\u4e8b\u60c5\u6bd4\u7b80\u5355\u7684\u53bb\u6389\u6307\u9488\u8981\u590d\u6742\uff0c\u4f46\u8fd9\u5c31\u662f\u4ea4\u6613\uff1a\u6211\u4eec\u8282\u7ea6\u4e86\u7a7a\u95f4\uff0c\u4f46\u662f\u8981\u8fdb\u884c\u66f4\u591a\u8ba1\u7b97\u3002\u5e78\u597d\u8fd9\u4e9b\u8ba1\u7b97\u5f88\u5feb\u5e76\u4e14\u53ea\u9700\u8981**O(1)**\u7684\u65f6\u95f4\u3002 \u7406\u89e3\u6570\u7ec4\u7d22\u5f15\u548c\u8282\u70b9\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5173\u7cfb\u975e\u5e38\u91cd\u8981\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u66f4\u5927\u7684\u5806\uff0c\u5b83\u670915\u4e2a\u8282\u70b9\u88ab\u5206\u6210\u4e864\u5c42\uff1a Array.png \u56fe\u7247\u4e2d\u7684\u6570\u5b57\u4e0d\u662f\u8282\u70b9\u7684\u503c\uff0c\u800c\u662f\u5b58\u50a8\u8fd9\u4e2a\u8282\u70b9\u7684\u6570\u7ec4\u7d22\u5f15\uff01\u8fd9\u91cc\u662f\u6570\u7ec4\u7d22\u5f15\u548c\u6811\u7684\u5c42\u7ea7\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff0c\u6570\u7ec4\u4e2d\u7236\u8282\u70b9\u603b\u662f\u5728\u5b50\u8282\u70b9\u7684\u524d\u9762\u3002 \u6ce8\u610f\u8fd9\u4e2a\u65b9\u6848\u4e0e\u4e00\u4e9b\u9650\u5236\u3002\u4f60\u53ef\u4ee5\u5728\u666e\u901a\u4e8c\u53c9\u6811\u4e2d\u6309\u7167\u4e0b\u9762\u7684\u65b9\u5f0f\u7ec4\u7ec7\u6570\u636e\uff0c\u4f46\u662f\u5728\u5806\u4e2d\u4e0d\u53ef\u4ee5\uff1a \u5728\u5806\u4e2d\uff0c\u5728\u5f53\u524d\u5c42\u7ea7\u6240\u6709\u7684\u8282\u70b9\u90fd\u5df2\u7ecf\u586b\u6ee1\u4e4b\u524d\u4e0d\u5141\u8bb8\u5f00\u662f\u4e0b\u4e00\u5c42\u7684\u586b\u5145\uff0c\u6240\u4ee5\u5806\u603b\u662f\u6709\u8fd9\u6837\u7684\u5f62\u72b6\uff1a **\u6ce8\u610f\uff1a**\u4f60\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u6811\u6765\u6a21\u62df\u5806\uff0c\u4f46\u662f\u90a3\u5bf9\u7a7a\u95f4\u662f\u6781\u5927\u7684\u6d6a\u8d39\u3002 \u5c0f\u6d4b\u9a8c\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u6570\u7ec4\uff1a [ 10 , 14 , 25 , 33 , 81 , 82 , 99 ] \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5806\u5417\uff1f\u7b54\u6848\u662f yes \uff01\u4e00\u4e2a\u4ece\u4f4e\u5230\u9ad8\u6709\u5e8f\u6392\u5217\u7684\u6570\u7ec4\u662f\u4ee5\u6709\u6548\u7684\u6700\u5c0f\u5806\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5806\u753b\u51fa\u6765\uff1a \u5806\u5c5e\u6027\u9002\u7528\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u56e0\u4e3a\u7236\u8282\u70b9\u603b\u662f\u6bd4\u5b83\u7684\u5b57\u8282\u70b9\u5c0f\u3002\uff08\u4f60\u4e5f\u53ef\u4ee5\u9a8c\u8bc1\u4e00\u4e0b\uff1a\u4e00\u4e2a\u4ece\u9ad8\u5230\u4f4e\u6709\u5e8f\u6392\u5217\u7684\u6570\u7ec4\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6700\u5927\u5806\uff09 **\u6ce8\u610f\uff1a**\u5e76\u4e0d\u662f\u6bcf\u4e00\u4e2a\u6700\u5c0f\u5806\u90fd\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff01\u8981\u5c06\u5806\u8f6c\u6362\u6210\u6709\u5e8f\u6570\u7ec4\uff0c\u9700\u8981\u4f7f\u7528\u5806\u6392\u5e8f\u3002","title":"\u6765\u81ea\u6570\u7ec4\u7684\u6811"},{"location":"datastructure/heap/%E5%A0%86/#_4","text":"\u5982\u679c\u4f60\u597d\u5947\uff0c\u8fd9\u91cc\u6709\u66f4\u591a\u7684\u516c\u5f0f\u63cf\u8ff0\u4e86\u5806\u7684\u4e00\u4e9b\u786e\u5b9a\u5c5e\u6027\u3002\u4f60\u4e0d\u9700\u8981\u77e5\u9053\u8fd9\u4e9b\uff0c\u4f46\u5b83\u4eec\u6709\u65f6\u4f1a\u6d3e\u4e0a\u7528\u573a\u3002 \u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u6b64\u90e8\u5206\uff01 \u6811\u7684*\u9ad8\u5ea6*\u662f\u6307\u4ece\u6811\u7684\u6839\u8282\u70b9\u5230\u6700\u4f4e\u7684\u53f6\u8282\u70b9\u6240\u9700\u8981\u7684\u6b65\u6570\uff0c\u6216\u8005\u66f4\u6b63\u5f0f\u7684\u5b9a\u4e49\uff1a\u9ad8\u5ea6\u662f\u6307\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u6700\u5927\u503c\u3002\u4e00\u4e2a\u9ad8\u5ea6\u4e3a h \u7684\u5806\u6709 h+1 \u5c42\u3002 \u4e0b\u9762\u8fd9\u4e2a\u5bf9\u7684\u9ad8\u5ea6\u662f3\uff0c\u6240\u4ee5\u5b83\u67094\u5c42\uff1a \u5982\u679c\u4e00\u4e2a\u5806\u6709 n \u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u7684\u9ad8\u5ea6\u662f h = floor(log2(n)) \u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u603b\u662f\u8981\u5c06\u8fd9\u4e00\u5c42\u5b8c\u5168\u586b\u6ee1\u4ee5\u540e\u624d\u4f1a\u586b\u5145\u65b0\u7684\u4e00\u5c42\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u6709 15 \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5b83\u7684\u9ad8\u5ea6\u662f floor(log2(15)) = floor(3.91) = 3 \u3002 \u5982\u679c\u6700\u4e0b\u9762\u7684\u4e00\u5c42\u5df2\u7ecf\u586b\u6ee1\uff0c\u90a3\u4e48\u90a3\u4e00\u5c42\u5305\u542b 2^h \u4e2a\u8282\u70b9\u3002\u6811\u4e2d\u8fd9\u4e00\u5c42\u4ee5\u4e0a\u6240\u6709\u7684\u8282\u70b9\u6570\u76ee\u4e3a 2^h - 1 \u3002\u540c\u6837\u662f\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6700\u4e0b\u9762\u7684\u4e00\u5c42\u67098\u4e2a\u8282\u70b9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f 2^3 = 8 \u3002\u524d\u9762\u7684\u4e09\u5c42\u4e00\u5171\u5305\u542b7\u7684\u8282\u70b9\uff0c\u5373\uff1a 2^3 - 1 = 8 - 1 = 7 \u3002 \u6240\u4ee5\u6574\u4e2a\u5806\u4e2d\u7684\u8282\u70b9\u6570\u76ee\u4e3a\uff1a* 2^(h+1) - 1*\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c 2^4 - 1 = 16 - 1 = 15 \u53f6\u8282\u70b9\u603b\u662f\u4f4d\u4e8e\u6570\u7ec4\u7684 floor(n/2) \u548c n-1 \u4e4b\u95f4\u3002","title":"\u66f4\u591a\u6570\u5b66\u516c\u5f0f"},{"location":"datastructure/heap/%E5%A0%86/#_5","text":"\u6709\u4e24\u4e2a\u539f\u59cb\u64cd\u4f5c\u7528\u4e8e\u4fdd\u8bc1\u63d2\u5165\u6216\u5220\u9664\u8282\u70b9\u4ee5\u540e\u5806\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6700\u5927\u5806\u6216\u8005\u6700\u5c0f\u5806\uff1a shiftUp() : \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6bd4\u5b83\u7684\u7236\u8282\u70b9\u5927\uff08\u6700\u5927\u5806\uff09\u6216\u8005\u5c0f\uff08\u6700\u5c0f\u5806\uff09\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u5b83\u540c\u7236\u8282\u70b9\u4ea4\u6362\u4f4d\u7f6e\u3002\u8fd9\u6837\u662f\u8fd9\u4e2a\u8282\u70b9\u5728\u6570\u7ec4\u7684\u4f4d\u7f6e\u4e0a\u5347\u3002 shiftDown() : \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6bd4\u5b83\u7684\u5b50\u8282\u70b9\u5c0f\uff08\u6700\u5927\u5806\uff09\u6216\u8005\u5927\uff08\u6700\u5c0f\u5806\uff09\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u5b83\u5411\u4e0b\u79fb\u52a8\u3002\u8fd9\u4e2a\u64cd\u4f5c\u4e5f\u79f0\u4f5c\u201c\u5806\u5316\uff08heapify\uff09\u201d\u3002 shiftUp \u6216\u8005 shiftDown \u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(log n) \u3002 \u57fa\u4e8e\u8fd9\u4e24\u4e2a\u539f\u59cb\u64cd\u4f5c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u64cd\u4f5c\uff1a insert(value) : \u5728\u5806\u7684\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u7136\u540e\u4f7f\u7528 shiftUp \u6765\u4fee\u590d\u5bf9\u3002 remove() : \u79fb\u9664\u5e76\u8fd4\u56de\u6700\u5927\u503c\uff08\u6700\u5927\u5806\uff09\u6216\u8005\u6700\u5c0f\u503c\uff08\u6700\u5c0f\u5806\uff09\u3002\u4e3a\u4e86\u5c06\u8fd9\u4e2a\u8282\u70b9\u5220\u9664\u540e\u7684\u7a7a\u4f4d\u586b\u8865\u4e0a\uff0c\u9700\u8981\u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u79fb\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u4f7f\u7528 shiftDown \u65b9\u6cd5\u6765\u4fee\u590d\u5806\u3002 removeAtIndex(index) : \u548c remove() \u4e00\u6837\uff0c\u5dee\u522b\u5728\u4e8e\u53ef\u4ee5\u79fb\u9664\u5806\u4e2d\u4efb\u610f\u8282\u70b9\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6839\u8282\u70b9\u3002\u5f53\u5b83\u4e0e\u5b50\u8282\u70b9\u6bd4\u8f83\u4f4d\u7f6e\u4e0d\u65f6\u65e0\u5e8f\u65f6\u4f7f\u7528 shiftDown() \uff0c\u5982\u679c\u4e0e\u7236\u8282\u70b9\u6bd4\u8f83\u53d1\u73b0\u65e0\u5e8f\u5219\u4f7f\u7528 shiftUp() \u3002 replace(index, value) \uff1a\u5c06\u4e00\u4e2a\u66f4\u5c0f\u7684\u503c\uff08\u6700\u5c0f\u5806\uff09\u6216\u8005\u66f4\u5927\u7684\u503c\uff08\u6700\u5927\u5806\uff09\u8d4b\u503c\u7ed9\u4e00\u4e2a\u8282\u70b9\u3002\u7531\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\u7834\u574f\u4e86\u5806\u5c5e\u6027\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 shiftUp() \u6765\u4fee\u590d\u5806\u5c5e\u6027\u3002 \u4e0a\u9762\u6240\u6709\u7684\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(log n) \uff0c\u56e0\u4e3a shiftUp \u548c shiftDown \u90fd\u5f88\u8d39\u65f6\u3002\u8fd8\u6709\u5c11\u6570\u4e00\u4e9b\u64cd\u4f5c\u9700\u8981\u66f4\u591a\u7684\u65f6\u95f4\uff1a search(value) :\u5806\u4e0d\u662f\u4e3a\u5feb\u901f\u641c\u7d22\u800c\u5efa\u7acb\u7684\uff0c\u4f46\u662f replace() \u548c removeAtIndex() \u64cd\u4f5c\u9700\u8981\u627e\u5230\u8282\u70b9\u5728\u6570\u7ec4\u4e2d\u7684index\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5148\u627e\u5230\u8fd9\u4e2aindex\u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n) \u3002 buildHeap(array) :\u901a\u8fc7\u53cd\u590d\u8c03\u7528 insert() \u65b9\u6cd5\u5c06\u4e00\u4e2a\uff08\u65e0\u5e8f\uff09\u6570\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u5806\u3002\u5982\u679c\u4f60\u8db3\u591f\u806a\u660e\uff0c\u4f60\u53ef\u4ee5\u5728 O(n) \u65f6\u95f4\u5185\u5b8c\u6210\u3002 \u5806\u6392\u5e8f\uff1a\u7531\u4e8e\u5806\u5c31\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u72ec\u7279\u7684\u5c5e\u6027\u5c06\u6570\u7ec4\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n lg n) \u3002 \u5806\u8fd8\u6709\u4e00\u4e2a peek() \u65b9\u6cd5\uff0c\u4e0d\u7528\u5220\u9664\u8282\u70b9\u5c31\u8fd4\u56de\u6700\u5927\u503c\uff08\u6700\u5927\u5806\uff09\u6216\u8005\u6700\u5c0f\u503c\uff08\u6700\u5c0f\u5806\uff09\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(1) \u3002 \u6ce8\u610f\uff1a**\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5806\u7684\u5e38\u7528\u64cd\u4f5c\u8fd8\u662f\u4f7f\u7528 insert() \u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\uff0c\u548c\u901a\u8fc7 remove() \u79fb\u9664\u6700\u5927\u6216\u8005\u6700\u5c0f\u503c\u3002\u4e24\u8005\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f**O(log n) \u3002\u5176\u5176\u4ed6\u7684\u64cd\u4f5c\u662f\u7528\u4e8e\u652f\u6301\u66f4\u9ad8\u7ea7\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u8bf4\u5efa\u7acb\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u3002","title":"\u53ef\u4ee5\u7528\u5806\u505a\u4ec0\u4e48\uff1f"},{"location":"datastructure/heap/%E5%A0%86/#_6","text":"\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u63d2\u5165\u4f8b\u5b50\u6765\u770b\u770b\u63d2\u5165\u64cd\u4f5c\u7684\u7ec6\u8282\u3002\u6211\u4eec\u5c06\u6570\u5b57 16 \u63d2\u5165\u5230\u8fd9\u4e2a\u5806\u4e2d\uff1a \u5806\u7684\u6570\u7ec4\u662f\uff1a [ 10, 7, 2, 5, 1 ] \u3002 \u7b2c\u4e00\u80a1\u662f\u5c06\u65b0\u7684\u5143\u7d20\u63d2\u5165\u5230\u6570\u7ec4\u7684\u5c3e\u90e8\u3002\u6570\u7ec4\u53d8\u6210\uff1a [ 10 , 7 , 2 , 5 , 1 , 16 ] \u76f8\u5e94\u7684\u6811\u53d8\u6210\u4e86\uff1a 16 \u88ab\u6dfb\u52a0\u6700\u540e\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u4f4d\u3002 \u4e0d\u884c\u7684\u662f\uff0c\u73b0\u5728\u5806\u5c5e\u6027\u4e0d\u6ee1\u8db3\uff0c\u56e0\u4e3a 2 \u5728 16 \u7684\u4e0a\u9762\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5927\u7684\u6570\u5b57\u5728\u4e0a\u9762\uff08\u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u5806\uff09 \u4e3a\u4e86\u6062\u590d\u5806\u5c5e\u6027\uff0c\u6211\u4eec\u9700\u8981\u4ea4\u6362 16 \u548c 2 \u3002 \u73b0\u5728\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u56e0\u4e3a 10 \u4e5f\u6bd4 16 \u5c0f\u3002\u6211\u4eec\u7ee7\u7eed\u4ea4\u6362\u6211\u4eec\u7684\u63d2\u5165\u5143\u7d20\u548c\u5b83\u7684\u7236\u8282\u70b9\uff0c\u76f4\u5230\u5b83\u7684\u7236\u8282\u70b9\u6bd4\u5b83\u5927\u6216\u8005\u6211\u4eec\u5230\u8fbe\u6811\u7684\u9876\u90e8\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684 shift-up \uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u540e\u90fd\u9700\u8981\u8fdb\u884c\u3002\u5b83\u5c06\u4e00\u4e2a\u592a\u5927\u6216\u8005\u592a\u5c0f\u7684\u6570\u5b57\u201c\u6d6e\u8d77\u201d\u5230\u6811\u7684\u9876\u90e8\u3002 \u6700\u540e\u6211\u4eec\u5f97\u5230\u7684\u5806\uff1a \u73b0\u5728\u6bcf\u4e00\u4e2a\u7236\u8282\u70b9\u90fd\u6bd4\u5b83\u7684\u5b50\u8282\u70b9\u5927\u3002","title":"\u63d2\u5165"},{"location":"datastructure/heap/%E5%A0%86/#_7","text":"\u6211\u4eec\u5c06\u8fd9\u4e2a\u6811\u4e2d\u7684 (10) \u5220\u9664\uff1a \u73b0\u5728\u9876\u90e8\u6709\u4e00\u4e2a\u7a7a\u7684\u8282\u70b9\uff0c\u600e\u4e48\u5904\u7406\uff1f \u5f53\u63d2\u5165\u8282\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c06\u65b0\u7684\u503c\u8fd4\u7ed9\u6570\u7ec4\u7684\u5c3e\u90e8\u3002\u73b0\u5728\u6211\u4eec\u6765\u505a\u76f8\u53cd\u7684\u4e8b\u60c5\uff1a\u6211\u4eec\u53d6\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5c06\u5b83\u653e\u5230\u6811\u7684\u9876\u90e8\uff0c\u7136\u540e\u518d\u4fee\u590d\u5806\u5c5e\u6027\u3002 \u73b0\u5728\u6765\u770b\u600e\u4e48 shift-down (1) \u3002\u4e3a\u4e86\u4fdd\u6301\u6700\u5927\u5806\u7684\u5806\u5c5e\u6027\uff0c\u6211\u4eec\u9700\u8981\u6811\u7684\u9876\u90e8\u662f\u6700\u5927\u7684\u6570\u636e\u3002\u73b0\u5728\u6709\u4e24\u4e2a\u6570\u5b57\u53ef\u7528\u4e8e\u4ea4\u6362 7 \u548c 2 \u3002\u6211\u4eec\u9009\u62e9\u8fd9\u4e24\u8005\u4e2d\u7684\u8f83\u5927\u8005\u79f0\u4e3a\u6700\u5927\u503c\u653e\u5728\u6811\u7684\u9876\u90e8\uff0c\u6240\u4ee5\u4ea4\u6362 7 \u548c 1 \uff0c\u73b0\u5728\u6811\u53d8\u6210\u4e86\uff1a \u7ee7\u7eed\u5806\u5316\u76f4\u5230\u8be5\u8282\u70b9\u6ca1\u6709\u4efb\u4f55\u5b50\u8282\u70b9\u6216\u8005\u5b83\u6bd4\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u8981\u5927\u4e3a\u6b62\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u5806\uff0c\u6211\u4eec\u53ea\u9700\u8981\u518d\u6709\u4e00\u6b21\u4ea4\u6362\u5c31\u6062\u590d\u4e86\u5806\u5c5e\u6027\uff1a","title":"\u5220\u9664\u6839\u8282\u70b9"},{"location":"datastructure/heap/%E5%A0%86/#_8","text":"\u7edd\u5927\u591a\u6570\u65f6\u5019\u4f60\u9700\u8981\u5220\u9664\u7684\u662f\u5806\u7684\u6839\u8282\u70b9\uff0c\u56e0\u4e3a\u8fd9\u5c31\u662f\u5806\u7684\u8bbe\u8ba1\u7528\u9014\u3002 \u4f46\u662f\uff0c\u5220\u9664\u4efb\u610f\u8282\u70b9\u4e5f\u5f88\u6709\u7528\u3002\u8fd9\u662f remove() \u7684\u901a\u7528\u7248\u672c\uff0c\u5b83\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230 shiftDown \u548c shiftUp \u3002 \u6211\u4eec\u8fd8\u662f\u7528\u524d\u9762\u7684\u4f8b\u5b50\uff0c\u5220\u9664 (7) : [\u56fe\u7247\u4e0a\u4f20\u5931\u8d25...(image-d46ac4-1534077058042)] \u5bf9\u5e94\u7684\u6570\u7ec4\u662f [ 10 , 7 , 2 , 5 , 1 ] \u4f60\u77e5\u9053\uff0c\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\u4f1a\u7834\u574f\u6700\u5927\u5806\u6216\u8005\u6700\u5c0f\u5806\u5c5e\u6027\u3002\u6211\u4eec\u9700\u8981\u5c06\u5220\u9664\u7684\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\uff1a [ 10 , 1 , 2 , 5 , 7 ] \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u6211\u4eec\u9700\u8981\u8fd4\u56de\u7684\u5143\u7d20\uff1b\u7136\u540e\u8c03\u7528 removeLast() \u6765\u5c06\u5b83\u5220\u9664\u3002 (1) \u6bd4\u5b83\u7684\u5b50\u8282\u70b9\u5c0f\uff0c\u6240\u4ee5\u9700\u8981 shiftDown() \u6765\u4fee\u590d\u3002 \u7136\u800c\uff0cshift down \u4e0d\u662f\u6211\u4eec\u8981\u5904\u7406\u7684\u552f\u4e00\u60c5\u51b5\u3002\u4e5f\u6709\u53ef\u80fd\u6211\u4eec\u9700\u8981 shift up\u3002\u8003\u8651\u4e00\u4e0b\u4ece\u4e0b\u9762\u7684\u5806\u4e2d\u5220\u9664 (5) \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a \u73b0\u5728 (5) \u548c (8) \u4ea4\u6362\u4e86\u3002\u56e0\u4e3a (8) \u6bd4\u5b83\u7684\u7236\u8282\u70b9\u5927\uff0c\u6211\u4eec\u9700\u8981 shiftUp() \u3002","title":"\u5220\u9664\u4efb\u610f\u8282\u70b9"},{"location":"datastructure/list/%E9%93%BE%E8%A1%A8/","text":"\u7ebf\u6027\u7684\u987a\u5e8f\u5b58\u50a8\u6570\u636e\uff0c\u800c\u662f\u5728\u6bcf\u4e00\u4e2a\u8282\u70b9\u91cc\u5b58\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488(Pointer)\u3002\u7531\u4e8e\u4e0d\u5fc5\u987b\u6309\u987a\u5e8f\u5b58\u50a8\uff0c\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u53ef\u4ee5\u8fbe\u5230O(1)\u7684\u590d\u6742\u5ea6\u3002 1\u3001\u5355\u5411\u94fe\u8868 \u00b6 \u5355\u5411\u94fe\u8868(\u5355\u94fe\u8868)\u662f\u94fe\u8868\u7684\u4e00\u79cd\uff0c\u5b83\u7531\u8282\u70b9\u7ec4\u6210\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u4e0b\u56fe\u5c31\u662f\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u8868\u5934\u4e3a\u7a7a\uff0c\u8868\u5934\u7684\u540e\u7ee7\u8282\u70b9\u662f\"\u7ed3\u70b910\"(\u6570\u636e\u4e3a10\u7684\u7ed3\u70b9)\uff0c\"\u8282\u70b910\"\u7684\u540e\u7ee7\u7ed3\u70b9\u662f\"\u8282\u70b920\"(\u6570\u636e\u4e3a10\u7684\u7ed3\u70b9)\uff0c... 2\u3001\u5355\u94fe\u8868\u5220\u9664\u8282\u70b9 \u00b6 \u6211\u4eec\u770b\u770b\u5355\u94fe\u8868\u5220\u9664\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\u5355\u94fe\u8868\u4e2d\u6211\u4eec\u8981\u5220\u9664\"\u8282\u70b930\"\u3002 \u5220\u9664\u4e4b\u524d \uff1a\"\u8282\u70b920\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b930\"\uff0c\u800c\"\u8282\u70b930\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b940\"\u3002 \u5220\u9664\u4e4b\u540e \uff1a\"\u8282\u70b920\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b940\"\u3002 3\u3001\u5355\u94fe\u8868\u6dfb\u52a0\u8282\u70b9 \u00b6 \u6211\u4eec\u518d\u6765\u770b\u770b\u5355\u94fe\u8868\u6dfb\u52a0\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\u5355\u94fe\u8868\u4e2d\u6211\u4eec\u5728\"\u8282\u70b910\"\u4e0e\"\u8282\u70b920\"\u4e4b\u95f4\u6dfb\u52a0\"\u8282\u70b915\" \u6dfb\u52a0\u4e4b\u524d \uff1a\"\u8282\u70b910\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\u3002 \u6dfb\u52a0\u4e4b\u540e \uff1a\"\u8282\u70b910\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b915\"\uff0c\u800c\"\u8282\u70b915\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\u3002 4\u3001\u53cc\u5411\u94fe\u8868 \u00b6 \u53cc\u5411\u94fe\u8868(\u53cc\u94fe\u8868)\u662f\u94fe\u8868\u7684\u4e00\u79cd\u3002\u548c\u5355\u94fe\u8868\u4e00\u6837\uff0c\u53cc\u94fe\u8868\u4e5f\u662f\u7531\u8282\u70b9\u7ec4\u6210\uff0c\u5b83\u7684\u6bcf\u4e2a\u6570\u636e\u7ed3\u70b9\u4e2d\u90fd\u6709\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u76f4\u63a5\u540e\u7ee7\u548c\u76f4\u63a5\u524d\u9a71\u3002\u6240\u4ee5\uff0c\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u90fd\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8bbf\u95ee\u5b83\u7684\u524d\u9a71\u7ed3\u70b9\u548c\u540e\u7ee7\u7ed3\u70b9\u3002\u4e00\u822c\u6211\u4eec\u90fd\u6784\u9020\u53cc\u5411\u5faa\u73af\u94fe\u8868\u3002 \u53cc\u94fe\u8868\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u8868\u5934\u4e3a\u7a7a\uff0c\u8868\u5934\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b910\"(\u6570\u636e\u4e3a10\u7684\u8282\u70b9)\uff1b\"\u8282\u70b910\"\u7684\u540e\u7ee7\u8282\u70b9\u662f\"\u8282\u70b920\"(\u6570\u636e\u4e3a10\u7684\u8282\u70b9)\uff0c\"\u8282\u70b920\"\u7684\u524d\u7ee7\u8282\u70b9\u662f\"\u8282\u70b910\"\uff1b\"\u8282\u70b920\"\u7684\u540e\u7ee7\u8282\u70b9\u662f\"\u8282\u70b930\"\uff0c\"\u8282\u70b930\"\u7684\u524d\u7ee7\u8282\u70b9\u662f\"\u8282\u70b920\"\uff1b...\uff1b\u672b\u5c3e\u8282\u70b9\u7684\u540e\u7ee7\u8282\u70b9\u662f\u8868\u5934\u3002 \u4e0d\u96be\u770b\u51fa\uff0c\u53cc\u5411\u94fe\u8868\u7684\u8282\u70b9\u5b9a\u4e49\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e0b\u9762\u7684\u7ed3\u6784\u4f53\u8868\u793a\uff1a //\u53cc\u5411\u94fe\u8868\u8282\u70b9\u7ed3\u6784 typedef struct dlink_node { struct dlink_node * prev ; struct dlink_node * next ; void * val ; //\u80fd\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u6570\u636e } node ; 5\u3001\u53cc\u5411\u94fe\u8868\u5220\u9664\u8282\u70b9 \u00b6 \u6211\u4eec\u770b\u770b\u53cc\u5411\u94fe\u8868\u5220\u9664\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\u5355\u94fe\u8868\u4e2d\u6211\u4eec\u8981\u5220\u9664\"\u8282\u70b930\"\u3002 \u5220\u9664\u4e4b\u524d \uff1a\"\u8282\u70b920\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b930\"\uff0c\"\u8282\u70b930\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\u3002\"\u8282\u70b930\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b940\"\uff0c\"\u8282\u70b940\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b930\"\u3002 \u5220\u9664\u4e4b\u540e \uff1a\"\u8282\u70b920\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b940\"\uff0c\"\u8282\u70b940\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\u3002 \u53cc\u5411\u94fe\u8868\u5220\u9664\u8282\u70b9\u7684\u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a //\u5220\u9664\u8282\u70b9pindex pindex -> next -> prev = pindex -> prev ; pindex -> prev -> next = pindex -> next ; free ( pindex ); //\u6ce8\u610f\u91ca\u653e\u8282\u70b9 6\u3001\u53cc\u5411\u94fe\u8868\u6dfb\u52a0\u8282\u70b9 \u00b6 \u6211\u4eec\u518d\u6765\u770b\u770b\u53cc\u5411\u94fe\u8868\u6dfb\u52a0\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\u53cc\u5411\u94fe\u8868\u5728\"\u8282\u70b910\"\u4e0e\"\u8282\u70b920\"\u4e4b\u95f4\u6dfb\u52a0\"\u8282\u70b915\" \u6dfb\u52a0\u4e4b\u524d \uff1a\"\u8282\u70b910\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\uff0c\"\u8282\u70b920\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b910\"\u3002 \u6dfb\u52a0\u4e4b\u540e \uff1a\"\u8282\u70b910\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b915\"\uff0c\"\u8282\u70b915\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b910\"\u3002\"\u8282\u70b915\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\uff0c\"\u8282\u70b920\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b915\"\u3002 \u53cc\u5411\u94fe\u8868\u6dfb\u52a0\u8282\u70b9\u7684\u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a //\u5c06pnode\u8282\u70b9\u63d2\u5165\u5230pindex\u4e4b\u524d pnode -> prev = pindex -> prev ; pnode -> next = pindex ; pindex -> prev -> next = pnode ; pindex -> prev = pnode ;","title":"\u94fe\u8868"},{"location":"datastructure/list/%E9%93%BE%E8%A1%A8/#1","text":"\u5355\u5411\u94fe\u8868(\u5355\u94fe\u8868)\u662f\u94fe\u8868\u7684\u4e00\u79cd\uff0c\u5b83\u7531\u8282\u70b9\u7ec4\u6210\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u4e0b\u56fe\u5c31\u662f\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u8868\u5934\u4e3a\u7a7a\uff0c\u8868\u5934\u7684\u540e\u7ee7\u8282\u70b9\u662f\"\u7ed3\u70b910\"(\u6570\u636e\u4e3a10\u7684\u7ed3\u70b9)\uff0c\"\u8282\u70b910\"\u7684\u540e\u7ee7\u7ed3\u70b9\u662f\"\u8282\u70b920\"(\u6570\u636e\u4e3a10\u7684\u7ed3\u70b9)\uff0c...","title":"1\u3001\u5355\u5411\u94fe\u8868"},{"location":"datastructure/list/%E9%93%BE%E8%A1%A8/#2","text":"\u6211\u4eec\u770b\u770b\u5355\u94fe\u8868\u5220\u9664\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\u5355\u94fe\u8868\u4e2d\u6211\u4eec\u8981\u5220\u9664\"\u8282\u70b930\"\u3002 \u5220\u9664\u4e4b\u524d \uff1a\"\u8282\u70b920\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b930\"\uff0c\u800c\"\u8282\u70b930\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b940\"\u3002 \u5220\u9664\u4e4b\u540e \uff1a\"\u8282\u70b920\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b940\"\u3002","title":"2\u3001\u5355\u94fe\u8868\u5220\u9664\u8282\u70b9"},{"location":"datastructure/list/%E9%93%BE%E8%A1%A8/#3","text":"\u6211\u4eec\u518d\u6765\u770b\u770b\u5355\u94fe\u8868\u6dfb\u52a0\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\u5355\u94fe\u8868\u4e2d\u6211\u4eec\u5728\"\u8282\u70b910\"\u4e0e\"\u8282\u70b920\"\u4e4b\u95f4\u6dfb\u52a0\"\u8282\u70b915\" \u6dfb\u52a0\u4e4b\u524d \uff1a\"\u8282\u70b910\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\u3002 \u6dfb\u52a0\u4e4b\u540e \uff1a\"\u8282\u70b910\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b915\"\uff0c\u800c\"\u8282\u70b915\" \u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\u3002","title":"3\u3001\u5355\u94fe\u8868\u6dfb\u52a0\u8282\u70b9"},{"location":"datastructure/list/%E9%93%BE%E8%A1%A8/#4","text":"\u53cc\u5411\u94fe\u8868(\u53cc\u94fe\u8868)\u662f\u94fe\u8868\u7684\u4e00\u79cd\u3002\u548c\u5355\u94fe\u8868\u4e00\u6837\uff0c\u53cc\u94fe\u8868\u4e5f\u662f\u7531\u8282\u70b9\u7ec4\u6210\uff0c\u5b83\u7684\u6bcf\u4e2a\u6570\u636e\u7ed3\u70b9\u4e2d\u90fd\u6709\u4e24\u4e2a\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u76f4\u63a5\u540e\u7ee7\u548c\u76f4\u63a5\u524d\u9a71\u3002\u6240\u4ee5\uff0c\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\uff0c\u90fd\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8bbf\u95ee\u5b83\u7684\u524d\u9a71\u7ed3\u70b9\u548c\u540e\u7ee7\u7ed3\u70b9\u3002\u4e00\u822c\u6211\u4eec\u90fd\u6784\u9020\u53cc\u5411\u5faa\u73af\u94fe\u8868\u3002 \u53cc\u94fe\u8868\u7684\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u8868\u5934\u4e3a\u7a7a\uff0c\u8868\u5934\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b910\"(\u6570\u636e\u4e3a10\u7684\u8282\u70b9)\uff1b\"\u8282\u70b910\"\u7684\u540e\u7ee7\u8282\u70b9\u662f\"\u8282\u70b920\"(\u6570\u636e\u4e3a10\u7684\u8282\u70b9)\uff0c\"\u8282\u70b920\"\u7684\u524d\u7ee7\u8282\u70b9\u662f\"\u8282\u70b910\"\uff1b\"\u8282\u70b920\"\u7684\u540e\u7ee7\u8282\u70b9\u662f\"\u8282\u70b930\"\uff0c\"\u8282\u70b930\"\u7684\u524d\u7ee7\u8282\u70b9\u662f\"\u8282\u70b920\"\uff1b...\uff1b\u672b\u5c3e\u8282\u70b9\u7684\u540e\u7ee7\u8282\u70b9\u662f\u8868\u5934\u3002 \u4e0d\u96be\u770b\u51fa\uff0c\u53cc\u5411\u94fe\u8868\u7684\u8282\u70b9\u5b9a\u4e49\u53ef\u4ee5\u7528\u4e00\u4e2a\u4e0b\u9762\u7684\u7ed3\u6784\u4f53\u8868\u793a\uff1a //\u53cc\u5411\u94fe\u8868\u8282\u70b9\u7ed3\u6784 typedef struct dlink_node { struct dlink_node * prev ; struct dlink_node * next ; void * val ; //\u80fd\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u6570\u636e } node ;","title":"4\u3001\u53cc\u5411\u94fe\u8868"},{"location":"datastructure/list/%E9%93%BE%E8%A1%A8/#5","text":"\u6211\u4eec\u770b\u770b\u53cc\u5411\u94fe\u8868\u5220\u9664\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\u5355\u94fe\u8868\u4e2d\u6211\u4eec\u8981\u5220\u9664\"\u8282\u70b930\"\u3002 \u5220\u9664\u4e4b\u524d \uff1a\"\u8282\u70b920\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b930\"\uff0c\"\u8282\u70b930\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\u3002\"\u8282\u70b930\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b940\"\uff0c\"\u8282\u70b940\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b930\"\u3002 \u5220\u9664\u4e4b\u540e \uff1a\"\u8282\u70b920\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b940\"\uff0c\"\u8282\u70b940\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\u3002 \u53cc\u5411\u94fe\u8868\u5220\u9664\u8282\u70b9\u7684\u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a //\u5220\u9664\u8282\u70b9pindex pindex -> next -> prev = pindex -> prev ; pindex -> prev -> next = pindex -> next ; free ( pindex ); //\u6ce8\u610f\u91ca\u653e\u8282\u70b9","title":"5\u3001\u53cc\u5411\u94fe\u8868\u5220\u9664\u8282\u70b9"},{"location":"datastructure/list/%E9%93%BE%E8%A1%A8/#6","text":"\u6211\u4eec\u518d\u6765\u770b\u770b\u53cc\u5411\u94fe\u8868\u6dfb\u52a0\u8282\u70b9\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u4e2a\u53cc\u5411\u94fe\u8868\u5728\"\u8282\u70b910\"\u4e0e\"\u8282\u70b920\"\u4e4b\u95f4\u6dfb\u52a0\"\u8282\u70b915\" \u6dfb\u52a0\u4e4b\u524d \uff1a\"\u8282\u70b910\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\uff0c\"\u8282\u70b920\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b910\"\u3002 \u6dfb\u52a0\u4e4b\u540e \uff1a\"\u8282\u70b910\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b915\"\uff0c\"\u8282\u70b915\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b910\"\u3002\"\u8282\u70b915\"\u7684\u540e\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b920\"\uff0c\"\u8282\u70b920\" \u7684\u524d\u7ee7\u8282\u70b9\u4e3a\"\u8282\u70b915\"\u3002 \u53cc\u5411\u94fe\u8868\u6dfb\u52a0\u8282\u70b9\u7684\u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a //\u5c06pnode\u8282\u70b9\u63d2\u5165\u5230pindex\u4e4b\u524d pnode -> prev = pindex -> prev ; pnode -> next = pindex ; pindex -> prev -> next = pnode ; pindex -> prev = pnode ;","title":"6\u3001\u53cc\u5411\u94fe\u8868\u6dfb\u52a0\u8282\u70b9"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/","text":"\u4e00\u3001\u9012\u5f52 \u00b6 \u5165\u95e8\u7ea7\u601d\u7ef4\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u65ad\u8c03\u7528\u81ea\u5df1\u5373\u53ef\u3002\u4f18\u70b9\u662f\u4e66\u5199\u7b80\u5355\uff0c\u7f3a\u70b9\u662f\u6548\u7387\u6781\u4f4e\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u91cd\u590d\u8ba1\u7b97\uff0c\u6bd4\u5982\u8981\u8ba1\u7b97f(6)\uff0c\u9700\u8ba1\u7b97f(5)+f(4)\uff0c\u5148\u7b97f(5)\uff0c\u4e2d\u9014\u8ba1\u7b97\u4e00\u6b21f(4)\uff0c\u518d\u7b97f(4)\uff0c\u53c8\u7b97\u4e86\u4e00\u6b21\u3002 int f ( int n ){ return n < 2 ? n : f ( n -1 ) + f ( n -2 ); } \u4e8c\u3001\u8bb0\u5fc6\u5316\u641c\u7d22 \u00b6 \u8bb0\u5fc6\u5316\u4e5f\u662f\u7b97\u6cd5\u7684\u4e00\u4e2a\u57fa\u672c\u6280\u80fd\uff0c\u4e0a\u9762\u7684\u505a\u6cd5\u65e2\u7136\u4f1a\u91cd\u590d\u8ba1\u7b97\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u7b97\u51fa\u6765f(i)\u7684\u65f6\u5019\uff0c\u628a\u5b83\u4fdd\u5b58\uff08\u8bb0\u5fc6\uff09\u8d77\u6765\uff0c\u4e0b\u6b21\u9700\u8981\u7684\u65f6\u5019\u76f4\u63a5\u53d6\u51fa\uff0c\u52a0\u5feb\u901f\u5ea6\u3002 int a [ 40 ]; int f ( int n ){ if ( n < 2 ) return n ; if ( a [ n ] > 0 ) return a [ n ]; //\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86,\u76f4\u63a5\u8fd4\u56de else return a [ n ] = f ( n -1 ) + f ( n -2 ); //\u6ca1\u6709\u7b97\u8fc7\uff0c\u5148\u7b97\uff0c\u7136\u540e\u4fdd\u5b58\u8d77\u6765\uff0c\u6700\u540e\u8fd4\u56de\u3002 } \u4e09\u3001\u5faa\u73af\uff0c\u52a8\u6001\u89c4\u5212\u542f\u8499 \u00b6 \u5229\u7528\u5faa\u73af\uff0c\u76f4\u63a5\u6839\u636e\u524d\u4e24\u9879\u7b97\u51faf(n)\uff0c\u6548\u7387\u548c\u8bb0\u5fc6\u8bdd\u641c\u7d22\u4e00\u6837\uff0c\u53bb\u6389\u4e86\u9012\u5f52\u3002\u6b64\u5904\u8574\u542b\u4e86\u521d\u7ea7\u7684\u52a8\u6001\u89c4\u5212\u601d\u60f3\uff0c\u7528\u524d\u9762\u5df2\u4f5c\u51fa\u7684\u51b3\u7b56\uff0c\u51b3\u5b9a\u5f53\u524d\u8981\u91c7\u53d6\u7684\u51b3\u7b56\uff0c\u5f53\u524d\u91c7\u53d6\u7684\u51b3\u7b56\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u540e\u9762\u51b3\u7b56\u7684\u6b63\u786e\u6027\u3002 int a [ 40 ] = { 0 , 1 }; int f ( int n ){ if ( n < 2 ) return n ; for ( int i = 2 ; i <= n ; i ++ ){ a [ i ] = a [ i -1 ] + a [ i -2 ]; } return a [ n ]; } \u56db\u3001\u6574\u6570\u8303\u56f4 \u00b6 \u4e0a\u9762\u7684\u7a0b\u5e8f\u53ea\u5bf9n\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u6709\u6548\uff0c\u5982\u679c\u8ba1\u7b97f(47)\uff0c\u5c31\u53d1\u751f\u6ea2\u51fa\uff0c\u56e0\u4e3a\u7ed3\u679c\u6bd4int\u7c7b\u578b\u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u8fd8\u5927\u3002int\u662f32\u4f4d\u7684\uff0c\u6700\u5927\u80fd\u8868\u793a2^31-1\uff0c\u5927\u6982\u662f20\u591a\u4ebf\u3002\u53ef\u7528unsigned long long\u5bb9\u7eb3\u66f4\u5927\u7684\u6570\uff0cunsigned long long \u662f64\u4f4d\uff0c\u5e76\u4e14\u6700\u9ad8\u4f4d\u4e5f\u7528\u6765\u8ba1\u6570\uff0c\u6700\u5927\u80fd\u8868\u793a2^64-1\uff0c\u5341\u8fdb\u5236\u662f18446744073709551615\uff0c\u53ef\u4ee5\u7528\u7a0b\u5e8f\u8f93\u51fa\u8fd9\u4e2a\u6570\uff0c\u4f53\u4f1a\u4e00\u4e0b\uff1a #include <cstdio> #include <climits> //\u5e38\u7528\u6570\u636e\u7c7b\u578b\u7684\u6700\u5927\u3001\u6700\u5c0f\u503c\u90fd\u5728\u8fd9\u4e2a\u5934\u6587\u4ef6\u91cc int main (){ printf ( \"%llu\" , ULLONG_MAX ); return 0 ; } 2^64-1\u5bf9\u4e8e\u6590\u6ce2\u7eb3\u5207\u6570\u5217\u8fd9\u6837\u7684\u6307\u6570\u7ea7\u522b\u51fd\u6570\u7684\u589e\u957f\u901f\u5ea6\u6765\u8bf4\uff0c\u4e5f\u4e0d\u7b97\u5f88\u5927,\u5927\u6982f(200)\u5c31\u5feb\u8981\u8d85\u51fa\u53bb\u4e86\u3002 \u4e94\u3001\u6a21 \u00b6 n\u518d\u5927\u7684\u8bdd\u600e\u4e48\u529e\uff0c\u4e00\u822c\u9898\u76ee\u8981\u6c42\u8ba1\u7b97\u7ed3\u679c\u5bf9\u4e00\u4e2a\u5f88\u5927\u7684\u6570M\uff08\u6bd4\u59821e8+7\uff0c100000007\uff09\u6c42\u6a21\uff0c\u6c42\u6a21\u4ee5\u540e\u7ed3\u679c\u603b\u4f1a\u5c0f\u4e8eM\u3002\u5173\u4e8e\u6c42\u6a21\u6709\u4e24\u4e2a\u91cd\u8981\u516c\u5f0f\u9700\u8981\u8bb0\u4f4f\uff1a (a+b)%c = (a %c + b%c)%c (ab)%c = ((a%c) * (b%c))%c \u52a0\u5165\u6a21\u8fd0\u7b97\u4ee5\u540e\uff0cn\u5f88\u5927\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u6c42\u4e86\uff0c\u628a\u5faa\u73af\u4ee3\u7801\u6539\u4e00\u4e0b\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u7528\u5f88\u5927\u7684\u6570\u7ec4\u8bb0\u5f55\u6240\u67090-n\u7684\u7ed3\u679c\uff0c\u53ea\u9700\u89812\u4e2a\u5143\u7d20\u5c31\u591f\u4e86\uff1a #include <cstdio> #define MOD 1000000007 typedef long long ll ; ll a [ 2 ] = { 0 , 1 }; ll f ( int n ){ if ( n < 2 ) return n ; for ( int i = 2 ; i <= n ; i ++ ){ ll tmp = ( a [ 0 ] + a [ 1 ]) % MOD ; a [ 0 ] = a [ 1 ]; a [ 1 ] = tmp ; } return a [ 1 ]; } int main (){ printf ( \"%lld\" , f ( 200000000 )); return 0 ; } \u516d\u3001\u77e9\u9635\u4e58\u6cd5\u8f85\u52a9\u8f6c\u79fb \u00b6 \u4e0a\u9762\u7684\u4ee3\u7801\u5f53n\u572810\u4ebf\u8303\u56f4\u5185\u52c9\u5f3a\u80fd\u7b97\u51fa\u6765\uff0c\u518d\u5927\u7684\u8bdd\u5c31\u5f88\u65e0\u529b\u4e86\u3002\u56e0\u4e3a\u590d\u6742\u5ea6\u662fO(n)\uff0c\u53ea\u7528\u7b80\u5355\u7684\u624b\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4f18\u5316\u7684\u7a7a\u95f4\u4e86\uff0c\u8981\u60f3\u52a0\u901f\u5fc5\u987b\u7528\u5176\u5b83\u529e\u6cd5\u3002\u529e\u6cd5\u5c31\u662f\u5229\u7528\u77e9\u9635\u4e58\u6cd5\u3002\u77e9\u9635\u4e58\u6cd5\u8fd0\u7b97\u89c4\u5219\u6b64\u5904\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u5b66\u4e60\u8d44\u6e90\u968f\u5904\u53ef\u89c1\u3002 \u77e9\u9635\u8c61\u9c81\u8fc5\u5148\u751f\u4e00\u6837\u88c5\u4f5c\u5f88\u65e0\u8f9c\uff1a\u201c\u4f60\u7b97\u6590\u6ce2\u7eb3\u5207\u6570\u5217\uff0c\u548c\u6211\u77e9\u9635\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\uff1f\uff1f\u201d \u6211\u4eec\u5148\u4e0d\u7ba1\u77e9\u9635\u5148\u751f\u7684\u6297\u8bae\uff0c\u8bd5\u5b9a\u4e49\u6570\u5217\u521d\u59cb\u503c\u662f\u4e00\u4e2a1*2\uff081\u884c\uff0c2\u5217\uff09\u7684\u77e9\u9635\uff0c\u8868\u793a[f(0),f(1)]\uff0c\u5982\u679c\u8fd9\u4e2a\u77e9\u9635\u4e58\u4ee5\u53e6\u5916\u4e00\u4e2a\u77e9\u9635\uff0c\u7ed3\u679c\u80fd\u53d8\u6210[f(1),f(2)]\uff0c\u518d\u4e58\u4e00\u6b21\uff0c\u53d8\u6210[f(2),f(3)]\uff0c\u663e\u7136\u4e58\u4e0an-1\u6b21\uff0c\u7ed3\u679c\u5c31\u53d8\u6210\u4e86[f(n-1),f(n)]\u3002\u628a\u8fd9\u4e2a\u5f0f\u5b50\u4e00\u822c\u5316\uff0c\u5373[f(i-2),f(i-1)] xA = [f(i-1),f(i)]\uff0c\u6839\u636e\u77e9\u9635\u4e58\u6cd5\u5b9a\u4e49\uff0cA\u663e\u7136\u662f\u4e00\u4e2a2x2\u7684\u77e9\u9635\uff0c\u7b2c\u4e00\u5217\u662f0\uff0c1\uff1b\u7b2c\u4e8c\u5217\u662f1\uff0c1\uff0c\u4e58\u5b8c\u4ee5\u540e\uff0c\u7b2c\u4e00\u5217\u662ff(i-2)x0+f(i-1)x1\uff0c\u5373f(i-1)\uff1b\u7b2c\u4e8c\u5217\u662ff(i-2)x1+f(i-1)x1\uff0c\u6b63\u597d\u662ff(i)\u3002 \u7ed3\u8bba\u662f\uff1a[f(n-1),f(n)] = [f(0),f(1)] x A^(n-1)\uff0c[f(n-1),f(n)] \u7b49\u4e8e[f(0),f(1)] \u4e58\u4ee5A\u7684n-1\u6b21\u5e42\u3002 \u77e9\u9635\u518d\u6b21\u88c5\u65e0\u8f9c\uff1a\u201c\u8fd9\u6837\u4e5f\u6ca1\u7528\uff0c\u7b97\u8fd9\u4e48\u591a\u6b21\u4e58\u6cd5\uff0c\u8fd8\u4e0d\u5982\u539f\u6765\u7b97\u52a0\u6cd5\u5feb\u5462\uff0c\u4f60\u4eec\u8fd8\u662f\u653e\u4e86\u6211\u627e\u522b\u4eba\u5427......\u201d \u4e03\u3001\u5feb\u901f\u5e42 \u00b6 \u77e9\u9635n\u6b21\u5e42\uff0c\u5982\u679c\u80fd\u5feb\u901f\u7b97\u51fa\u6765\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5c31\u8fbe\u5230\u4e86\u3002\u5e78\u8fd0\u7684\u662f\u529e\u6cd5\u5f88\u7b80\u5355\uff0c\u4e5f\u8bb8\u5bf9\u4e8e\u77e9\u9635\u6765\u8bf4\u8fd9\u662f\u4e0d\u5e78\u7684^\u2006_\u2006^\u3002 \u5148\u770b\u770b\u6574\u6570\u7684\u5e42\u600e\u4e48\u7b97\u3002\u666e\u901a\u65b9\u6cd5\u7528\u5faa\u73af\u4e58\uff0c\u5f53\u7136\u5f88\u6162\u6570\u636e\u4e0a\u4e861\u4ebf\u5c31\u4e0d\u80fd\u79d2\u51fa\u4e86\u3002\u7528\u521d\u4e2d\u6570\u5b66\u77e5\u8bc6\u628a\u505a\u6cd5\u7a0d\u5fae\u6539\u4e00\u4e0b\u5373\u53ef: \u5047\u8bben\u662f\u5076\u6570\uff0cA^n = (AA)^(n/2) \u82e5n\u662f\u5947\u6570\uff0cA^n = AxA(n-1)\uff0cn-1\u80af\u5b9a\u662f\u5076\u6570\uff0c\u6240\u4ee5A^n = Ax(AA)^((n-1)/2) \u6839\u636e\u4e0a\u8ff0\u539f\u7406\uff0c\u4e00\u6b21\u4e58\u6cd5\u8fd0\u7b97\u5c06\u5e95\u6570\u53d8\u6210\u539f\u6765\u7684\u5e73\u65b9\uff0c\u5c31\u80fd\u628a\u5e42\u51cf\u5c111\u534a\uff0c\u6548\u7387\u975e\u5e38\u9ad8\uff0c\u518d\u5927\u7684\u6570\uff0c\u4e5f\u7ecf\u4e0d\u8d77\u51e0\u6b21\u51cf\u534a\u554a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4eceO(n)\u964d\u5230O(logn)\u3002 \u4ee3\u7801\u4e5f\u5f88\u7b80\u5355\uff0c\u8bf7\u8fd0\u884c\u5e76\u4f53\u9a8c\u4e00\u4e0b\u5b83\u7684\u5a01\u529b\uff1a #include <cstdio> typedef long long ll ; ll fastpow ( ll base , ll p , int k ){ //\u5feb\u901f\u5e42\uff0c\u7ed3\u679c\u5bf9k\u53d6\u6a21 ll ret = 1 ; while ( p > 0 ){ if ( p & 1 ){ //\u5947\u6570,\u76f8\u5f53\u4e8ep % 2 == 1 ret = ret * base % k ; } base = base * base % k ; //\u5e95\u6570\u53d8\u6210\u539f\u6765\u7684\u5e73\u65b9 p >>= 1 ; //\u76f8\u5f53\u4e8ep /= 2\uff0c\u6307\u6570\u51cf\u534a } return ret % k ; } int main (){ printf ( \"%lld\" , fastpow ( 3 , 8888888880000088 , 100000007 )); return 0 ; } \u516b\u3001\u77e9\u9635\u5feb\u901f\u5e42 \u00b6 \u8fd9\u4e0b\u77e9\u9635\u5148\u751f\u518d\u4e5f\u8eb2\u4e0d\u6389\u4e86\uff0c\u4e56\u4e56\u5730\u5e72\u6d3b\u5427\u3002\u5feb\u901f\u5e42\u540c\u6837\u9002\u7528\u4e8e\u77e9\u9635\uff0c\u56e0\u4e3a\u884c\u548c\u5217\u5927\u5c0f\u76f8\u7b49\u7684\u77e9\u9635\uff08\u65b9\u9635\uff09\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u7387\u3002\u4ee3\u7801\u5982\u4e0b\uff1a #include <cstdio> #include <cstring> #define MOD 1000000007 using namespace std ; typedef long long ll ; /* \u4ece[f(i-2), f(i-1)]\u8f6c\u79fb\u5230[f(i-1), f(i)] \u8fd9\u662f\u4e00\u4e2a1x2\u7684\u77e9\u9635\uff0c\u4e58\u4e00\u4e2a2x2\u7684\u52a0\u901f\u77e9\u9635\uff0c\u5c31\u53d8\u6210\u4e00\u4e2a\u65b0\u76841x2\u77e9\u9635 \u52a0\u901f\u77e9\u9635\u662f 0 1 1 1 */ ll n ; struct Mx { ll v [ 2 ][ 2 ]; int n , m ; //\u884c\uff0c\u5217 Mx ( int rows , int cols ) : n ( rows ), m ( cols ){ //\u6784\u9020\u51fd\u6570 memset ( v , 0 , sizeof ( v )); } Mx operator * ( const Mx & r ){ //\u91cd\u8f7d\u4e58\u6cd5\u8fd0\u7b97\u7b26\uff0c\u4e3a\u4e86\u4ee3\u7801\u4e66\u5199\u65b9\u4fbf Mx ret ( n , r . m ); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < r . m ; j ++ ){ for ( int k = 0 ; k < m ; k ++ ){ //\u6b64\u5904\u6ce8\u610fk\u7684\u5faa\u73af\u653e\u5728\u6700\u5185\u5c42\uff0c\u6709\u52a9\u4e8ecpu\u7f13\u5b58\u547d\u4e2d\uff0c\u52a0\u5feb\u8fd0\u7b97\u901f\u5ea6\uff0c\u653e\u5728\u6700\u5916\u5c42\u7ed3\u679c\u6b63\u786e\uff0c\u4f46\u901f\u5ea6\u6162\u3002 ret . v [ i ][ j ] = ( ret . v [ i ][ j ] + ( v [ i ][ k ] * r . v [ k ][ j ] % MOD )) % MOD ; } } } return ret ; } } ans ( 1 , 2 ), rush ( 2 , 2 ); ll calc ( ll t ){ if ( t == 1 || t == 2 ){ return 1 ; } t -= 3 ; //\u77e9\u9635\u4e58t\u6b21\uff0cbase\u7684t\u6b21\u65b9 ans . v [ 0 ][ 0 ] = ans . v [ 0 ][ 1 ] = 1 ; //\u5c06\u7ed3\u679c\u77e9\u9635\u521d\u59cb\u5316\u4e3a[1, 1]\uff0cn\u4ece1\u5f00\u59cb\u7b97 rush . v [ 0 ][ 1 ] = rush . v [ 1 ][ 0 ] = rush . v [ 1 ][ 1 ] = 1 ; //\u521d\u59cb\u5316\u52a0\u901f\u77e9\u9635\uff0c\u7b2c\u4e00\u52170\uff0c1\uff1b\u7b2c\u4e8c\u52171\uff0c1 Mx trans = rush ; while ( t > 0 ){ if ( t & 1 ){ trans = trans * rush ; } rush = rush * rush ; t >>= 1 ; } ans = ans * trans ; return ans . v [ 0 ][ 1 ]; } int main (){ scanf ( \"%lld\" , & n ); printf ( \"%lld \\n \" , calc ( n )); return 0 ; }","title":"\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5feb\u901f\u5e42\uff0c\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/#_1","text":"\u5165\u95e8\u7ea7\u601d\u7ef4\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u65ad\u8c03\u7528\u81ea\u5df1\u5373\u53ef\u3002\u4f18\u70b9\u662f\u4e66\u5199\u7b80\u5355\uff0c\u7f3a\u70b9\u662f\u6548\u7387\u6781\u4f4e\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u91cd\u590d\u8ba1\u7b97\uff0c\u6bd4\u5982\u8981\u8ba1\u7b97f(6)\uff0c\u9700\u8ba1\u7b97f(5)+f(4)\uff0c\u5148\u7b97f(5)\uff0c\u4e2d\u9014\u8ba1\u7b97\u4e00\u6b21f(4)\uff0c\u518d\u7b97f(4)\uff0c\u53c8\u7b97\u4e86\u4e00\u6b21\u3002 int f ( int n ){ return n < 2 ? n : f ( n -1 ) + f ( n -2 ); }","title":"\u4e00\u3001\u9012\u5f52"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/#_2","text":"\u8bb0\u5fc6\u5316\u4e5f\u662f\u7b97\u6cd5\u7684\u4e00\u4e2a\u57fa\u672c\u6280\u80fd\uff0c\u4e0a\u9762\u7684\u505a\u6cd5\u65e2\u7136\u4f1a\u91cd\u590d\u8ba1\u7b97\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u7b97\u51fa\u6765f(i)\u7684\u65f6\u5019\uff0c\u628a\u5b83\u4fdd\u5b58\uff08\u8bb0\u5fc6\uff09\u8d77\u6765\uff0c\u4e0b\u6b21\u9700\u8981\u7684\u65f6\u5019\u76f4\u63a5\u53d6\u51fa\uff0c\u52a0\u5feb\u901f\u5ea6\u3002 int a [ 40 ]; int f ( int n ){ if ( n < 2 ) return n ; if ( a [ n ] > 0 ) return a [ n ]; //\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86,\u76f4\u63a5\u8fd4\u56de else return a [ n ] = f ( n -1 ) + f ( n -2 ); //\u6ca1\u6709\u7b97\u8fc7\uff0c\u5148\u7b97\uff0c\u7136\u540e\u4fdd\u5b58\u8d77\u6765\uff0c\u6700\u540e\u8fd4\u56de\u3002 }","title":"\u4e8c\u3001\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/#_3","text":"\u5229\u7528\u5faa\u73af\uff0c\u76f4\u63a5\u6839\u636e\u524d\u4e24\u9879\u7b97\u51faf(n)\uff0c\u6548\u7387\u548c\u8bb0\u5fc6\u8bdd\u641c\u7d22\u4e00\u6837\uff0c\u53bb\u6389\u4e86\u9012\u5f52\u3002\u6b64\u5904\u8574\u542b\u4e86\u521d\u7ea7\u7684\u52a8\u6001\u89c4\u5212\u601d\u60f3\uff0c\u7528\u524d\u9762\u5df2\u4f5c\u51fa\u7684\u51b3\u7b56\uff0c\u51b3\u5b9a\u5f53\u524d\u8981\u91c7\u53d6\u7684\u51b3\u7b56\uff0c\u5f53\u524d\u91c7\u53d6\u7684\u51b3\u7b56\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u540e\u9762\u51b3\u7b56\u7684\u6b63\u786e\u6027\u3002 int a [ 40 ] = { 0 , 1 }; int f ( int n ){ if ( n < 2 ) return n ; for ( int i = 2 ; i <= n ; i ++ ){ a [ i ] = a [ i -1 ] + a [ i -2 ]; } return a [ n ]; }","title":"\u4e09\u3001\u5faa\u73af\uff0c\u52a8\u6001\u89c4\u5212\u542f\u8499"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/#_4","text":"\u4e0a\u9762\u7684\u7a0b\u5e8f\u53ea\u5bf9n\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u6709\u6548\uff0c\u5982\u679c\u8ba1\u7b97f(47)\uff0c\u5c31\u53d1\u751f\u6ea2\u51fa\uff0c\u56e0\u4e3a\u7ed3\u679c\u6bd4int\u7c7b\u578b\u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u8fd8\u5927\u3002int\u662f32\u4f4d\u7684\uff0c\u6700\u5927\u80fd\u8868\u793a2^31-1\uff0c\u5927\u6982\u662f20\u591a\u4ebf\u3002\u53ef\u7528unsigned long long\u5bb9\u7eb3\u66f4\u5927\u7684\u6570\uff0cunsigned long long \u662f64\u4f4d\uff0c\u5e76\u4e14\u6700\u9ad8\u4f4d\u4e5f\u7528\u6765\u8ba1\u6570\uff0c\u6700\u5927\u80fd\u8868\u793a2^64-1\uff0c\u5341\u8fdb\u5236\u662f18446744073709551615\uff0c\u53ef\u4ee5\u7528\u7a0b\u5e8f\u8f93\u51fa\u8fd9\u4e2a\u6570\uff0c\u4f53\u4f1a\u4e00\u4e0b\uff1a #include <cstdio> #include <climits> //\u5e38\u7528\u6570\u636e\u7c7b\u578b\u7684\u6700\u5927\u3001\u6700\u5c0f\u503c\u90fd\u5728\u8fd9\u4e2a\u5934\u6587\u4ef6\u91cc int main (){ printf ( \"%llu\" , ULLONG_MAX ); return 0 ; } 2^64-1\u5bf9\u4e8e\u6590\u6ce2\u7eb3\u5207\u6570\u5217\u8fd9\u6837\u7684\u6307\u6570\u7ea7\u522b\u51fd\u6570\u7684\u589e\u957f\u901f\u5ea6\u6765\u8bf4\uff0c\u4e5f\u4e0d\u7b97\u5f88\u5927,\u5927\u6982f(200)\u5c31\u5feb\u8981\u8d85\u51fa\u53bb\u4e86\u3002","title":"\u56db\u3001\u6574\u6570\u8303\u56f4"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/#_5","text":"n\u518d\u5927\u7684\u8bdd\u600e\u4e48\u529e\uff0c\u4e00\u822c\u9898\u76ee\u8981\u6c42\u8ba1\u7b97\u7ed3\u679c\u5bf9\u4e00\u4e2a\u5f88\u5927\u7684\u6570M\uff08\u6bd4\u59821e8+7\uff0c100000007\uff09\u6c42\u6a21\uff0c\u6c42\u6a21\u4ee5\u540e\u7ed3\u679c\u603b\u4f1a\u5c0f\u4e8eM\u3002\u5173\u4e8e\u6c42\u6a21\u6709\u4e24\u4e2a\u91cd\u8981\u516c\u5f0f\u9700\u8981\u8bb0\u4f4f\uff1a (a+b)%c = (a %c + b%c)%c (ab)%c = ((a%c) * (b%c))%c \u52a0\u5165\u6a21\u8fd0\u7b97\u4ee5\u540e\uff0cn\u5f88\u5927\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u6c42\u4e86\uff0c\u628a\u5faa\u73af\u4ee3\u7801\u6539\u4e00\u4e0b\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u7528\u5f88\u5927\u7684\u6570\u7ec4\u8bb0\u5f55\u6240\u67090-n\u7684\u7ed3\u679c\uff0c\u53ea\u9700\u89812\u4e2a\u5143\u7d20\u5c31\u591f\u4e86\uff1a #include <cstdio> #define MOD 1000000007 typedef long long ll ; ll a [ 2 ] = { 0 , 1 }; ll f ( int n ){ if ( n < 2 ) return n ; for ( int i = 2 ; i <= n ; i ++ ){ ll tmp = ( a [ 0 ] + a [ 1 ]) % MOD ; a [ 0 ] = a [ 1 ]; a [ 1 ] = tmp ; } return a [ 1 ]; } int main (){ printf ( \"%lld\" , f ( 200000000 )); return 0 ; }","title":"\u4e94\u3001\u6a21"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/#_6","text":"\u4e0a\u9762\u7684\u4ee3\u7801\u5f53n\u572810\u4ebf\u8303\u56f4\u5185\u52c9\u5f3a\u80fd\u7b97\u51fa\u6765\uff0c\u518d\u5927\u7684\u8bdd\u5c31\u5f88\u65e0\u529b\u4e86\u3002\u56e0\u4e3a\u590d\u6742\u5ea6\u662fO(n)\uff0c\u53ea\u7528\u7b80\u5355\u7684\u624b\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4f18\u5316\u7684\u7a7a\u95f4\u4e86\uff0c\u8981\u60f3\u52a0\u901f\u5fc5\u987b\u7528\u5176\u5b83\u529e\u6cd5\u3002\u529e\u6cd5\u5c31\u662f\u5229\u7528\u77e9\u9635\u4e58\u6cd5\u3002\u77e9\u9635\u4e58\u6cd5\u8fd0\u7b97\u89c4\u5219\u6b64\u5904\u5c31\u4e0d\u5c55\u5f00\u4e86\uff0c\u5b66\u4e60\u8d44\u6e90\u968f\u5904\u53ef\u89c1\u3002 \u77e9\u9635\u8c61\u9c81\u8fc5\u5148\u751f\u4e00\u6837\u88c5\u4f5c\u5f88\u65e0\u8f9c\uff1a\u201c\u4f60\u7b97\u6590\u6ce2\u7eb3\u5207\u6570\u5217\uff0c\u548c\u6211\u77e9\u9635\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\uff1f\uff1f\u201d \u6211\u4eec\u5148\u4e0d\u7ba1\u77e9\u9635\u5148\u751f\u7684\u6297\u8bae\uff0c\u8bd5\u5b9a\u4e49\u6570\u5217\u521d\u59cb\u503c\u662f\u4e00\u4e2a1*2\uff081\u884c\uff0c2\u5217\uff09\u7684\u77e9\u9635\uff0c\u8868\u793a[f(0),f(1)]\uff0c\u5982\u679c\u8fd9\u4e2a\u77e9\u9635\u4e58\u4ee5\u53e6\u5916\u4e00\u4e2a\u77e9\u9635\uff0c\u7ed3\u679c\u80fd\u53d8\u6210[f(1),f(2)]\uff0c\u518d\u4e58\u4e00\u6b21\uff0c\u53d8\u6210[f(2),f(3)]\uff0c\u663e\u7136\u4e58\u4e0an-1\u6b21\uff0c\u7ed3\u679c\u5c31\u53d8\u6210\u4e86[f(n-1),f(n)]\u3002\u628a\u8fd9\u4e2a\u5f0f\u5b50\u4e00\u822c\u5316\uff0c\u5373[f(i-2),f(i-1)] xA = [f(i-1),f(i)]\uff0c\u6839\u636e\u77e9\u9635\u4e58\u6cd5\u5b9a\u4e49\uff0cA\u663e\u7136\u662f\u4e00\u4e2a2x2\u7684\u77e9\u9635\uff0c\u7b2c\u4e00\u5217\u662f0\uff0c1\uff1b\u7b2c\u4e8c\u5217\u662f1\uff0c1\uff0c\u4e58\u5b8c\u4ee5\u540e\uff0c\u7b2c\u4e00\u5217\u662ff(i-2)x0+f(i-1)x1\uff0c\u5373f(i-1)\uff1b\u7b2c\u4e8c\u5217\u662ff(i-2)x1+f(i-1)x1\uff0c\u6b63\u597d\u662ff(i)\u3002 \u7ed3\u8bba\u662f\uff1a[f(n-1),f(n)] = [f(0),f(1)] x A^(n-1)\uff0c[f(n-1),f(n)] \u7b49\u4e8e[f(0),f(1)] \u4e58\u4ee5A\u7684n-1\u6b21\u5e42\u3002 \u77e9\u9635\u518d\u6b21\u88c5\u65e0\u8f9c\uff1a\u201c\u8fd9\u6837\u4e5f\u6ca1\u7528\uff0c\u7b97\u8fd9\u4e48\u591a\u6b21\u4e58\u6cd5\uff0c\u8fd8\u4e0d\u5982\u539f\u6765\u7b97\u52a0\u6cd5\u5feb\u5462\uff0c\u4f60\u4eec\u8fd8\u662f\u653e\u4e86\u6211\u627e\u522b\u4eba\u5427......\u201d","title":"\u516d\u3001\u77e9\u9635\u4e58\u6cd5\u8f85\u52a9\u8f6c\u79fb"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/#_7","text":"\u77e9\u9635n\u6b21\u5e42\uff0c\u5982\u679c\u80fd\u5feb\u901f\u7b97\u51fa\u6765\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5c31\u8fbe\u5230\u4e86\u3002\u5e78\u8fd0\u7684\u662f\u529e\u6cd5\u5f88\u7b80\u5355\uff0c\u4e5f\u8bb8\u5bf9\u4e8e\u77e9\u9635\u6765\u8bf4\u8fd9\u662f\u4e0d\u5e78\u7684^\u2006_\u2006^\u3002 \u5148\u770b\u770b\u6574\u6570\u7684\u5e42\u600e\u4e48\u7b97\u3002\u666e\u901a\u65b9\u6cd5\u7528\u5faa\u73af\u4e58\uff0c\u5f53\u7136\u5f88\u6162\u6570\u636e\u4e0a\u4e861\u4ebf\u5c31\u4e0d\u80fd\u79d2\u51fa\u4e86\u3002\u7528\u521d\u4e2d\u6570\u5b66\u77e5\u8bc6\u628a\u505a\u6cd5\u7a0d\u5fae\u6539\u4e00\u4e0b\u5373\u53ef: \u5047\u8bben\u662f\u5076\u6570\uff0cA^n = (AA)^(n/2) \u82e5n\u662f\u5947\u6570\uff0cA^n = AxA(n-1)\uff0cn-1\u80af\u5b9a\u662f\u5076\u6570\uff0c\u6240\u4ee5A^n = Ax(AA)^((n-1)/2) \u6839\u636e\u4e0a\u8ff0\u539f\u7406\uff0c\u4e00\u6b21\u4e58\u6cd5\u8fd0\u7b97\u5c06\u5e95\u6570\u53d8\u6210\u539f\u6765\u7684\u5e73\u65b9\uff0c\u5c31\u80fd\u628a\u5e42\u51cf\u5c111\u534a\uff0c\u6548\u7387\u975e\u5e38\u9ad8\uff0c\u518d\u5927\u7684\u6570\uff0c\u4e5f\u7ecf\u4e0d\u8d77\u51e0\u6b21\u51cf\u534a\u554a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4eceO(n)\u964d\u5230O(logn)\u3002 \u4ee3\u7801\u4e5f\u5f88\u7b80\u5355\uff0c\u8bf7\u8fd0\u884c\u5e76\u4f53\u9a8c\u4e00\u4e0b\u5b83\u7684\u5a01\u529b\uff1a #include <cstdio> typedef long long ll ; ll fastpow ( ll base , ll p , int k ){ //\u5feb\u901f\u5e42\uff0c\u7ed3\u679c\u5bf9k\u53d6\u6a21 ll ret = 1 ; while ( p > 0 ){ if ( p & 1 ){ //\u5947\u6570,\u76f8\u5f53\u4e8ep % 2 == 1 ret = ret * base % k ; } base = base * base % k ; //\u5e95\u6570\u53d8\u6210\u539f\u6765\u7684\u5e73\u65b9 p >>= 1 ; //\u76f8\u5f53\u4e8ep /= 2\uff0c\u6307\u6570\u51cf\u534a } return ret % k ; } int main (){ printf ( \"%lld\" , fastpow ( 3 , 8888888880000088 , 100000007 )); return 0 ; }","title":"\u4e03\u3001\u5feb\u901f\u5e42"},{"location":"datastructure/matrix/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/#_8","text":"\u8fd9\u4e0b\u77e9\u9635\u5148\u751f\u518d\u4e5f\u8eb2\u4e0d\u6389\u4e86\uff0c\u4e56\u4e56\u5730\u5e72\u6d3b\u5427\u3002\u5feb\u901f\u5e42\u540c\u6837\u9002\u7528\u4e8e\u77e9\u9635\uff0c\u56e0\u4e3a\u884c\u548c\u5217\u5927\u5c0f\u76f8\u7b49\u7684\u77e9\u9635\uff08\u65b9\u9635\uff09\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u7387\u3002\u4ee3\u7801\u5982\u4e0b\uff1a #include <cstdio> #include <cstring> #define MOD 1000000007 using namespace std ; typedef long long ll ; /* \u4ece[f(i-2), f(i-1)]\u8f6c\u79fb\u5230[f(i-1), f(i)] \u8fd9\u662f\u4e00\u4e2a1x2\u7684\u77e9\u9635\uff0c\u4e58\u4e00\u4e2a2x2\u7684\u52a0\u901f\u77e9\u9635\uff0c\u5c31\u53d8\u6210\u4e00\u4e2a\u65b0\u76841x2\u77e9\u9635 \u52a0\u901f\u77e9\u9635\u662f 0 1 1 1 */ ll n ; struct Mx { ll v [ 2 ][ 2 ]; int n , m ; //\u884c\uff0c\u5217 Mx ( int rows , int cols ) : n ( rows ), m ( cols ){ //\u6784\u9020\u51fd\u6570 memset ( v , 0 , sizeof ( v )); } Mx operator * ( const Mx & r ){ //\u91cd\u8f7d\u4e58\u6cd5\u8fd0\u7b97\u7b26\uff0c\u4e3a\u4e86\u4ee3\u7801\u4e66\u5199\u65b9\u4fbf Mx ret ( n , r . m ); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < r . m ; j ++ ){ for ( int k = 0 ; k < m ; k ++ ){ //\u6b64\u5904\u6ce8\u610fk\u7684\u5faa\u73af\u653e\u5728\u6700\u5185\u5c42\uff0c\u6709\u52a9\u4e8ecpu\u7f13\u5b58\u547d\u4e2d\uff0c\u52a0\u5feb\u8fd0\u7b97\u901f\u5ea6\uff0c\u653e\u5728\u6700\u5916\u5c42\u7ed3\u679c\u6b63\u786e\uff0c\u4f46\u901f\u5ea6\u6162\u3002 ret . v [ i ][ j ] = ( ret . v [ i ][ j ] + ( v [ i ][ k ] * r . v [ k ][ j ] % MOD )) % MOD ; } } } return ret ; } } ans ( 1 , 2 ), rush ( 2 , 2 ); ll calc ( ll t ){ if ( t == 1 || t == 2 ){ return 1 ; } t -= 3 ; //\u77e9\u9635\u4e58t\u6b21\uff0cbase\u7684t\u6b21\u65b9 ans . v [ 0 ][ 0 ] = ans . v [ 0 ][ 1 ] = 1 ; //\u5c06\u7ed3\u679c\u77e9\u9635\u521d\u59cb\u5316\u4e3a[1, 1]\uff0cn\u4ece1\u5f00\u59cb\u7b97 rush . v [ 0 ][ 1 ] = rush . v [ 1 ][ 0 ] = rush . v [ 1 ][ 1 ] = 1 ; //\u521d\u59cb\u5316\u52a0\u901f\u77e9\u9635\uff0c\u7b2c\u4e00\u52170\uff0c1\uff1b\u7b2c\u4e8c\u52171\uff0c1 Mx trans = rush ; while ( t > 0 ){ if ( t & 1 ){ trans = trans * rush ; } rush = rush * rush ; t >>= 1 ; } ans = ans * trans ; return ans . v [ 0 ][ 1 ]; } int main (){ scanf ( \"%lld\" , & n ); printf ( \"%lld \\n \" , calc ( n )); return 0 ; }","title":"\u516b\u3001\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"datastructure/tree/KD-tree/KD-tree/","text":"\u4e00\u3001\u5173\u4e8e\u591a\u7ef4\u67e5\u8be2 \u00b6 1. \u4e00\u7ef4\u67e5\u8be2 \u00b6 \u5047\u8bbe\u8868\u683cT\u50a8\u5b58\u4e86\u5b66\u751f\u7684\u8003\u8bd5\u6210\u7ee9\uff0c\u5982\u4f55\u67e5\u8be2\u5206\u657049\u5206\u4ee5\u4e0a\u7684\u5b66\u751f? \u5982\u679c\u4f7f\u7528\u904d\u5386\u7684\u65b9\u5f0f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u4e86 \u3002 \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u53ef\u4ee5\u4f7f\u7528 \u5e73\u8861\u4e8c\u53c9\u6811 \u7684\u65b9\u5f0f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u3002 2. \u4e8c\u7ef4\u67e5\u8be2 \u00b6 \u5047\u8bbe\u8868\u683cT\u50a8\u5b58\u4e86\u5b66\u751f\u7684\u8bed\u6587\u548c\u6570\u5b66\u8003\u8bd5\u6210\u7ee9\uff0c\u5982\u679c\u67e5\u8be2\u8bed\u6587\u6210\u7ee9\u4ecb\u4e8e30\uff5e93\uff0c\u6570\u5b66\u6210\u7ee9\u4ecb\u4e8e30\uff5e90\u7684\u5b66\u751f\uff1f \u5982\u679c\u7ee7\u7eed\u4f7f\u7528\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\uff0c\u5219\u9700\u8981\u9996\u5148\u5206\u522b\u83b7\u5f97\u8bed\u6587\u6210\u7ee9\u548c\u6570\u5b66\u6210\u7ee9\u7684\u96c6\u5408\uff0c\u518d\u7b97\u51fa\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u9645\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u3002 \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4fdd\u6301\u5728 \u6c34\u5e73\uff1a 1) \u6839\u636e\u8bed\u6587\u6210\u7ee9\u5c06\u6240\u6709\u4eba\u7684\u6210\u7ee9\u5206\u6210\u4e24\u534a\uff0c\u5176\u4e2d\u4e00\u534a\u7684\u8bed\u6587\u6210\u7ee9<=c1\uff0c\u53e6\u4e00\u534a\u7684\u8bed\u6587\u6210\u7ee9>c1\uff0c\u5206\u522b\u5f97\u5230\u96c6\u5408S1,S2; 2) \u9488\u5bf9S1\uff0c\u6839\u636e\u6570\u5b66\u6210\u7ee9\u5206\u4e3a\u4e24\u534a\uff0c\u5176\u4e2d\u4e00\u534a\u7684\u6570\u5b66\u6210\u7ee9<=m1,\u53e6\u4e00\u534a\u7684\u6570\u5b66\u6210\u7ee9>m1\uff0c\u5206\u522b\u5f97\u5230S3,S4; 3) \u9488\u5bf9S2\uff0c\u6839\u636e\u6570\u5b66\u6210\u7ee9\u5206\u4e3a\u4e24\u534a\uff0c\u5176\u4e2d\u4e00\u534a\u7684\u6570\u5b66\u6210\u7ee9<=m2,\u53e6\u4e00\u534a\u7684\u6570\u5b66\u6210\u7ee9>m2\uff0c\u5206\u522b\u5f97\u5230S5,S6\uff1b 4) \u6839\u636e\u8bed\u6587\u6210\u7ee9\u5206\u522b\u5bf9S3,S4\uff0cS5,S6\u7ee7\u7eed\u6267\u884c\u7c7b\u4f3c\u5212\u5206\u5f97\u5230\u66f4\u5c0f\u7684\u96c6\u5408\uff0c\u7136\u540e\u518d\u5728\u66f4\u5c0f\u7684\u96c6\u5408\u4e0a\u6839\u636e\u6570\u5b66\u6210\u7ee9\u7ee7\u7eed \u901a\u8fc7\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u5c31\u751f\u6210\u4e86\u4e00\u9897kd\u6811: \u4e8c\u3001\u5173\u4e8eKD\u6811 \u00b6 1. \u5173\u4e8eKD\u6811 \u00b6 KD\u6811(K-dimensional tree\uff0ck\u7ef4\u6811)\uff0c\u662f\u4e00\u79cd\u9ad8\u4f4d\u7d22\u5f15\u6811\u5f62\u6570\u636e\u7ed3\u6784\u3002 KD\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662fk\u7ef4\u70b9\u7684\u4e8c\u53c9\u6811\u3002 \u6240\u6709\u975e\u53f6\u8282\u70b9\u90fd\u53ef\u4ee5\u770b\u6210\u7528\u4e00\u4e2a\u8d85\u5e73\u9762\u628a\u7a7a\u95f4\u5206\u533a\u6210\u4e24\u4e2a \u534a\u7a7a\u95f4\u3002 \u8282\u70b9\u5de6\u5b50\u6811\u4ee3\u8868\u5728\u8d85\u5e73\u9762\u5de6\u8fb9\u7684\u70b9\uff0c\u53f3\u5b50\u6811\u4ee3\u8868\u53f3\u8fb9\u7684\u70b9\u3002 2. \u8d85\u5e73\u9762\u7684\u9009\u62e9\u65b9\u6cd5 \u00b6 \u6bcf\u4e2a\u8282\u70b9\u90fd\u4e0ek\u7ef4\u4e2d\u5782\u76f4\u4e8e\u8d85\u5e73\u9762\u7684\u90a3\u4e00\u7ef4\u6709\u5173\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u9009\u62e9\u6309\u7167x\u8f74\u5212\u5206\uff0c\u6240\u6709x\u503c\u5c0f\u4e8e\u6307\u5b9a\u503c\u7684\u7ed3\u70b9\u90fd\u4f1a\u51fa\u73b0\u5728\u5de6\u5b50\u6811\uff0c\u5927\u4e8e\u7684\u90fd\u4f1a\u51fa\u73b0\u5728\u53f3\u5b50\u6811\u3002 \u8fd9\u6837\uff0c\u8d85\u5e73\u9762\u53ef\u4ee5\u7528x\u503c\u6765\u5708\u5b9a\uff0c\u5176\u6cd5\u7ebf\u4e3ax\u8f74\u7684\u5355\u4f4d\u5411\u91cf\u3002 \u4e09\u3001KD\u6811\u7684\u7b97\u6cd5 \u00b6 1. \u6784\u9020 \u00b6 \u5faa\u73af\u4f9d\u5e8f\u53d6\u6570\u636e\u70b9\u7684\u5404\u7ef4\u5ea6\u6765\u4f5c\u4e3a\u5207\u5206\u7ef4\u5ea6; \u7ef4\u5ea6\u9009\u62e9 \u63cf\u8ff0 \u5207\u5206\u7ef4\u5ea6\u9009\u62e9\u4f18\u5316 - \u6784\u5efa\u5f00\u59cb\u524d\uff0c\u5bf9\u6bd4\u6570\u636e\u70b9\u5728\u5404\u7ef4\u5ea6\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u6570\u636e\u70b9\u5728\u67d0\u4e00\u7ef4\u5ea6\u5750\u6807\u503c\u7684\u65b9\u5dee\u8d8a\u5927\u5206\u5e03\u8d8a\u5206\u6563\uff0c\u65b9\u5dee\u8d8a\u5c0f\u5206\u5e03\u8d8a\u96c6\u4e2d\u3002 - \u4ece\u65b9\u5dee\u5927\u7684\u7ef4\u5ea6\u5f00\u59cb\u5207\u5206\u53ef\u4ee5\u53d6\u5f97\u5f88\u597d\u7684\u5207\u5206\u6548\u679c\u53ca\u5e73\u8861\u6027\u3002 \u4e2d\u503c\u9009\u62e9\u4f18\u5316(a) - \u7b97\u6cd5\u5f00\u59cb\u524d\uff0c\u5bf9\u539f\u59cb\u6570\u636e\u70b9\u5728\u6240\u6709\u7ef4\u5ea6\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\uff0c\u5b58\u50a8\u4e0b\u6765\u3002 - \u5728\u540e\u7eed\u7684\u4e2d\u503c\u9009\u62e9\u4e2d\uff0c\u65e0\u987b\u6bcf\u6b21\u90fd\u5bf9\u5176\u5b50\u96c6\u8fdb\u884c\u6392\u5e8f\uff0c\u63d0\u5347\u4e86\u6027\u80fd\u3002 \u4e2d\u503c\u9009\u62e9\u4f18\u5316(b) - \u4ece\u539f\u59cb\u6570\u636e\u70b9\u4e2d\u968f\u673a\u9009\u62e9\u56fa\u5b9a\u6570\u76ee\u7684\u70b9\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u3002 - \u6bcf\u6b21\u4ece\u8fd9\u4e9b\u6837\u672c\u70b9\u4e2d\u53d6\u4e2d\u503c\uff0c\u6765\u4f5c\u4e3a\u5206\u5272\u8d85\u5e73\u9762\u3002 - \u8be5\u65b9\u5f0f\u5728\u5b9e\u8df5\u4e2d\u88ab\u8bc1\u660e\u53ef\u4ee5\u53d6\u5f97\u5f88\u597d\u6027\u80fd\u53ca\u5f88\u597d\u7684\u5e73\u8861\u6027\u3002 \u53d6\u6570\u636e\u70b9\u5728\u8be5\u7ef4\u5ea6\u7684\u4e2d\u503c\u4f5c\u4e3a\u5207\u5206\u8d85\u5e73\u9762; \u5c06\u4e2d\u503c\u5de6\u4fa7\u7684\u6570\u636e\u70b9\u6302\u5728\u5176\u5de6\u5b50\u6811\uff0c\u5c06\u4e2d\u503c\u53f3\u4fa7\u7684\u6570\u636e\u70b9\u6302\u5728\u5176\u53f3\u5b50\u6811; \u9012\u5f52\u5904\u7406\u5176\u5b50\u6811\uff0c\u76f4\u81f3\u6240\u6709\u6570\u636e\u70b9\u6302\u8f7d\u5b8c\u6bd5\u3002 template < class T > void KDTree < T >:: BuildKDTree ( vector < vector < T >> points , Node < T >* root ) { int indexpart = 0 , max = 0 ; vector < T > temp ; for ( st i = 0 ; i < _k ; i ++ ) { temp . clear (); for each ( auto var in points ) { temp . push_back ( var [ i ]); } double ave = accumulate ( temp . begin (), temp . end (), 0.0 ) / _point_num ; // \u5e73\u5747\u503c double accum = 0.0 ; for each ( auto var in temp ) { accum += ( var - ave ) * ( var - ave ); //todo:\u65b9\u5dee } if ( accum > max ) { max = int ( accum ); indexpart = int ( i ); } } //\u6b64\u65f6indexpart\u4e3a\u8981\u8fdb\u884c\u7684\u5206\u88c2\u7ef4\u6570 temp . clear (); for each ( auto var in points ) { temp . push_back ( var [ indexpart ]); } //\u627e\u5230\u4e2d\u503c; sort ( temp . begin (), temp . end ()); double median = temp [( temp . size ()) >> 1 ]; //\u5c06\u70b9\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206 vector < vector < T >> leftpoints , rightpoints ; for each ( auto var in points ) { if ( var [ indexpart ] < median ) { leftpoints . push_back ( var ); } if ( var [ indexpart ] == median ) { root -> m_split = indexpart + 1 ; root -> m_point = var ; } if ( var [ indexpart ] > median ) { rightpoints . push_back ( var ); } } //\u9012\u5f52 if ( leftpoints . size () == 0 && rightpoints . size () == 0 ) { root -> is_leaf = true ; } if ( leftpoints . size () != 0 ) { root -> lc = new Node < T > (); root -> lc -> parent = root ; BuildKDTree ( leftpoints , root -> lc ); } if ( rightpoints . size () != 0 ) { root -> rc = new Node < T > (); root -> rc -> parent = root ; BuildKDTree ( rightpoints , root -> rc ); } } 2. \u8303\u56f4\u67e5\u8be2 \u00b6 \u5bf9\u4e8e\u4efb\u4e00\u77e9\u5f62\u67e5\u8be2\u533a\u57dfR\uff0c\u67e5\u8be2\u8fc7\u7a0b\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u6309\u5982\u4e0b\u65b9\u5f0f\u9012\u5f52\uff1a 1) \u5728\u4efb\u610f\u8282\u70b9v\u5904\uff0c\u82e5\u5b50\u6811v\u4ec5\u542b\u5355\u4e2a\u8282\u70b9\uff0c\u5219\u610f\u5473\u7740\u77e9\u9635\u533a\u57dfv\u4e2d\u4ec5\u8986\u76d6\u5355\u4e2a\u8f93\u5165\u70b9\uff0c\u6b64\u65f6\u53ef\u76f4\u63a5\u5224\u65ad\u8be5\u70b9\u662f\u5426\u843d\u5728R\u5185\u3002 2) \u5426\u5219\uff0c\u5219\u5047\u5b9a\u77e9\u5f62\u533a\u57dfv\u4e2d\u5305\u542b\u591a\u4e2a\u8f93\u5165\u70b9,\u8fd9\u65f6\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a a) \u82e5\u77e9\u5f62\u533a\u57dfv\u5b8c\u5168\u5305\u542b\u4e8eR\u5185\uff0c\u5219\u5176\u4e2d\u6240\u6709\u7684\u8f93\u5165\u70b9\u5747\u843d\u5728R\u5185\uff0c\u53ea\u9700\u8981\u904d\u5386\u5b50\u6811v,\u5373\u53ef\u62a5\u544a\u8fd9\u90e8\u5206\u8f93\u5165\u70b9\u3002 **b)**\u82e5\u4e8c\u8005\u76f8\u4ea4\uff0c\u5219\u6709\u5fc5\u8981\u5206\u522b\u8f93\u5165\u5230v\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e2d\uff0c\u7ee7\u7eed\u9012\u5f52\u67e5\u8be2\u3002 **c)**\u82e5\u4e8c\u8005\u5f7c\u6b64\u5206\u79bb\uff0c\u5219\u5b50\u96c6v\u4e2d\u7684\u70b9\u4e0d\u53ef\u80fd\u843d\u5728R\u5185\uff0c\u9012\u5f52\u5206\u652f\u7ec8\u6b62\u3002 template < class T > void KDTree < T >:: SearchRecu ( vector < T > from , vector < T > to , const Node < T >* temp , vector < vector < T >>& nodes ) const { if ( temp == nullptr ) return ; // \u5982\u679c\u662f\u7a7a\u6811 int partindex = temp -> m_split - 1 ; // \u5f53\u524d\u7ef4\u5ea6 int value = temp -> m_point [ partindex ]; if ( from [ partindex ] <= value && to [ partindex ] >= value ) //\u70b9\u5728\u8303\u56f4\u5185 { bool in_region = true ; for ( st i = 0 ; i < _k ; i ++ ) { if ( from [ i ] > temp -> m_point [ i ] || to [ i ] < temp -> m_point [ i ]) { in_region = false ; } } if ( in_region ) { nodes . push_back ( temp -> m_point ); } SearchRecu ( from , to , temp -> lc , nodes ); SearchRecu ( from , to , temp -> rc , nodes ); } else if ( value > to [ partindex ]) { SearchRecu ( from , to , temp -> lc , nodes ); } else if ( value < from [ partindex ]) { SearchRecu ( from , to , temp -> rc , nodes ); } } \u4e09. \u5b9e\u73b0KD\u6811 \u00b6 1. \u8282\u70b9\u7ed3\u6784 \u00b6 template < class T > struct Node { bool is_leaf ; vector < T > m_point ; //k\u7ef4\u7684\u70b9 int m_split ; //\u88ab\u5206\u5f00\u7684\u7ef4\u5ea6 Node * parent ; Node * lc ; Node * rc ; }; 2. \u6811\u7ed3\u6784 \u00b6 template < class T > class KDTree { public : KDTree ( int k , vector < vector < T >> allpoints ); //\u6784\u9020\u51fd\u6570 ~ KDTree () {}; //\u6790\u6784\u51fd\u6570 void Insert ( vector < T > newpoint ); //\u63d2\u5165\u7ed3\u70b9 vector < vector < T >> SearchByRegion ( vector < T > from , vector < T > to ) const ; // \u67e5\u627e\u533a\u57df vector < T > SearchNearestNode ( vector < T > goalpoint ); //\u67e5\u627e\u79bb\u76ee\u6807\u6700\u8fd1\u7684\u7ed3\u70b9 private : void BuildKDTree ( vector < vector < T >> points , Node < T >* root ); //\u521b\u9020\u6811 void SearchNearestByTree ( vector < T > goalpoint , T & curdis , const Node < T >* treeroot , vector < T >& nearestpoint ); //\u5bfb\u627e\u4e0e\u76ee\u6807\u70b9\u6700\u8fd1\u7684\u70b9 void SearchRecu ( vector < T > from , vector < T > to , const Node < T >* temp , vector < vector < T >>& nodes ) const ; //\u67e5\u627e\u533a\u57df\u5185\u7684\u70b9 T CalDistance ( vector < T > point1 , vector < double > point2 ); //\u8ba1\u7b97\u8ddd\u79bb private : Node < T >* _root ; //\u6839\u8282\u70b9 int _k ; //\u7ef4\u5ea6 int _point_num ; //\u70b9\u7684\u6570\u91cf vector < vector < T >> points ; //\u70b9\u7684\u96c6\u5408 }; 3. \u65b9\u6cd5\u5b9e\u73b0 \u00b6 template < class T > //\u6784\u9020\u51fd\u6570 KDTree < T >:: KDTree ( int k , vector < vector < T >> allpoints ) : _k ( k ) { _root = new Node < T > (); _root -> is_leaf = false ; _root -> lc = nullptr ; _root -> rc = nullptr ; _point_num = int ( allpoints . size ()); points = allpoints ; BuildKDTree ( allpoints , _root ); } template < class T > //\u521b\u9020\u6811 void KDTree < T >:: BuildKDTree ( vector < vector < T >> points , Node < T >* root ) { int indexpart = 0 , max = 0 ; vector < T > temp ; for ( st i = 0 ; i < _k ; i ++ ) { temp . clear (); for each ( auto var in points ) { temp . push_back ( var [ i ]); } double ave = accumulate ( temp . begin (), temp . end (), 0.0 ) / _point_num ; // \u5e73\u5747\u503c double accum = 0.0 ; for each ( auto var in temp ) { accum += ( var - ave ) * ( var - ave ); //todo:\u65b9\u5dee } if ( accum > max ) { max = int ( accum ); indexpart = int ( i ); } } //\u6b64\u65f6indexpart\u4e3a\u8981\u8fdb\u884c\u7684\u5206\u88c2\u7ef4\u6570 temp . clear (); for each ( auto var in points ) { temp . push_back ( var [ indexpart ]); } //\u627e\u5230\u4e2d\u503c; sort ( temp . begin (), temp . end ()); double median = temp [( temp . size ()) >> 1 ]; //\u5c06\u70b9\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206 vector < vector < T >> leftpoints , rightpoints ; for each ( auto var in points ) { if ( var [ indexpart ] < median ) { leftpoints . push_back ( var ); } if ( var [ indexpart ] == median ) { root -> m_split = indexpart + 1 ; root -> m_point = var ; } if ( var [ indexpart ] > median ) { rightpoints . push_back ( var ); } } //\u9012\u5f52 if ( leftpoints . size () == 0 && rightpoints . size () == 0 ) { root -> is_leaf = true ; } if ( leftpoints . size () != 0 ) { root -> lc = new Node < T > (); root -> lc -> parent = root ; BuildKDTree ( leftpoints , root -> lc ); } if ( rightpoints . size () != 0 ) { root -> rc = new Node < T > (); root -> rc -> parent = root ; BuildKDTree ( rightpoints , root -> rc ); } } template < class T > //\u5bfb\u627e\u4e0e\u76ee\u6807\u70b9\u6700\u8fd1\u7684\u70b9 void KDTree < T >:: SearchNearestByTree ( vector < T > goalpoint , T & curdis , const Node < T >* treeroot , vector < T >& nearestpoint ) { if ( treeroot == nullptr ) return ; // \u5982\u679c\u662f\u7a7a\u6811 double newdis = CalDistance ( goalpoint , treeroot -> m_point ); // \u8ba1\u7b97\u8ddd\u79bb if ( newdis < curdis ) { curdis = newdis ; nearestpoint = treeroot -> m_point ; } SearchNearestByTree ( goalpoint , curdis , treeroot -> lc , nearestpoint ); SearchNearestByTree ( goalpoint , curdis , treeroot -> rc , nearestpoint ); } template < class T > //\u67e5\u627e\u533a\u57df\u5185\u7684\u70b9 void KDTree < T >:: SearchRecu ( vector < T > from , vector < T > to , const Node < T >* temp , vector < vector < T >>& nodes ) const { if ( temp == nullptr ) return ; // \u5982\u679c\u662f\u7a7a\u6811 int partindex = temp -> m_split - 1 ; // \u5f53\u524d\u7ef4\u5ea6 int value = temp -> m_point [ partindex ]; if ( from [ partindex ] <= value && to [ partindex ] >= value ) //\u70b9\u5728\u8303\u56f4\u5185 { bool in_region = true ; for ( st i = 0 ; i < _k ; i ++ ) { if ( from [ i ] > temp -> m_point [ i ] || to [ i ] < temp -> m_point [ i ]) { in_region = false ; } } if ( in_region ) { nodes . push_back ( temp -> m_point ); } SearchRecu ( from , to , temp -> lc , nodes ); SearchRecu ( from , to , temp -> rc , nodes ); } else if ( value > to [ partindex ]) { SearchRecu ( from , to , temp -> lc , nodes ); } else if ( value < from [ partindex ]) { SearchRecu ( from , to , temp -> rc , nodes ); } } template < class T > //\u8ba1\u7b97\u8ddd\u79bb T KDTree < T >:: CalDistance ( vector < T > point1 , vector < double > point2 ) { if ( point1 . size () != point2 . size ()) { cerr << \"\u4e24\u4e2a\u70b9\u7ef4\u5ea6\u4e0d\u540c\" ; exit ( 1 ); } double distance = 0.0 ; for ( st i = 0 ; i < point1 . size (); i ++ ) { distance += pow (( point1 [ i ] - point2 [ i ]), 2 ); } return sqrt ( distance ); } template < class T > //\u63d2\u5165\u7ed3\u70b9 void KDTree < T >:: Insert ( vector < T > newpoint ) { if ( newpoint . size () != _k ) { cerr << \"\u63d2\u5165\u70b9\u7ef4\u6570\u4e0eKD\u6811\u4e0d\u5339\u914d\" << endl ; } Node < T >* temp = _root ; if ( temp == nullptr ) //\u82e5\u4e3a\u7a7a\u6811 { temp = new Node < T > (); temp -> is_leaf = true ; temp -> m_split = 1 ; temp -> m_point = newpoint ; return ; } if ( temp -> is_leaf ) //\u82e5\u6811\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u63d2\u5165\u51c6\u5907 { temp -> is_leaf = false ; int max = 0 , partindex = 0 ; for ( st i = 0 ; i < _k ; i ++ ) { double delta = abs ( newpoint [ i ] - temp -> m_point [ i ]); if ( delta > max ) { max = delta ; temp -> m_split = i + 1 ; } } } while ( true ) { int partindex = temp -> m_split - 1 ; Node < T >* nextnode ; if ( newpoint [ partindex ] > temp -> m_point [ partindex ]) { if ( temp -> rc == nullptr ) //\u53f3\u5b50\u6811\u63d2\u5165\u70b9 { temp -> rc = new Node < T > (); temp -> rc -> parent = temp ; temp -> rc -> is_leaf = true ; temp -> rc -> m_split = 1 ; temp -> rc -> m_point = newpoint ; break ; } else nextnode = temp -> rc ; } else { if ( temp -> lc == nullptr ) //\u5de6\u5b50\u6811\u63d2\u5165 { temp -> lc = new Node < T > (); temp -> lc -> parent = temp ; temp -> lc -> is_leaf = true ; temp -> lc -> m_split = 1 ; temp -> lc -> m_point = newpoint ; break ; } else nextnode = temp -> lc ; } if ( nextnode -> is_leaf ) //\u5982\u679c\u662f\u53f6\u7ed3\u70b9\uff0c\u63d2\u5165\u51c6\u5907 { nextnode -> is_leaf = false ; int max = 0 ; partindex = 0 ; for ( st i = 0 ; i < _k ; i ++ ) { double delta = abs ( newpoint [ i ] - nextnode -> m_point [ i ]); if ( delta > max ) { max = delta ; nextnode -> m_split = i + 1 ; } } } temp = nextnode ; // \u4e0b\u4e00\u6b65 } } template < class T > // \u67e5\u627e\u533a\u57df vector < vector < T >> KDTree < T >:: SearchByRegion ( vector < T > from , vector < T > to ) const { vector < vector < T >> result ; if ( from . size () != _k || to . size () != _k ) { cerr << \"\u641c\u7d22\u533a\u57df\u7ef4\u6570\u4e0eKD\u6811\u4e0d\u5339\u914d\" << endl ; exit ( 1 ); } for ( st i = 0 ; i < _k ; i ++ ) { if ( from [ i ] > to [ i ]) { cerr << \"\u533a\u57df\u8d77\u59cb\u70b9\u5750\u6807\u5927\u4e8e\u533a\u57df\u7ec8\u70b9\" << endl ; exit ( 1 ); } } SearchRecu ( from , to , _root , result ); return result ; } template < class T > // \u67e5\u627e\u79bb\u76ee\u6807\u6700\u8fd1\u7684\u7ed3\u70b9 vector < T > KDTree < T >:: SearchNearestNode ( vector < T > goalpoint ) { vector < T > nearest_point ; Node * temp = _root ; while ( ! temp -> is_leaf ) //\u627e\u5230\u6700\u9760\u8fd1\u7684\u53f6\u7ed3\u70b9 { int partindex = temp -> m_split - 1 ; if ( temp -> lc != nullptr && goalpoint [ partindex ] < temp -> m_point [ partindex ]) { temp = temp -> lc ; } else if ( temp -> rc ) { temp = temp -> rc ; } } nearest_point = temp -> m_point ; double curdis = CalDistance ( goalpoint , nearest_point ); bool is_left = false ; while ( temp != _root ) //\u56de\u6eaf { is_left = ( temp == temp -> parent -> lc ); //\u5224\u65ad\u662f\u5426\u662f\u5de6\u8282\u70b9 temp = temp -> parent ; // \u6307\u9488\u4e0a\u79fb if ( CalDistance ( goalpoint , temp -> m_point ) < curdis ) { nearest_point = temp -> m_point ; curdis = CalDistance ( goalpoint , nearest_point ); } int partindex = temp -> m_split - 1 ; // \u5224\u65ad\u53e6\u4e00\u8fb9\u5b50\u6811\u6709\u6ca1\u6709\u66f4\u8fd1\u7684\u70b9 if ( curdis > abs ( temp -> m_point [ partindex ] - goalpoint [ partindex ])) { if ( is_left ) { SearchNearestByTree ( goalpoint , curdis , temp -> rc , nearest_point ); } else { SearchNearestByTree ( goalpoint , curdis , temp -> lc , nearest_point ); } } } return nearest_point ; }","title":"KD tree"},{"location":"datastructure/tree/KD-tree/KD-tree/#_1","text":"","title":"\u4e00\u3001\u5173\u4e8e\u591a\u7ef4\u67e5\u8be2"},{"location":"datastructure/tree/KD-tree/KD-tree/#1","text":"\u5047\u8bbe\u8868\u683cT\u50a8\u5b58\u4e86\u5b66\u751f\u7684\u8003\u8bd5\u6210\u7ee9\uff0c\u5982\u4f55\u67e5\u8be2\u5206\u657049\u5206\u4ee5\u4e0a\u7684\u5b66\u751f? \u5982\u679c\u4f7f\u7528\u904d\u5386\u7684\u65b9\u5f0f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u4e86 \u3002 \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u53ef\u4ee5\u4f7f\u7528 \u5e73\u8861\u4e8c\u53c9\u6811 \u7684\u65b9\u5f0f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u3002","title":"1. \u4e00\u7ef4\u67e5\u8be2"},{"location":"datastructure/tree/KD-tree/KD-tree/#2","text":"\u5047\u8bbe\u8868\u683cT\u50a8\u5b58\u4e86\u5b66\u751f\u7684\u8bed\u6587\u548c\u6570\u5b66\u8003\u8bd5\u6210\u7ee9\uff0c\u5982\u679c\u67e5\u8be2\u8bed\u6587\u6210\u7ee9\u4ecb\u4e8e30\uff5e93\uff0c\u6570\u5b66\u6210\u7ee9\u4ecb\u4e8e30\uff5e90\u7684\u5b66\u751f\uff1f \u5982\u679c\u7ee7\u7eed\u4f7f\u7528\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\uff0c\u5219\u9700\u8981\u9996\u5148\u5206\u522b\u83b7\u5f97\u8bed\u6587\u6210\u7ee9\u548c\u6570\u5b66\u6210\u7ee9\u7684\u96c6\u5408\uff0c\u518d\u7b97\u51fa\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u9645\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u3002 \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4fdd\u6301\u5728 \u6c34\u5e73\uff1a 1) \u6839\u636e\u8bed\u6587\u6210\u7ee9\u5c06\u6240\u6709\u4eba\u7684\u6210\u7ee9\u5206\u6210\u4e24\u534a\uff0c\u5176\u4e2d\u4e00\u534a\u7684\u8bed\u6587\u6210\u7ee9<=c1\uff0c\u53e6\u4e00\u534a\u7684\u8bed\u6587\u6210\u7ee9>c1\uff0c\u5206\u522b\u5f97\u5230\u96c6\u5408S1,S2; 2) \u9488\u5bf9S1\uff0c\u6839\u636e\u6570\u5b66\u6210\u7ee9\u5206\u4e3a\u4e24\u534a\uff0c\u5176\u4e2d\u4e00\u534a\u7684\u6570\u5b66\u6210\u7ee9<=m1,\u53e6\u4e00\u534a\u7684\u6570\u5b66\u6210\u7ee9>m1\uff0c\u5206\u522b\u5f97\u5230S3,S4; 3) \u9488\u5bf9S2\uff0c\u6839\u636e\u6570\u5b66\u6210\u7ee9\u5206\u4e3a\u4e24\u534a\uff0c\u5176\u4e2d\u4e00\u534a\u7684\u6570\u5b66\u6210\u7ee9<=m2,\u53e6\u4e00\u534a\u7684\u6570\u5b66\u6210\u7ee9>m2\uff0c\u5206\u522b\u5f97\u5230S5,S6\uff1b 4) \u6839\u636e\u8bed\u6587\u6210\u7ee9\u5206\u522b\u5bf9S3,S4\uff0cS5,S6\u7ee7\u7eed\u6267\u884c\u7c7b\u4f3c\u5212\u5206\u5f97\u5230\u66f4\u5c0f\u7684\u96c6\u5408\uff0c\u7136\u540e\u518d\u5728\u66f4\u5c0f\u7684\u96c6\u5408\u4e0a\u6839\u636e\u6570\u5b66\u6210\u7ee9\u7ee7\u7eed \u901a\u8fc7\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u5c31\u751f\u6210\u4e86\u4e00\u9897kd\u6811:","title":"2. \u4e8c\u7ef4\u67e5\u8be2"},{"location":"datastructure/tree/KD-tree/KD-tree/#kd","text":"","title":"\u4e8c\u3001\u5173\u4e8eKD\u6811"},{"location":"datastructure/tree/KD-tree/KD-tree/#1-kd","text":"KD\u6811(K-dimensional tree\uff0ck\u7ef4\u6811)\uff0c\u662f\u4e00\u79cd\u9ad8\u4f4d\u7d22\u5f15\u6811\u5f62\u6570\u636e\u7ed3\u6784\u3002 KD\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u662fk\u7ef4\u70b9\u7684\u4e8c\u53c9\u6811\u3002 \u6240\u6709\u975e\u53f6\u8282\u70b9\u90fd\u53ef\u4ee5\u770b\u6210\u7528\u4e00\u4e2a\u8d85\u5e73\u9762\u628a\u7a7a\u95f4\u5206\u533a\u6210\u4e24\u4e2a \u534a\u7a7a\u95f4\u3002 \u8282\u70b9\u5de6\u5b50\u6811\u4ee3\u8868\u5728\u8d85\u5e73\u9762\u5de6\u8fb9\u7684\u70b9\uff0c\u53f3\u5b50\u6811\u4ee3\u8868\u53f3\u8fb9\u7684\u70b9\u3002","title":"1. \u5173\u4e8eKD\u6811"},{"location":"datastructure/tree/KD-tree/KD-tree/#2_1","text":"\u6bcf\u4e2a\u8282\u70b9\u90fd\u4e0ek\u7ef4\u4e2d\u5782\u76f4\u4e8e\u8d85\u5e73\u9762\u7684\u90a3\u4e00\u7ef4\u6709\u5173\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u9009\u62e9\u6309\u7167x\u8f74\u5212\u5206\uff0c\u6240\u6709x\u503c\u5c0f\u4e8e\u6307\u5b9a\u503c\u7684\u7ed3\u70b9\u90fd\u4f1a\u51fa\u73b0\u5728\u5de6\u5b50\u6811\uff0c\u5927\u4e8e\u7684\u90fd\u4f1a\u51fa\u73b0\u5728\u53f3\u5b50\u6811\u3002 \u8fd9\u6837\uff0c\u8d85\u5e73\u9762\u53ef\u4ee5\u7528x\u503c\u6765\u5708\u5b9a\uff0c\u5176\u6cd5\u7ebf\u4e3ax\u8f74\u7684\u5355\u4f4d\u5411\u91cf\u3002","title":"2. \u8d85\u5e73\u9762\u7684\u9009\u62e9\u65b9\u6cd5"},{"location":"datastructure/tree/KD-tree/KD-tree/#kd_1","text":"","title":"\u4e09\u3001KD\u6811\u7684\u7b97\u6cd5"},{"location":"datastructure/tree/KD-tree/KD-tree/#1_1","text":"\u5faa\u73af\u4f9d\u5e8f\u53d6\u6570\u636e\u70b9\u7684\u5404\u7ef4\u5ea6\u6765\u4f5c\u4e3a\u5207\u5206\u7ef4\u5ea6; \u7ef4\u5ea6\u9009\u62e9 \u63cf\u8ff0 \u5207\u5206\u7ef4\u5ea6\u9009\u62e9\u4f18\u5316 - \u6784\u5efa\u5f00\u59cb\u524d\uff0c\u5bf9\u6bd4\u6570\u636e\u70b9\u5728\u5404\u7ef4\u5ea6\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u6570\u636e\u70b9\u5728\u67d0\u4e00\u7ef4\u5ea6\u5750\u6807\u503c\u7684\u65b9\u5dee\u8d8a\u5927\u5206\u5e03\u8d8a\u5206\u6563\uff0c\u65b9\u5dee\u8d8a\u5c0f\u5206\u5e03\u8d8a\u96c6\u4e2d\u3002 - \u4ece\u65b9\u5dee\u5927\u7684\u7ef4\u5ea6\u5f00\u59cb\u5207\u5206\u53ef\u4ee5\u53d6\u5f97\u5f88\u597d\u7684\u5207\u5206\u6548\u679c\u53ca\u5e73\u8861\u6027\u3002 \u4e2d\u503c\u9009\u62e9\u4f18\u5316(a) - \u7b97\u6cd5\u5f00\u59cb\u524d\uff0c\u5bf9\u539f\u59cb\u6570\u636e\u70b9\u5728\u6240\u6709\u7ef4\u5ea6\u8fdb\u884c\u4e00\u6b21\u6392\u5e8f\uff0c\u5b58\u50a8\u4e0b\u6765\u3002 - \u5728\u540e\u7eed\u7684\u4e2d\u503c\u9009\u62e9\u4e2d\uff0c\u65e0\u987b\u6bcf\u6b21\u90fd\u5bf9\u5176\u5b50\u96c6\u8fdb\u884c\u6392\u5e8f\uff0c\u63d0\u5347\u4e86\u6027\u80fd\u3002 \u4e2d\u503c\u9009\u62e9\u4f18\u5316(b) - \u4ece\u539f\u59cb\u6570\u636e\u70b9\u4e2d\u968f\u673a\u9009\u62e9\u56fa\u5b9a\u6570\u76ee\u7684\u70b9\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u3002 - \u6bcf\u6b21\u4ece\u8fd9\u4e9b\u6837\u672c\u70b9\u4e2d\u53d6\u4e2d\u503c\uff0c\u6765\u4f5c\u4e3a\u5206\u5272\u8d85\u5e73\u9762\u3002 - \u8be5\u65b9\u5f0f\u5728\u5b9e\u8df5\u4e2d\u88ab\u8bc1\u660e\u53ef\u4ee5\u53d6\u5f97\u5f88\u597d\u6027\u80fd\u53ca\u5f88\u597d\u7684\u5e73\u8861\u6027\u3002 \u53d6\u6570\u636e\u70b9\u5728\u8be5\u7ef4\u5ea6\u7684\u4e2d\u503c\u4f5c\u4e3a\u5207\u5206\u8d85\u5e73\u9762; \u5c06\u4e2d\u503c\u5de6\u4fa7\u7684\u6570\u636e\u70b9\u6302\u5728\u5176\u5de6\u5b50\u6811\uff0c\u5c06\u4e2d\u503c\u53f3\u4fa7\u7684\u6570\u636e\u70b9\u6302\u5728\u5176\u53f3\u5b50\u6811; \u9012\u5f52\u5904\u7406\u5176\u5b50\u6811\uff0c\u76f4\u81f3\u6240\u6709\u6570\u636e\u70b9\u6302\u8f7d\u5b8c\u6bd5\u3002 template < class T > void KDTree < T >:: BuildKDTree ( vector < vector < T >> points , Node < T >* root ) { int indexpart = 0 , max = 0 ; vector < T > temp ; for ( st i = 0 ; i < _k ; i ++ ) { temp . clear (); for each ( auto var in points ) { temp . push_back ( var [ i ]); } double ave = accumulate ( temp . begin (), temp . end (), 0.0 ) / _point_num ; // \u5e73\u5747\u503c double accum = 0.0 ; for each ( auto var in temp ) { accum += ( var - ave ) * ( var - ave ); //todo:\u65b9\u5dee } if ( accum > max ) { max = int ( accum ); indexpart = int ( i ); } } //\u6b64\u65f6indexpart\u4e3a\u8981\u8fdb\u884c\u7684\u5206\u88c2\u7ef4\u6570 temp . clear (); for each ( auto var in points ) { temp . push_back ( var [ indexpart ]); } //\u627e\u5230\u4e2d\u503c; sort ( temp . begin (), temp . end ()); double median = temp [( temp . size ()) >> 1 ]; //\u5c06\u70b9\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206 vector < vector < T >> leftpoints , rightpoints ; for each ( auto var in points ) { if ( var [ indexpart ] < median ) { leftpoints . push_back ( var ); } if ( var [ indexpart ] == median ) { root -> m_split = indexpart + 1 ; root -> m_point = var ; } if ( var [ indexpart ] > median ) { rightpoints . push_back ( var ); } } //\u9012\u5f52 if ( leftpoints . size () == 0 && rightpoints . size () == 0 ) { root -> is_leaf = true ; } if ( leftpoints . size () != 0 ) { root -> lc = new Node < T > (); root -> lc -> parent = root ; BuildKDTree ( leftpoints , root -> lc ); } if ( rightpoints . size () != 0 ) { root -> rc = new Node < T > (); root -> rc -> parent = root ; BuildKDTree ( rightpoints , root -> rc ); } }","title":"1. \u6784\u9020"},{"location":"datastructure/tree/KD-tree/KD-tree/#2_2","text":"\u5bf9\u4e8e\u4efb\u4e00\u77e9\u5f62\u67e5\u8be2\u533a\u57dfR\uff0c\u67e5\u8be2\u8fc7\u7a0b\u4ece\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u6309\u5982\u4e0b\u65b9\u5f0f\u9012\u5f52\uff1a 1) \u5728\u4efb\u610f\u8282\u70b9v\u5904\uff0c\u82e5\u5b50\u6811v\u4ec5\u542b\u5355\u4e2a\u8282\u70b9\uff0c\u5219\u610f\u5473\u7740\u77e9\u9635\u533a\u57dfv\u4e2d\u4ec5\u8986\u76d6\u5355\u4e2a\u8f93\u5165\u70b9\uff0c\u6b64\u65f6\u53ef\u76f4\u63a5\u5224\u65ad\u8be5\u70b9\u662f\u5426\u843d\u5728R\u5185\u3002 2) \u5426\u5219\uff0c\u5219\u5047\u5b9a\u77e9\u5f62\u533a\u57dfv\u4e2d\u5305\u542b\u591a\u4e2a\u8f93\u5165\u70b9,\u8fd9\u65f6\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a a) \u82e5\u77e9\u5f62\u533a\u57dfv\u5b8c\u5168\u5305\u542b\u4e8eR\u5185\uff0c\u5219\u5176\u4e2d\u6240\u6709\u7684\u8f93\u5165\u70b9\u5747\u843d\u5728R\u5185\uff0c\u53ea\u9700\u8981\u904d\u5386\u5b50\u6811v,\u5373\u53ef\u62a5\u544a\u8fd9\u90e8\u5206\u8f93\u5165\u70b9\u3002 **b)**\u82e5\u4e8c\u8005\u76f8\u4ea4\uff0c\u5219\u6709\u5fc5\u8981\u5206\u522b\u8f93\u5165\u5230v\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e2d\uff0c\u7ee7\u7eed\u9012\u5f52\u67e5\u8be2\u3002 **c)**\u82e5\u4e8c\u8005\u5f7c\u6b64\u5206\u79bb\uff0c\u5219\u5b50\u96c6v\u4e2d\u7684\u70b9\u4e0d\u53ef\u80fd\u843d\u5728R\u5185\uff0c\u9012\u5f52\u5206\u652f\u7ec8\u6b62\u3002 template < class T > void KDTree < T >:: SearchRecu ( vector < T > from , vector < T > to , const Node < T >* temp , vector < vector < T >>& nodes ) const { if ( temp == nullptr ) return ; // \u5982\u679c\u662f\u7a7a\u6811 int partindex = temp -> m_split - 1 ; // \u5f53\u524d\u7ef4\u5ea6 int value = temp -> m_point [ partindex ]; if ( from [ partindex ] <= value && to [ partindex ] >= value ) //\u70b9\u5728\u8303\u56f4\u5185 { bool in_region = true ; for ( st i = 0 ; i < _k ; i ++ ) { if ( from [ i ] > temp -> m_point [ i ] || to [ i ] < temp -> m_point [ i ]) { in_region = false ; } } if ( in_region ) { nodes . push_back ( temp -> m_point ); } SearchRecu ( from , to , temp -> lc , nodes ); SearchRecu ( from , to , temp -> rc , nodes ); } else if ( value > to [ partindex ]) { SearchRecu ( from , to , temp -> lc , nodes ); } else if ( value < from [ partindex ]) { SearchRecu ( from , to , temp -> rc , nodes ); } }","title":"2. \u8303\u56f4\u67e5\u8be2"},{"location":"datastructure/tree/KD-tree/KD-tree/#kd_2","text":"","title":"\u4e09. \u5b9e\u73b0KD\u6811"},{"location":"datastructure/tree/KD-tree/KD-tree/#1_2","text":"template < class T > struct Node { bool is_leaf ; vector < T > m_point ; //k\u7ef4\u7684\u70b9 int m_split ; //\u88ab\u5206\u5f00\u7684\u7ef4\u5ea6 Node * parent ; Node * lc ; Node * rc ; };","title":"1. \u8282\u70b9\u7ed3\u6784"},{"location":"datastructure/tree/KD-tree/KD-tree/#2_3","text":"template < class T > class KDTree { public : KDTree ( int k , vector < vector < T >> allpoints ); //\u6784\u9020\u51fd\u6570 ~ KDTree () {}; //\u6790\u6784\u51fd\u6570 void Insert ( vector < T > newpoint ); //\u63d2\u5165\u7ed3\u70b9 vector < vector < T >> SearchByRegion ( vector < T > from , vector < T > to ) const ; // \u67e5\u627e\u533a\u57df vector < T > SearchNearestNode ( vector < T > goalpoint ); //\u67e5\u627e\u79bb\u76ee\u6807\u6700\u8fd1\u7684\u7ed3\u70b9 private : void BuildKDTree ( vector < vector < T >> points , Node < T >* root ); //\u521b\u9020\u6811 void SearchNearestByTree ( vector < T > goalpoint , T & curdis , const Node < T >* treeroot , vector < T >& nearestpoint ); //\u5bfb\u627e\u4e0e\u76ee\u6807\u70b9\u6700\u8fd1\u7684\u70b9 void SearchRecu ( vector < T > from , vector < T > to , const Node < T >* temp , vector < vector < T >>& nodes ) const ; //\u67e5\u627e\u533a\u57df\u5185\u7684\u70b9 T CalDistance ( vector < T > point1 , vector < double > point2 ); //\u8ba1\u7b97\u8ddd\u79bb private : Node < T >* _root ; //\u6839\u8282\u70b9 int _k ; //\u7ef4\u5ea6 int _point_num ; //\u70b9\u7684\u6570\u91cf vector < vector < T >> points ; //\u70b9\u7684\u96c6\u5408 };","title":"2. \u6811\u7ed3\u6784"},{"location":"datastructure/tree/KD-tree/KD-tree/#3","text":"template < class T > //\u6784\u9020\u51fd\u6570 KDTree < T >:: KDTree ( int k , vector < vector < T >> allpoints ) : _k ( k ) { _root = new Node < T > (); _root -> is_leaf = false ; _root -> lc = nullptr ; _root -> rc = nullptr ; _point_num = int ( allpoints . size ()); points = allpoints ; BuildKDTree ( allpoints , _root ); } template < class T > //\u521b\u9020\u6811 void KDTree < T >:: BuildKDTree ( vector < vector < T >> points , Node < T >* root ) { int indexpart = 0 , max = 0 ; vector < T > temp ; for ( st i = 0 ; i < _k ; i ++ ) { temp . clear (); for each ( auto var in points ) { temp . push_back ( var [ i ]); } double ave = accumulate ( temp . begin (), temp . end (), 0.0 ) / _point_num ; // \u5e73\u5747\u503c double accum = 0.0 ; for each ( auto var in temp ) { accum += ( var - ave ) * ( var - ave ); //todo:\u65b9\u5dee } if ( accum > max ) { max = int ( accum ); indexpart = int ( i ); } } //\u6b64\u65f6indexpart\u4e3a\u8981\u8fdb\u884c\u7684\u5206\u88c2\u7ef4\u6570 temp . clear (); for each ( auto var in points ) { temp . push_back ( var [ indexpart ]); } //\u627e\u5230\u4e2d\u503c; sort ( temp . begin (), temp . end ()); double median = temp [( temp . size ()) >> 1 ]; //\u5c06\u70b9\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206 vector < vector < T >> leftpoints , rightpoints ; for each ( auto var in points ) { if ( var [ indexpart ] < median ) { leftpoints . push_back ( var ); } if ( var [ indexpart ] == median ) { root -> m_split = indexpart + 1 ; root -> m_point = var ; } if ( var [ indexpart ] > median ) { rightpoints . push_back ( var ); } } //\u9012\u5f52 if ( leftpoints . size () == 0 && rightpoints . size () == 0 ) { root -> is_leaf = true ; } if ( leftpoints . size () != 0 ) { root -> lc = new Node < T > (); root -> lc -> parent = root ; BuildKDTree ( leftpoints , root -> lc ); } if ( rightpoints . size () != 0 ) { root -> rc = new Node < T > (); root -> rc -> parent = root ; BuildKDTree ( rightpoints , root -> rc ); } } template < class T > //\u5bfb\u627e\u4e0e\u76ee\u6807\u70b9\u6700\u8fd1\u7684\u70b9 void KDTree < T >:: SearchNearestByTree ( vector < T > goalpoint , T & curdis , const Node < T >* treeroot , vector < T >& nearestpoint ) { if ( treeroot == nullptr ) return ; // \u5982\u679c\u662f\u7a7a\u6811 double newdis = CalDistance ( goalpoint , treeroot -> m_point ); // \u8ba1\u7b97\u8ddd\u79bb if ( newdis < curdis ) { curdis = newdis ; nearestpoint = treeroot -> m_point ; } SearchNearestByTree ( goalpoint , curdis , treeroot -> lc , nearestpoint ); SearchNearestByTree ( goalpoint , curdis , treeroot -> rc , nearestpoint ); } template < class T > //\u67e5\u627e\u533a\u57df\u5185\u7684\u70b9 void KDTree < T >:: SearchRecu ( vector < T > from , vector < T > to , const Node < T >* temp , vector < vector < T >>& nodes ) const { if ( temp == nullptr ) return ; // \u5982\u679c\u662f\u7a7a\u6811 int partindex = temp -> m_split - 1 ; // \u5f53\u524d\u7ef4\u5ea6 int value = temp -> m_point [ partindex ]; if ( from [ partindex ] <= value && to [ partindex ] >= value ) //\u70b9\u5728\u8303\u56f4\u5185 { bool in_region = true ; for ( st i = 0 ; i < _k ; i ++ ) { if ( from [ i ] > temp -> m_point [ i ] || to [ i ] < temp -> m_point [ i ]) { in_region = false ; } } if ( in_region ) { nodes . push_back ( temp -> m_point ); } SearchRecu ( from , to , temp -> lc , nodes ); SearchRecu ( from , to , temp -> rc , nodes ); } else if ( value > to [ partindex ]) { SearchRecu ( from , to , temp -> lc , nodes ); } else if ( value < from [ partindex ]) { SearchRecu ( from , to , temp -> rc , nodes ); } } template < class T > //\u8ba1\u7b97\u8ddd\u79bb T KDTree < T >:: CalDistance ( vector < T > point1 , vector < double > point2 ) { if ( point1 . size () != point2 . size ()) { cerr << \"\u4e24\u4e2a\u70b9\u7ef4\u5ea6\u4e0d\u540c\" ; exit ( 1 ); } double distance = 0.0 ; for ( st i = 0 ; i < point1 . size (); i ++ ) { distance += pow (( point1 [ i ] - point2 [ i ]), 2 ); } return sqrt ( distance ); } template < class T > //\u63d2\u5165\u7ed3\u70b9 void KDTree < T >:: Insert ( vector < T > newpoint ) { if ( newpoint . size () != _k ) { cerr << \"\u63d2\u5165\u70b9\u7ef4\u6570\u4e0eKD\u6811\u4e0d\u5339\u914d\" << endl ; } Node < T >* temp = _root ; if ( temp == nullptr ) //\u82e5\u4e3a\u7a7a\u6811 { temp = new Node < T > (); temp -> is_leaf = true ; temp -> m_split = 1 ; temp -> m_point = newpoint ; return ; } if ( temp -> is_leaf ) //\u82e5\u6811\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u63d2\u5165\u51c6\u5907 { temp -> is_leaf = false ; int max = 0 , partindex = 0 ; for ( st i = 0 ; i < _k ; i ++ ) { double delta = abs ( newpoint [ i ] - temp -> m_point [ i ]); if ( delta > max ) { max = delta ; temp -> m_split = i + 1 ; } } } while ( true ) { int partindex = temp -> m_split - 1 ; Node < T >* nextnode ; if ( newpoint [ partindex ] > temp -> m_point [ partindex ]) { if ( temp -> rc == nullptr ) //\u53f3\u5b50\u6811\u63d2\u5165\u70b9 { temp -> rc = new Node < T > (); temp -> rc -> parent = temp ; temp -> rc -> is_leaf = true ; temp -> rc -> m_split = 1 ; temp -> rc -> m_point = newpoint ; break ; } else nextnode = temp -> rc ; } else { if ( temp -> lc == nullptr ) //\u5de6\u5b50\u6811\u63d2\u5165 { temp -> lc = new Node < T > (); temp -> lc -> parent = temp ; temp -> lc -> is_leaf = true ; temp -> lc -> m_split = 1 ; temp -> lc -> m_point = newpoint ; break ; } else nextnode = temp -> lc ; } if ( nextnode -> is_leaf ) //\u5982\u679c\u662f\u53f6\u7ed3\u70b9\uff0c\u63d2\u5165\u51c6\u5907 { nextnode -> is_leaf = false ; int max = 0 ; partindex = 0 ; for ( st i = 0 ; i < _k ; i ++ ) { double delta = abs ( newpoint [ i ] - nextnode -> m_point [ i ]); if ( delta > max ) { max = delta ; nextnode -> m_split = i + 1 ; } } } temp = nextnode ; // \u4e0b\u4e00\u6b65 } } template < class T > // \u67e5\u627e\u533a\u57df vector < vector < T >> KDTree < T >:: SearchByRegion ( vector < T > from , vector < T > to ) const { vector < vector < T >> result ; if ( from . size () != _k || to . size () != _k ) { cerr << \"\u641c\u7d22\u533a\u57df\u7ef4\u6570\u4e0eKD\u6811\u4e0d\u5339\u914d\" << endl ; exit ( 1 ); } for ( st i = 0 ; i < _k ; i ++ ) { if ( from [ i ] > to [ i ]) { cerr << \"\u533a\u57df\u8d77\u59cb\u70b9\u5750\u6807\u5927\u4e8e\u533a\u57df\u7ec8\u70b9\" << endl ; exit ( 1 ); } } SearchRecu ( from , to , _root , result ); return result ; } template < class T > // \u67e5\u627e\u79bb\u76ee\u6807\u6700\u8fd1\u7684\u7ed3\u70b9 vector < T > KDTree < T >:: SearchNearestNode ( vector < T > goalpoint ) { vector < T > nearest_point ; Node * temp = _root ; while ( ! temp -> is_leaf ) //\u627e\u5230\u6700\u9760\u8fd1\u7684\u53f6\u7ed3\u70b9 { int partindex = temp -> m_split - 1 ; if ( temp -> lc != nullptr && goalpoint [ partindex ] < temp -> m_point [ partindex ]) { temp = temp -> lc ; } else if ( temp -> rc ) { temp = temp -> rc ; } } nearest_point = temp -> m_point ; double curdis = CalDistance ( goalpoint , nearest_point ); bool is_left = false ; while ( temp != _root ) //\u56de\u6eaf { is_left = ( temp == temp -> parent -> lc ); //\u5224\u65ad\u662f\u5426\u662f\u5de6\u8282\u70b9 temp = temp -> parent ; // \u6307\u9488\u4e0a\u79fb if ( CalDistance ( goalpoint , temp -> m_point ) < curdis ) { nearest_point = temp -> m_point ; curdis = CalDistance ( goalpoint , nearest_point ); } int partindex = temp -> m_split - 1 ; // \u5224\u65ad\u53e6\u4e00\u8fb9\u5b50\u6811\u6709\u6ca1\u6709\u66f4\u8fd1\u7684\u70b9 if ( curdis > abs ( temp -> m_point [ partindex ] - goalpoint [ partindex ])) { if ( is_left ) { SearchNearestByTree ( goalpoint , curdis , temp -> rc , nearest_point ); } else { SearchNearestByTree ( goalpoint , curdis , temp -> lc , nearest_point ); } } } return nearest_point ; }","title":"3. \u65b9\u6cd5\u5b9e\u73b0"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/","text":"AVL\u6811 \u00b6 \u524d\u8a00 \u00b6 AVL\u6811\uff1a\u662f\u6700\u65e9\u88ab\u53d1\u660e\u7684\u81ea\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u5728AVL\u6811\u4e2d\uff0c \u4efb\u4e00\u8282\u70b9\u5bf9\u5e94\u7684\u4e24\u68f5\u5b50\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u5dee\u4e3a1 \uff0c\u56e0\u6b64\u5b83\u4e5f\u88ab\u79f0\u4e3a**\u9ad8\u5ea6\u5e73\u8861\u6811**\u3002\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u5728\u5e73\u5747\u548c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f \u3002\u589e\u52a0\u548c\u5220\u9664\u5143\u7d20\u7684\u64cd\u4f5c\u5219\u53ef\u80fd\u9700\u8981\u501f\u7531\u4e00\u6b21\u6216\u591a\u6b21\u6811\u65cb\u8f6c\uff0c\u4ee5\u5b9e\u73b0\u6811\u7684\u91cd\u65b0\u5e73\u8861\u3002 \u6811\u7ed3\u70b9\u7c7b\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u7c7b \u00b6 template < typename KeyType > class AVLNode { public : KeyType key ; AVLNode * left ; AVLNode * right ; AVLNode ( KeyType k ) : key ( k ), left ( nullptr ), right ( nullptr ){} }; template < typename KeyType > class AVLTree { typedef AVLNode < KeyType > Node ; private : Node * avlroot ; int __getheight ( const Node * root ); //\u6c42\u6811\u7684\u9ad8\u5ea6 int __diff ( const Node * root ); //\u6c42\u5e73\u8861\u56e0\u5b50 Node * __insert ( Node *& root , const KeyType key ); //\u63d2\u5165\u5185\u90e8\u5b9e\u73b0 Node * __delnode ( Node * root , const KeyType key ); //\u5220\u9664\u5185\u90e8\u5b9e\u73b0 Node * __balance ( Node * root ); //\u5e73\u8861\u64cd\u4f5c //\u56db\u79cd\u65cb\u8f6c\u64cd\u4f5c Node * __rotation_ll ( Node * root ); Node * __rotation_rr ( Node * root ); Node * __rotation_lr ( Node * root ); Node * __rotation_rl ( Node * root ); Node * __search ( Node * root , const KeyType key ); //\u67e5\u627e\u5185\u90e8\u5b9e\u73b0 void __traversal ( Node * root ); //\u904d\u5386(\u4e2d\u5e8f)\u5185\u90e8\u5b9e\u73b0 void __deleteTree ( Node * root ); //\u5220\u9664\u6811 Node * __treeMax ( Node * root ); //\u524d\u6839\u8282\u70b9\u6700\u5927 Node * __treeMin ( Node * root ); //\u524d\u6839\u8282\u70b9\u6700\u5c0f public : AVLTree (){ avlroot = nullptr ;} //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 ~ AVLTree (); AVLTree ( const KeyType * arr , int len ); //\u6784\u9020\u51fd\u6570\uff0c\u6570\u7ec4\u6784\u9020 bool insert ( const KeyType key ); //\u63d2\u5165\u5916\u90e8\u63a5\u53e3 bool search ( const KeyType key ); //\u67e5\u627e\u5916\u90e8\u63a5\u53e3 void traversal (); //\u904d\u5386(\u4e2d\u5e8f)\u5916\u90e8\u63a5\u53e3 bool delnode ( const KeyType key ); //\u5220\u9664\u5916\u90e8\u63a5\u53e3 }; \u63d2\u5165\u64cd\u4f5c \u00b6 \u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c0f\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u5de6\u8d70\uff1b\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u53f3\u8d70\u3002\u6bcf\u6b21\u63d2\u5165\u540e\u9700\u8981\u8fdb\u884c\u5e73\u8861\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u6811\u7684\u5e73\u8861 //\u63d2\u5165\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __insert ( Node *& root , const KeyType key ){ if ( root == nullptr ){ root = new Node ( key ); return root ; } if ( key < root -> key ){ //\u5c0f\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u5de6\u8d70 __insert ( root -> left , key ); root = __balance ( root ); //\u5e73\u8861\u5f53\u524d\u7ed3\u70b9 return root ; } else if ( key > root -> key ){ //\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u53f3\u8d70 __insert ( root -> right , key ); root = __balance ( root ); //\u5e73\u8861\u5f53\u524d\u7ed3\u70b9 return root ; } else { return root ; } } //\u63d2\u5165\u5916\u90e8\u63a5\u53e3 template < typename KeyType > bool AVLTree < KeyType >:: insert ( const KeyType key ){ return __insert ( avlroot , key ) == nullptr ? false : true ; } \u5e73\u8861\u64cd\u4f5c \u00b6 //\u6c42\u6811\u7684\u9ad8\u5ea6 template < typename KeyType > int AVLTree < KeyType >:: __getheight ( const Node * root ){ if ( root == nullptr ) return 0 ; return max ( __getheight ( root -> left ) , __getheight ( root -> right )) + 1 ; } //\u6c42\u5e73\u8861\u56e0\u5b50 template < typename KeyType > int AVLTree < KeyType >:: __diff ( const Node * root ){ if ( root == nullptr ) return 0 ; return __getheight ( root -> left ) - __getheight ( root -> right ); } //\u5e73\u8861\u64cd\u4f5c template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __balance ( Node * root ){ int dis = __diff ( root ); if ( dis > 1 ){ //\u5de6\u5b50\u6811\u9ad8\u4e8e\u53f3\u5b50\u6811 if ( __diff ( root -> left ) > 0 ) root = __rotation_ll ( root ); //\u5de6\u5de6\u65cb\u8f6c else root = __rotation_lr ( root ); //\u5de6\u53f3\u65cb\u8f6c } else if ( dis < -1 ){ //\u53f3\u5b50\u6811\u9ad8\u4e8e\u5de6\u5b50\u6811 if ( __diff ( root -> right ) < 0 ) root = __rotation_rr ( root ); //\u53f3\u53f3\u65cb\u8f6c else root = __rotation_rl ( root ); //\u53f3\u5de6\u65cb\u8f6c } return root ; } \u65cb\u8f6c\u64cd\u4f5c \u00b6 \u5e73\u8861\u4e8c\u53c9\u6811\u7684\u6838\u5fc3\u90e8\u5206\u5c31\u662f\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e8c\u53c9\u6811\u7684\u5e73\u8861\uff0c\u5728\u6bcf\u4e00\u6b21\u63d2\u5165\u548c\u5220\u9664\u7ed3\u70b9\u65f6\u90fd\u9700\u8981\u5224\u65ad\u5f53\u524d\u7ed3\u70b9\u662f\u5426\u5e73\u8861\uff0c\u5982\u4f55\u4e0d\u5e73\u8861\u5c31\u9700\u8981\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u6839\u636e\u4e8c\u53c9\u6811\u7684\u5b9e\u9645\u60c5\u51b5\u53ef\u5206\u4e3a4\u79cd\uff1a\u5355\u65cb\u8f6c(\u5de6\u5de6\u3001\u53f3\u53f3)\uff0c\u53cc\u65cb\u8f6c(\u5de6\u53f3\u3001\u53f3\u5de6)\u3002\u767e\u5ea6\u6709\u5f88\u591a\u8be6\u7ec6\u7684\u8bb2\u89e3\uff0c\u8fd9\u91cc\u4e0d\u5728\u8d58\u8ff0\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a //\u56db\u79cd\u65cb\u8f6c template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__rotation_ll(Node *root){ Node *temp = root->left; root->left = temp->right; temp->right = root; return temp; } template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__rotation_rr(Node *root){ Node *temp = root->right; root->right = temp->left; temp->left = root; return temp; } template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__rotation_lr(Node *root){ root->left = __rotation_rr(root->left); return __rotation_ll(root); } template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__rotation_rl(Node *root){ root->right = __rotation_ll(root->right); return __rotation_rr(root); } \u5220\u9664\u7ed3\u70b9 \u00b6 \u5220\u9664\u7ed3\u70b9\u65f6\uff0c\u9700\u8981\u5206\u60c5\u51b5\u8ba8\u8bba\uff0c\u4e14\u5728\u5220\u9664\u7ed3\u70b9\u540e\u8bb0\u5f97\u5e73\u8861\u64cd\u4f5c //\u5220\u9664\u7ed3\u70b9\u5185\u90e8\u5b9e\u73b0 template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__delnode(Node *root,const KeyType key){ if(root == nullptr) return root; if(!search(key)){ //\u5220\u9664\u7684\u7ed3\u70b9\u4e0d\u5b58\u5728 cout << \"Key not find!\" << endl; return root; } if(key == root->key){ if (root->left != nullptr && root->right != nullptr) { //\u5220\u9664\u7684\u7ed3\u70b9\u5de6\u53f3\u5b50\u6811\u90fd\u975e\u7a7a if(__diff(root) > 0){ //\u5de6\u5b50\u6811\u66f4\u9ad8 root->key = __treeMax(root->left)->key; //\u5bfb\u627e\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6765\u66ff\u6362\u5f53\u524d\u7ed3\u70b9\uff0c\u4f7f\u5176\u4e0b\u6c89\u4e3a\u53f6\u5b50\u7ed3\u70b9 root->left = __delnode(root->left, root->key); //\u5220\u9664\u5de6\u5b50\u6811\u4e2d\u88ab\u66ff\u6362\u5f53\u524d\u7ed3\u70b9 }else{ //\u53f3\u5b50\u6811\u66f4\u9ad8 root->key = __treeMin(root->right)->key; //\u5bfb\u627e\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\u6765\u66ff\u6362\u5f53\u524d\u7ed3\u70b9 root->right = __delnode(root->right, root->key); } }else{ //\u5220\u9664\u7684\u7ed3\u70b9\u6709\u4e00\u4e2a\u5b69\u5b50\u6216\u5220\u9664\u7684\u7ed3\u70b9\u81ea\u8eab\u4e3a\u53f6\u5b50\u8282\u70b9 Node * temp = root; root = (root->left) ? (root->left) : (root->right); delete temp; temp = nullptr; //\u907f\u514d\u51fa\u73b0\u91ce\u6307\u9488 } }else if(key < root->key){ //\u5c0f\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u5de6\u5b50\u6811\u5bfb\u627e root->left = __delnode(root->left,key); root = __balance(root); }else{ //\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u53f3\u5b50\u6811\u5bfb\u627e root->right = __delnode(root->right,key); root = __balance(root); } return root; } //\u5220\u9664\u5916\u90e8\u63a5\u53e3 template <typename KeyType> bool AVLTree<KeyType>::delnode(const KeyType key){ return __delnode(avlroot,key) == nullptr ? false : true; } \u6574\u4f53\u5b9e\u73b0\u4ee3\u7801\u4ee5\u53ca\u6d4b\u8bd5 \u00b6 #include <iostream> #include <algorithm> using namespace std ; template < typename KeyType > class AVLNode { public : KeyType key ; AVLNode * left ; AVLNode * right ; AVLNode ( KeyType k ) : key ( k ), left ( nullptr ), right ( nullptr ){} }; template < typename KeyType > class AVLTree { typedef AVLNode < KeyType > Node ; private : Node * avlroot ; int __getheight ( const Node * root ); //\u6c42\u6811\u7684\u9ad8\u5ea6 int __diff ( const Node * root ); //\u6c42\u5e73\u8861\u56e0\u5b50 Node * __insert ( Node *& root , const KeyType key ); //\u63d2\u5165\u5185\u90e8\u5b9e\u73b0 Node * __delnode ( Node * root , const KeyType key ); //\u5220\u9664\u5185\u90e8\u5b9e\u73b0 Node * __balance ( Node * root ); //\u5e73\u8861\u64cd\u4f5c //\u56db\u79cd\u65cb\u8f6c\u64cd\u4f5c Node * __rotation_ll ( Node * root ); Node * __rotation_rr ( Node * root ); Node * __rotation_lr ( Node * root ); Node * __rotation_rl ( Node * root ); Node * __search ( Node * root , const KeyType key ); //\u67e5\u627e\u5185\u90e8\u5b9e\u73b0 void __traversal ( Node * root ); //\u904d\u5386(\u4e2d\u5e8f)\u5185\u90e8\u5b9e\u73b0 void __deleteTree ( Node * root ); //\u5220\u9664\u6811 Node * __treeMax ( Node * root ); //\u524d\u6839\u8282\u70b9\u6700\u5927 Node * __treeMin ( Node * root ); //\u524d\u6839\u8282\u70b9\u6700\u5c0f public : AVLTree (){ avlroot = nullptr ;} //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 ~ AVLTree (); AVLTree ( const KeyType * arr , int len ); //\u6784\u9020\u51fd\u6570\uff0c\u6570\u7ec4\u6784\u9020 bool insert ( const KeyType key ); //\u63d2\u5165\u5916\u90e8\u63a5\u53e3 bool search ( const KeyType key ); //\u67e5\u627e\u5916\u90e8\u63a5\u53e3 void traversal (); //\u904d\u5386(\u4e2d\u5e8f)\u5916\u90e8\u63a5\u53e3 bool delnode ( const KeyType key ); //\u5220\u9664\u5916\u90e8\u63a5\u53e3 }; //\u6240\u6709\u5185\u90e8\u5b9e\u73b0 //\u6c42\u6811\u7684\u9ad8\u5ea6 template < typename KeyType > int AVLTree < KeyType >:: __getheight ( const Node * root ){ if ( root == nullptr ) return 0 ; return max ( __getheight ( root -> left ) , __getheight ( root -> right )) + 1 ; } //\u6c42\u5e73\u8861\u56e0\u5b50 template < typename KeyType > int AVLTree < KeyType >:: __diff ( const Node * root ){ if ( root == nullptr ) return 0 ; return __getheight ( root -> left ) - __getheight ( root -> right ); } //\u63d2\u5165\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __insert ( Node *& root , const KeyType key ){ if ( root == nullptr ){ root = new Node ( key ); return root ; } if ( key < root -> key ){ __insert ( root -> left , key ); root = __balance ( root ); return root ; } else if ( key > root -> key ){ __insert ( root -> right , key ); root = __balance ( root ); return root ; } else { return root ; } } //\u5e73\u8861\u64cd\u4f5c template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __balance ( Node * root ){ int dis = __diff ( root ); if ( dis > 1 ){ //\u5de6\u5b50\u6811\u9ad8\u4e8e\u53f3\u5b50\u6811 if ( __diff ( root -> left ) > 0 ) root = __rotation_ll ( root ); else root = __rotation_lr ( root ); } else if ( dis < -1 ){ //\u53f3\u5b50\u6811\u9ad8\u4e8e\u5de6\u5b50\u6811 if ( __diff ( root -> right ) < 0 ) root = __rotation_rr ( root ); else root = __rotation_rl ( root ); } return root ; } //\u56db\u79cd\u65cb\u8f6c template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __rotation_ll ( Node * root ){ Node * temp = root -> left ; root -> left = temp -> right ; temp -> right = root ; return temp ; } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __rotation_rr ( Node * root ){ Node * temp = root -> right ; root -> right = temp -> left ; temp -> left = root ; return temp ; } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __rotation_lr ( Node * root ){ root -> left = __rotation_rr ( root -> left ); return __rotation_ll ( root ); } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __rotation_rl ( Node * root ){ root -> right = __rotation_ll ( root -> right ); return __rotation_rr ( root ); } //\u67e5\u627e\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __search ( Node * root , const KeyType key ){ if ( root == nullptr ) return nullptr ; if ( key == root -> key ) return root ; else if ( key < root -> key ) return __search ( root -> left , key ); else return __search ( root -> right , key ); } //\u904d\u5386(\u4e2d\u5e8f)\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > void AVLTree < KeyType >:: __traversal ( Node * root ){ if ( root == nullptr ) return ; __traversal ( root -> left ); cout << root -> key << \" \" ; __traversal ( root -> right ); } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __treeMax ( Node * root ){ return ( root -> right ) ? __treeMax ( root -> right ) : root ; } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __treeMin ( Node * root ){ return ( root -> left ) ? __treeMin ( root -> left ) : root ; } //\u5220\u9664\u7ed3\u70b9\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __delnode ( Node * root , const KeyType key ){ if ( root == nullptr ) return root ; if ( ! search ( key )){ cout << \"Key not find!\" << endl ; return root ; } if ( key == root -> key ){ if ( root -> left != nullptr && root -> right != nullptr ) { if ( __diff ( root ) > 0 ){ root -> key = __treeMax ( root -> left ) -> key ; root -> left = __delnode ( root -> left , root -> key ); } else { root -> key = __treeMin ( root -> right ) -> key ; root -> right = __delnode ( root -> right , root -> key ); } } else { Node * temp = root ; root = ( root -> left ) ? ( root -> left ) : ( root -> right ); delete temp ; temp = nullptr ; } } else if ( key < root -> key ){ root -> left = __delnode ( root -> left , key ); root = __balance ( root ); } else { root -> right = __delnode ( root -> right , key ); root = __balance ( root ); } return root ; } //\u5220\u9664\u6811 template < typename KeyType > void AVLTree < KeyType >:: __deleteTree ( Node * root ){ if ( root == nullptr ) return ; __deleteTree ( root -> left ); __deleteTree ( root -> right ); delete root ; root = nullptr ; return ; } //\u6240\u6709\u5916\u90e8\u63a5\u53e3 //\u6784\u9020\u51fd\u6570-\u6570\u7ec4\u6784\u9020 template < typename KeyType > AVLTree < KeyType >:: AVLTree ( const KeyType * arr , int len ){ avlroot = nullptr ; for ( int i = 0 ; i < len ; i ++ ){ insert ( * ( arr + i )); } } //\u63d2\u5165\u5916\u90e8\u63a5\u53e3 template < typename KeyType > bool AVLTree < KeyType >:: insert ( const KeyType key ){ return __insert ( avlroot , key ) == nullptr ? false : true ; } //\u67e5\u627e\u5916\u90e8\u63a5\u53e3 template < typename KeyType > bool AVLTree < KeyType >:: search ( const KeyType key ){ return __search ( avlroot , key ) == nullptr ? false : true ; } //\u904d\u5386(\u4e2d\u5e8f)\u5916\u90e8\u63a5\u53e3 template < typename KeyType > void AVLTree < KeyType >:: traversal (){ __traversal ( avlroot ); } //\u5220\u9664\u5916\u90e8\u63a5\u53e3 template < typename KeyType > bool AVLTree < KeyType >:: delnode ( const KeyType key ){ return __delnode ( avlroot , key ) == nullptr ? false : true ; } //\u6790\u6784\u51fd\u6570 template < typename KeyType > AVLTree < KeyType >::~ AVLTree (){ __deleteTree ( avlroot ); } int main (){ int arr [] = { 16 , 3 , 7 , 11 , 9 , 26 , 18 , 14 , 15 }; AVLTree < int > tree ( arr , sizeof ( arr ) / sizeof ( arr [ 0 ])); tree . traversal (); cout << endl ; tree . insert ( 8 ); tree . traversal (); cout << endl ; if ( tree . search ( 14 )){ cout << \"Found!\" << endl ; } else { cout << \"Not Found!\" << endl ; } tree . delnode ( 11 ); tree . traversal (); cout << endl ; if ( tree . search ( 11 )) { cout << \"Found!\" << endl ; } else { cout << \"Not Found!\" << endl ; } return 0 ; }","title":"AVL\u6811"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/#avl","text":"","title":"AVL\u6811"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/#_1","text":"AVL\u6811\uff1a\u662f\u6700\u65e9\u88ab\u53d1\u660e\u7684\u81ea\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u5728AVL\u6811\u4e2d\uff0c \u4efb\u4e00\u8282\u70b9\u5bf9\u5e94\u7684\u4e24\u68f5\u5b50\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u5dee\u4e3a1 \uff0c\u56e0\u6b64\u5b83\u4e5f\u88ab\u79f0\u4e3a**\u9ad8\u5ea6\u5e73\u8861\u6811**\u3002\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u5728\u5e73\u5747\u548c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f \u3002\u589e\u52a0\u548c\u5220\u9664\u5143\u7d20\u7684\u64cd\u4f5c\u5219\u53ef\u80fd\u9700\u8981\u501f\u7531\u4e00\u6b21\u6216\u591a\u6b21\u6811\u65cb\u8f6c\uff0c\u4ee5\u5b9e\u73b0\u6811\u7684\u91cd\u65b0\u5e73\u8861\u3002","title":"\u524d\u8a00"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/#_2","text":"template < typename KeyType > class AVLNode { public : KeyType key ; AVLNode * left ; AVLNode * right ; AVLNode ( KeyType k ) : key ( k ), left ( nullptr ), right ( nullptr ){} }; template < typename KeyType > class AVLTree { typedef AVLNode < KeyType > Node ; private : Node * avlroot ; int __getheight ( const Node * root ); //\u6c42\u6811\u7684\u9ad8\u5ea6 int __diff ( const Node * root ); //\u6c42\u5e73\u8861\u56e0\u5b50 Node * __insert ( Node *& root , const KeyType key ); //\u63d2\u5165\u5185\u90e8\u5b9e\u73b0 Node * __delnode ( Node * root , const KeyType key ); //\u5220\u9664\u5185\u90e8\u5b9e\u73b0 Node * __balance ( Node * root ); //\u5e73\u8861\u64cd\u4f5c //\u56db\u79cd\u65cb\u8f6c\u64cd\u4f5c Node * __rotation_ll ( Node * root ); Node * __rotation_rr ( Node * root ); Node * __rotation_lr ( Node * root ); Node * __rotation_rl ( Node * root ); Node * __search ( Node * root , const KeyType key ); //\u67e5\u627e\u5185\u90e8\u5b9e\u73b0 void __traversal ( Node * root ); //\u904d\u5386(\u4e2d\u5e8f)\u5185\u90e8\u5b9e\u73b0 void __deleteTree ( Node * root ); //\u5220\u9664\u6811 Node * __treeMax ( Node * root ); //\u524d\u6839\u8282\u70b9\u6700\u5927 Node * __treeMin ( Node * root ); //\u524d\u6839\u8282\u70b9\u6700\u5c0f public : AVLTree (){ avlroot = nullptr ;} //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 ~ AVLTree (); AVLTree ( const KeyType * arr , int len ); //\u6784\u9020\u51fd\u6570\uff0c\u6570\u7ec4\u6784\u9020 bool insert ( const KeyType key ); //\u63d2\u5165\u5916\u90e8\u63a5\u53e3 bool search ( const KeyType key ); //\u67e5\u627e\u5916\u90e8\u63a5\u53e3 void traversal (); //\u904d\u5386(\u4e2d\u5e8f)\u5916\u90e8\u63a5\u53e3 bool delnode ( const KeyType key ); //\u5220\u9664\u5916\u90e8\u63a5\u53e3 };","title":"\u6811\u7ed3\u70b9\u7c7b\u3001\u5e73\u8861\u4e8c\u53c9\u6811\u7c7b"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/#_3","text":"\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c0f\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u5de6\u8d70\uff1b\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u53f3\u8d70\u3002\u6bcf\u6b21\u63d2\u5165\u540e\u9700\u8981\u8fdb\u884c\u5e73\u8861\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u6811\u7684\u5e73\u8861 //\u63d2\u5165\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __insert ( Node *& root , const KeyType key ){ if ( root == nullptr ){ root = new Node ( key ); return root ; } if ( key < root -> key ){ //\u5c0f\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u5de6\u8d70 __insert ( root -> left , key ); root = __balance ( root ); //\u5e73\u8861\u5f53\u524d\u7ed3\u70b9 return root ; } else if ( key > root -> key ){ //\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u53f3\u8d70 __insert ( root -> right , key ); root = __balance ( root ); //\u5e73\u8861\u5f53\u524d\u7ed3\u70b9 return root ; } else { return root ; } } //\u63d2\u5165\u5916\u90e8\u63a5\u53e3 template < typename KeyType > bool AVLTree < KeyType >:: insert ( const KeyType key ){ return __insert ( avlroot , key ) == nullptr ? false : true ; }","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/#_4","text":"//\u6c42\u6811\u7684\u9ad8\u5ea6 template < typename KeyType > int AVLTree < KeyType >:: __getheight ( const Node * root ){ if ( root == nullptr ) return 0 ; return max ( __getheight ( root -> left ) , __getheight ( root -> right )) + 1 ; } //\u6c42\u5e73\u8861\u56e0\u5b50 template < typename KeyType > int AVLTree < KeyType >:: __diff ( const Node * root ){ if ( root == nullptr ) return 0 ; return __getheight ( root -> left ) - __getheight ( root -> right ); } //\u5e73\u8861\u64cd\u4f5c template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __balance ( Node * root ){ int dis = __diff ( root ); if ( dis > 1 ){ //\u5de6\u5b50\u6811\u9ad8\u4e8e\u53f3\u5b50\u6811 if ( __diff ( root -> left ) > 0 ) root = __rotation_ll ( root ); //\u5de6\u5de6\u65cb\u8f6c else root = __rotation_lr ( root ); //\u5de6\u53f3\u65cb\u8f6c } else if ( dis < -1 ){ //\u53f3\u5b50\u6811\u9ad8\u4e8e\u5de6\u5b50\u6811 if ( __diff ( root -> right ) < 0 ) root = __rotation_rr ( root ); //\u53f3\u53f3\u65cb\u8f6c else root = __rotation_rl ( root ); //\u53f3\u5de6\u65cb\u8f6c } return root ; }","title":"\u5e73\u8861\u64cd\u4f5c"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/#_5","text":"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u6838\u5fc3\u90e8\u5206\u5c31\u662f\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e8c\u53c9\u6811\u7684\u5e73\u8861\uff0c\u5728\u6bcf\u4e00\u6b21\u63d2\u5165\u548c\u5220\u9664\u7ed3\u70b9\u65f6\u90fd\u9700\u8981\u5224\u65ad\u5f53\u524d\u7ed3\u70b9\u662f\u5426\u5e73\u8861\uff0c\u5982\u4f55\u4e0d\u5e73\u8861\u5c31\u9700\u8981\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u6839\u636e\u4e8c\u53c9\u6811\u7684\u5b9e\u9645\u60c5\u51b5\u53ef\u5206\u4e3a4\u79cd\uff1a\u5355\u65cb\u8f6c(\u5de6\u5de6\u3001\u53f3\u53f3)\uff0c\u53cc\u65cb\u8f6c(\u5de6\u53f3\u3001\u53f3\u5de6)\u3002\u767e\u5ea6\u6709\u5f88\u591a\u8be6\u7ec6\u7684\u8bb2\u89e3\uff0c\u8fd9\u91cc\u4e0d\u5728\u8d58\u8ff0\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a //\u56db\u79cd\u65cb\u8f6c template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__rotation_ll(Node *root){ Node *temp = root->left; root->left = temp->right; temp->right = root; return temp; } template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__rotation_rr(Node *root){ Node *temp = root->right; root->right = temp->left; temp->left = root; return temp; } template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__rotation_lr(Node *root){ root->left = __rotation_rr(root->left); return __rotation_ll(root); } template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__rotation_rl(Node *root){ root->right = __rotation_ll(root->right); return __rotation_rr(root); }","title":"\u65cb\u8f6c\u64cd\u4f5c"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/#_6","text":"\u5220\u9664\u7ed3\u70b9\u65f6\uff0c\u9700\u8981\u5206\u60c5\u51b5\u8ba8\u8bba\uff0c\u4e14\u5728\u5220\u9664\u7ed3\u70b9\u540e\u8bb0\u5f97\u5e73\u8861\u64cd\u4f5c //\u5220\u9664\u7ed3\u70b9\u5185\u90e8\u5b9e\u73b0 template <typename KeyType> AVLNode<KeyType> *AVLTree<KeyType>::__delnode(Node *root,const KeyType key){ if(root == nullptr) return root; if(!search(key)){ //\u5220\u9664\u7684\u7ed3\u70b9\u4e0d\u5b58\u5728 cout << \"Key not find!\" << endl; return root; } if(key == root->key){ if (root->left != nullptr && root->right != nullptr) { //\u5220\u9664\u7684\u7ed3\u70b9\u5de6\u53f3\u5b50\u6811\u90fd\u975e\u7a7a if(__diff(root) > 0){ //\u5de6\u5b50\u6811\u66f4\u9ad8 root->key = __treeMax(root->left)->key; //\u5bfb\u627e\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6765\u66ff\u6362\u5f53\u524d\u7ed3\u70b9\uff0c\u4f7f\u5176\u4e0b\u6c89\u4e3a\u53f6\u5b50\u7ed3\u70b9 root->left = __delnode(root->left, root->key); //\u5220\u9664\u5de6\u5b50\u6811\u4e2d\u88ab\u66ff\u6362\u5f53\u524d\u7ed3\u70b9 }else{ //\u53f3\u5b50\u6811\u66f4\u9ad8 root->key = __treeMin(root->right)->key; //\u5bfb\u627e\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\u6765\u66ff\u6362\u5f53\u524d\u7ed3\u70b9 root->right = __delnode(root->right, root->key); } }else{ //\u5220\u9664\u7684\u7ed3\u70b9\u6709\u4e00\u4e2a\u5b69\u5b50\u6216\u5220\u9664\u7684\u7ed3\u70b9\u81ea\u8eab\u4e3a\u53f6\u5b50\u8282\u70b9 Node * temp = root; root = (root->left) ? (root->left) : (root->right); delete temp; temp = nullptr; //\u907f\u514d\u51fa\u73b0\u91ce\u6307\u9488 } }else if(key < root->key){ //\u5c0f\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u5de6\u5b50\u6811\u5bfb\u627e root->left = __delnode(root->left,key); root = __balance(root); }else{ //\u5927\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\uff0c\u5f80\u53f3\u5b50\u6811\u5bfb\u627e root->right = __delnode(root->right,key); root = __balance(root); } return root; } //\u5220\u9664\u5916\u90e8\u63a5\u53e3 template <typename KeyType> bool AVLTree<KeyType>::delnode(const KeyType key){ return __delnode(avlroot,key) == nullptr ? false : true; }","title":"\u5220\u9664\u7ed3\u70b9"},{"location":"datastructure/tree/binary-search-tree/AVL-tree/#_7","text":"#include <iostream> #include <algorithm> using namespace std ; template < typename KeyType > class AVLNode { public : KeyType key ; AVLNode * left ; AVLNode * right ; AVLNode ( KeyType k ) : key ( k ), left ( nullptr ), right ( nullptr ){} }; template < typename KeyType > class AVLTree { typedef AVLNode < KeyType > Node ; private : Node * avlroot ; int __getheight ( const Node * root ); //\u6c42\u6811\u7684\u9ad8\u5ea6 int __diff ( const Node * root ); //\u6c42\u5e73\u8861\u56e0\u5b50 Node * __insert ( Node *& root , const KeyType key ); //\u63d2\u5165\u5185\u90e8\u5b9e\u73b0 Node * __delnode ( Node * root , const KeyType key ); //\u5220\u9664\u5185\u90e8\u5b9e\u73b0 Node * __balance ( Node * root ); //\u5e73\u8861\u64cd\u4f5c //\u56db\u79cd\u65cb\u8f6c\u64cd\u4f5c Node * __rotation_ll ( Node * root ); Node * __rotation_rr ( Node * root ); Node * __rotation_lr ( Node * root ); Node * __rotation_rl ( Node * root ); Node * __search ( Node * root , const KeyType key ); //\u67e5\u627e\u5185\u90e8\u5b9e\u73b0 void __traversal ( Node * root ); //\u904d\u5386(\u4e2d\u5e8f)\u5185\u90e8\u5b9e\u73b0 void __deleteTree ( Node * root ); //\u5220\u9664\u6811 Node * __treeMax ( Node * root ); //\u524d\u6839\u8282\u70b9\u6700\u5927 Node * __treeMin ( Node * root ); //\u524d\u6839\u8282\u70b9\u6700\u5c0f public : AVLTree (){ avlroot = nullptr ;} //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 ~ AVLTree (); AVLTree ( const KeyType * arr , int len ); //\u6784\u9020\u51fd\u6570\uff0c\u6570\u7ec4\u6784\u9020 bool insert ( const KeyType key ); //\u63d2\u5165\u5916\u90e8\u63a5\u53e3 bool search ( const KeyType key ); //\u67e5\u627e\u5916\u90e8\u63a5\u53e3 void traversal (); //\u904d\u5386(\u4e2d\u5e8f)\u5916\u90e8\u63a5\u53e3 bool delnode ( const KeyType key ); //\u5220\u9664\u5916\u90e8\u63a5\u53e3 }; //\u6240\u6709\u5185\u90e8\u5b9e\u73b0 //\u6c42\u6811\u7684\u9ad8\u5ea6 template < typename KeyType > int AVLTree < KeyType >:: __getheight ( const Node * root ){ if ( root == nullptr ) return 0 ; return max ( __getheight ( root -> left ) , __getheight ( root -> right )) + 1 ; } //\u6c42\u5e73\u8861\u56e0\u5b50 template < typename KeyType > int AVLTree < KeyType >:: __diff ( const Node * root ){ if ( root == nullptr ) return 0 ; return __getheight ( root -> left ) - __getheight ( root -> right ); } //\u63d2\u5165\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __insert ( Node *& root , const KeyType key ){ if ( root == nullptr ){ root = new Node ( key ); return root ; } if ( key < root -> key ){ __insert ( root -> left , key ); root = __balance ( root ); return root ; } else if ( key > root -> key ){ __insert ( root -> right , key ); root = __balance ( root ); return root ; } else { return root ; } } //\u5e73\u8861\u64cd\u4f5c template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __balance ( Node * root ){ int dis = __diff ( root ); if ( dis > 1 ){ //\u5de6\u5b50\u6811\u9ad8\u4e8e\u53f3\u5b50\u6811 if ( __diff ( root -> left ) > 0 ) root = __rotation_ll ( root ); else root = __rotation_lr ( root ); } else if ( dis < -1 ){ //\u53f3\u5b50\u6811\u9ad8\u4e8e\u5de6\u5b50\u6811 if ( __diff ( root -> right ) < 0 ) root = __rotation_rr ( root ); else root = __rotation_rl ( root ); } return root ; } //\u56db\u79cd\u65cb\u8f6c template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __rotation_ll ( Node * root ){ Node * temp = root -> left ; root -> left = temp -> right ; temp -> right = root ; return temp ; } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __rotation_rr ( Node * root ){ Node * temp = root -> right ; root -> right = temp -> left ; temp -> left = root ; return temp ; } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __rotation_lr ( Node * root ){ root -> left = __rotation_rr ( root -> left ); return __rotation_ll ( root ); } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __rotation_rl ( Node * root ){ root -> right = __rotation_ll ( root -> right ); return __rotation_rr ( root ); } //\u67e5\u627e\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __search ( Node * root , const KeyType key ){ if ( root == nullptr ) return nullptr ; if ( key == root -> key ) return root ; else if ( key < root -> key ) return __search ( root -> left , key ); else return __search ( root -> right , key ); } //\u904d\u5386(\u4e2d\u5e8f)\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > void AVLTree < KeyType >:: __traversal ( Node * root ){ if ( root == nullptr ) return ; __traversal ( root -> left ); cout << root -> key << \" \" ; __traversal ( root -> right ); } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __treeMax ( Node * root ){ return ( root -> right ) ? __treeMax ( root -> right ) : root ; } template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __treeMin ( Node * root ){ return ( root -> left ) ? __treeMin ( root -> left ) : root ; } //\u5220\u9664\u7ed3\u70b9\u5185\u90e8\u5b9e\u73b0 template < typename KeyType > AVLNode < KeyType > * AVLTree < KeyType >:: __delnode ( Node * root , const KeyType key ){ if ( root == nullptr ) return root ; if ( ! search ( key )){ cout << \"Key not find!\" << endl ; return root ; } if ( key == root -> key ){ if ( root -> left != nullptr && root -> right != nullptr ) { if ( __diff ( root ) > 0 ){ root -> key = __treeMax ( root -> left ) -> key ; root -> left = __delnode ( root -> left , root -> key ); } else { root -> key = __treeMin ( root -> right ) -> key ; root -> right = __delnode ( root -> right , root -> key ); } } else { Node * temp = root ; root = ( root -> left ) ? ( root -> left ) : ( root -> right ); delete temp ; temp = nullptr ; } } else if ( key < root -> key ){ root -> left = __delnode ( root -> left , key ); root = __balance ( root ); } else { root -> right = __delnode ( root -> right , key ); root = __balance ( root ); } return root ; } //\u5220\u9664\u6811 template < typename KeyType > void AVLTree < KeyType >:: __deleteTree ( Node * root ){ if ( root == nullptr ) return ; __deleteTree ( root -> left ); __deleteTree ( root -> right ); delete root ; root = nullptr ; return ; } //\u6240\u6709\u5916\u90e8\u63a5\u53e3 //\u6784\u9020\u51fd\u6570-\u6570\u7ec4\u6784\u9020 template < typename KeyType > AVLTree < KeyType >:: AVLTree ( const KeyType * arr , int len ){ avlroot = nullptr ; for ( int i = 0 ; i < len ; i ++ ){ insert ( * ( arr + i )); } } //\u63d2\u5165\u5916\u90e8\u63a5\u53e3 template < typename KeyType > bool AVLTree < KeyType >:: insert ( const KeyType key ){ return __insert ( avlroot , key ) == nullptr ? false : true ; } //\u67e5\u627e\u5916\u90e8\u63a5\u53e3 template < typename KeyType > bool AVLTree < KeyType >:: search ( const KeyType key ){ return __search ( avlroot , key ) == nullptr ? false : true ; } //\u904d\u5386(\u4e2d\u5e8f)\u5916\u90e8\u63a5\u53e3 template < typename KeyType > void AVLTree < KeyType >:: traversal (){ __traversal ( avlroot ); } //\u5220\u9664\u5916\u90e8\u63a5\u53e3 template < typename KeyType > bool AVLTree < KeyType >:: delnode ( const KeyType key ){ return __delnode ( avlroot , key ) == nullptr ? false : true ; } //\u6790\u6784\u51fd\u6570 template < typename KeyType > AVLTree < KeyType >::~ AVLTree (){ __deleteTree ( avlroot ); } int main (){ int arr [] = { 16 , 3 , 7 , 11 , 9 , 26 , 18 , 14 , 15 }; AVLTree < int > tree ( arr , sizeof ( arr ) / sizeof ( arr [ 0 ])); tree . traversal (); cout << endl ; tree . insert ( 8 ); tree . traversal (); cout << endl ; if ( tree . search ( 14 )){ cout << \"Found!\" << endl ; } else { cout << \"Not Found!\" << endl ; } tree . delnode ( 11 ); tree . traversal (); cout << endl ; if ( tree . search ( 11 )) { cout << \"Found!\" << endl ; } else { cout << \"Not Found!\" << endl ; } return 0 ; }","title":"\u6574\u4f53\u5b9e\u73b0\u4ee3\u7801\u4ee5\u53ca\u6d4b\u8bd5"},{"location":"datastructure/tree/binary-search-tree/binary-search-tree/","text":"\u4e00\u3001\u4e8c\u53c9\u67e5\u627e\u6811 **1\u3001\u5b9a\u4e49\uff1a**\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u4e5f\u79f0\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6216\u4e8c\u53c9\u6392\u5e8f\u6811\u3002\u5176\u5b9a\u4e49\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8981\u4e48\u662f\u4e00\u9897\u7a7a\u6811\uff0c\u8981\u4e48\u5c31\u662f\u5177\u6709\u5982\u4e0b\u6027\u8d28\u7684\u4e8c\u53c9\u6811\u3002 2\u3001\u6027\u8d28\uff1a \uff081\uff09 \u82e5\u4efb\u610f\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b \uff082\uff09 \u82e5\u4efb\u610f\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b \uff083\uff09 \u4efb\u610f\u8282\u70b9\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\uff1b \uff084\uff09 \u6ca1\u6709\u952e\u503c\u76f8\u7b49\u7684\u8282\u70b9\u3002 \uff085\uff09 \u5bf9\u4e8c\u53c9\u67e5\u627e\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff0c\u5373\u53ef\u5f97\u5230\u6709\u5e8f\u7684\u6570\u5217\u3002 \u56fea \u200b \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u662f\u4e0d\u540c\u5f62\u6001\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u4e8c\u53c9\u67e5\u627e\u6811\u662f\u5bf9\u8981\u67e5\u627e\u7684\u6570\u636e\u8fdb\u884c\u751f\u6210\u6811\uff0c\u5de6\u652f\u7684\u503c\u5c0f\u4e8e\u53f3\u652f\u7684\u503c\u3002\u5728\u67e5\u627e\u7684\u65f6\u5019\u4e5f\u662f\u4e00\u6837\u7684\u601d\u8def\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u6bd4\u8282\u70b9\u5927\u8fdb\u5165\u53f3\u652f\uff0c\u6bd4\u8282\u70b9\u5c0f\u8fdb\u5165\u5de6\u652f\uff0c\u76f4\u5230\u67e5\u627e\u5230\u76ee\u6807\u503c\u3002 3\u3001\u64cd\u4f5c\uff1a\u67e5\u8be2\u3001\u63d2\u5165\u3001\u5220\u9664 **\u67e5\u8be2\uff1a**\u7c7b\u4f3c\u4e8c\u5206\u67e5\u627e **\u63d2\u5165\uff1a**\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u63d2\u5165\u7b97\u6cd5\u6bd4\u8f83\u7b80\u5355\uff1a\u7a7a\u6811\uff0c\u5c31\u9996\u5148\u751f\u6210\u6839\u8282\u70b9\uff1b\u4e0d\u662f\u7a7a\u6811\u5c31\u6309\u7167\u67e5\u627e\u7684\u7b97\u6cd5\uff0c\u627e\u5230\u7236\u8282\u70b9\uff0c\u7136\u540e\u4f5c\u4e3a\u53f6\u5b50\u8282\u70b9\u63d2\u5165\uff0c\u5982\u679c\u503c\u5df2\u7ecf\u5b58\u5728\u5c31\u63d2\u5165\u5931\u8d25\u3002 **\u5220\u9664\uff1a**\u5220\u9664\u64cd\u4f5c\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\uff0c\u6709\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a \uff081\uff09\u5982\u679c\u5220\u9664\u7684\u662f\u53f6\u8282\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\uff1b \uff082\uff09\u5982\u679c\u88ab\u5220\u9664\u7684\u5143\u7d20\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u53ef\u4ee5\u5c06\u5b50\u8282\u70b9\u76f4\u63a5\u79fb\u5230\u88ab\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e\uff1b \uff083\uff09\u5982\u679c\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u8fd9\u65f6\u5019\u5c31\u91c7\u7528\u4e2d\u5e8f\u904d\u5386\uff0c\u627e\u5230\u5f85\u5220\u9664\u7684\u8282\u70b9\u7684\u540e\u7ee7\u8282\u70b9\uff0c\u5c06\u5176\u4e0e\u5f85\u5220\u9664\u7684\u8282\u70b9\u4e92\u6362\uff0c\u6b64\u65f6\u5f85\u5220\u9664\u8282\u70b9\u7684\u4f4d\u7f6e\u5df2\u7ecf\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664 \u5982\u4e0b\u56fe\uff1a \u56feb \u5c06\u5f85\u5220\u9664\u8282\u70b9\u4e0e\u540e\u7ee7\u8282\u70b9\u4e92\u6362\uff0c\u53d8\u6210\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fec \u5c06\u5f85\u5220\u9664\u5143\u7d20\u5220\u9664\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fed \u3010\u6ce8\u3011 1\u3001\u4e8c\u53c9\u67e5\u627e\u6811\u8fd8\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5373**\u5bf9\u4e8c\u53c9\u67e5\u627e\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff0c\u5373\u53ef\u5f97\u5230\u6709\u5e8f\u7684\u6570\u5217\u3002** \u200b 2\u3001\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u67e5\u8be2\u590d\u6742\u5ea6\uff0c\u548c\u4e8c\u5206\u67e5\u627e\u4e00\u6837\uff0c\u63d2\u5165\u548c\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a O(logn) \uff0c\u4f46\u662f\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u4ecd\u7136\u4f1a\u6709 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u539f\u56e0\u5728\u4e8e\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6811\u6ca1\u6709\u4fdd\u6301\u5e73\u8861\u3002 \u4e00\u3001\u4e8c\u53c9\u5e73\u8861\u6811 **1\u3001\u5b9a\u4e49\uff1a**\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u53c8\u79f0\u4e3aAVL\u6811\u3002\u5e73\u8861\u4e8c\u53c9\u6811\u6709\u5f88\u591a\u79cd\u6700\u8457\u540d\u7684\u662f\u7531\u524d\u82cf\u8054\u6570\u5b66\u5bb6Adelse\u2014Velskil\u548cLandis\u57281962\u5e74\u63d0\u51fa\u7684\uff0c\u79f0\u4e3aAVL\u6811\u3002 2\u3001\u6027\u8d28\uff1a \u5b83\u662f\u4e00\u68f5\u7a7a\u6811\u6216\u4e14\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a \uff081\uff09\u5de6\u53f3\u5b50\u6811\u6df1\u5ea6\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71; \uff082\uff09\u5de6\u53f3\u5b50\u6811\u4ecd\u7136\u4e3a\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u5e73\u8861\u56e0\u5b50BF=\u5de6\u5b50\u6811\u6df1\u5ea6\uff0d\u53f3\u5b50\u6811\u6df1\u5ea6\uff0c\u5e73\u8861\u4e8c\u53c9\u6811\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u53ea\u80fd\u662f1\uff0c0\uff0c-1\u3002 \u3010\u8bf4\u660e\u3011\u7531\u4e8e\u666e\u901a\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u4f1a\u5bb9\u6613\u5931\u53bb\u201d\u5e73\u8861\u201c\uff0c\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u4e8c\u53c9\u67e5\u627e\u6811\u4f1a\u9000\u5316\u6210\u7ebf\u6027\u7684\u94fe\u8868\uff0c\u5bfc\u81f4\u63d2\u5165\u548c\u67e5\u627e\u7684\u590d\u6742\u5ea6\u4e0b\u964d\u5230 O(n) \uff0c\u6240\u4ee5\uff0c\u8fd9\u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u8bbe\u8ba1\u7684\u521d\u8877\u3002\u90a3\u4e48\u5e73\u8861\u4e8c\u53c9\u6811\u5982\u4f55\u4fdd\u6301\u201d\u5e73\u8861\u201c\u5462\uff1f\u6839\u636e\u5b9a\u4e49\uff0c\u6709\u4e24\u4e2a\u91cd\u70b9\uff0c\u4e00\u662f\u5de6\u53f3\u4e24\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u80fd\u8d85\u8fc71\uff0c\u4e8c\u662f\u5de6\u53f3\u4e24\u5b50\u6811\u4e5f\u662f\u4e00\u9897\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u4e3e\u4f8b\uff1a\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5de6\u56fe\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u6839\u8282\u70b910\uff0c\u5de6\u53f3\u4e24\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u662f1\uff0c\u800c\u53f3\u56fe\uff0c\u867d\u7136\u6839\u8282\u70b9\u5de6\u53f3\u4e24\u5b50\u6811\u9ad8\u5ea6\u5dee\u662f0\uff0c\u4f46\u662f\u53f3\u5b50\u681115\u7684\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e3a2\uff0c\u4e0d\u7b26\u5408\u5b9a\u4e49\uff0c\u6240\u4ee5\u53f3\u56fe\u4e0d\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002 \u56fee \u7531\u6b64\u53ef\u4ee5\u770b\u51fa\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u3002\u6240\u4ee5\uff0c\u8981\u6784\u5efa\u8ddf\u7ef4\u7cfb\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u5c31\u6bd4\u666e\u901a\u7684\u4e8c\u53c9\u6811\u8981\u590d\u6742\u7684\u591a\u3002\u5728\u6784\u5efa\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u6709\u65b0\u7684\u8282\u70b9\u8981\u63d2\u5165\u65f6\uff0c\u68c0\u67e5\u662f\u5426\u56e0\u63d2\u5165\u540e\u800c\u7834\u574f\u4e86\u6811\u7684\u5e73\u8861\uff0c\u5982\u679c\u662f\uff0c\u5219\u9700\u8981\u505a\u65cb\u8f6c\u53bb\u6539\u53d8\u6811\u7684\u7ed3\u6784\u3002 3\u3001\u9884\u5907\u77e5\u8bc6\uff1a \u5de6\u65cb \uff1a \u53f3\u65cb \uff1a \u4e0d\u540c\u4e8e\u987a\u65f6\u9488\u8ddf\u9006\u65f6\u9488\u53d8\u6362\u8fd9\u79cd\u65b9\u5f0f\u53bb\u8bb0\u5fc6\uff0c\u4e0a\u9762\u4e24\u4e2a\u52a8\u6001\u56fe\u7279\u522b\u65b9\u4fbf\u8bb0\u5fc6\u8ddf\u7406\u89e3\uff1a \uff081\uff09\u5de6\u65cb\u5c31\u662f\u5c06\u8282\u70b9\u7684\u53f3\u652f\u5f80\u5de6\u62c9\uff0c\u53f3\u5b50\u8282\u70b9\u53d8\u6210\u7236\u8282\u70b9\uff0c\u5e76\u628a\u664b\u5347\u4e4b\u540e\u591a\u4f59\u7684\u5de6\u5b50\u8282\u70b9\u51fa\u8ba9\u7ed9\u964d\u7ea7\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\uff1b \uff082\uff09\u800c\u53f3\u65cb\u5c31\u662f\u53cd\u8fc7\u6765\uff0c\u5c06\u8282\u70b9\u7684\u5de6\u652f\u5f80\u53f3\u62c9\uff0c\u5de6\u5b50\u8282\u70b9\u53d8\u6210\u4e86\u7236\u8282\u70b9\uff0c\u5e76\u628a\u664b\u5347\u4e4b\u540e\u591a\u4f59\u7684\u53f3\u5b50\u8282\u70b9\u51fa\u8ba9\u7ed9\u964d\u7ea7\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u3002 \uff083\uff09\u5373\u5de6\u65cb\u5c31\u662f\u5f80\u5de6\u53d8\u6362\uff0c\u53f3\u65cb\u5c31\u662f\u5f80\u53f3\u53d8\u6362\u3002\u4e0d\u7ba1\u662f\u5de6\u65cb\u8fd8\u662f\u53f3\u65cb\uff0c\u65cb\u8f6c\u7684\u76ee\u7684\u90fd\u662f\u5c06\u8282\u70b9\u591a\u7684\u4e00\u652f\u51fa\u8ba9\u8282\u70b9\u7ed9\u53e6\u4e00\u4e2a\u8282\u70b9\u5c11\u7684\u4e00\u652f\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u50cf\u4e0a\u56fe\u662f\u5426\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u56fe\u91cc\u9762\uff0c\u5de6\u56fe\u5728\u6ca1\u63d2\u5165\u524d\u201d19\u201c\u8282\u70b9\u524d\uff0c\u8be5\u6811\u8fd8\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u4f46\u662f\u5728\u63d2\u5165\u201d19\u201c\u540e\uff0c\u5bfc\u81f4\u4e86\u201d15\u201c\u7684\u5de6\u53f3\u5b50\u6811\u5931\u53bb\u4e86\u201d\u5e73\u8861\u201c\uff0c\u6240\u4ee5\u6b64\u65f6\u53ef\u4ee5\u5c06\u201d15\u201c\u8282\u70b9\u8fdb\u884c\u5de6\u65cb\uff0c\u8ba9\u201d15\u201c\u81ea\u8eab\u628a\u8282\u70b9\u51fa\u8ba9\u7ed9\u201d17\u201c\u4f5c\u4e3a\u201d17\u201c\u7684\u5de6\u6811\uff0c\u4f7f\u5f97\u201d17\u201c\u8282\u70b9\u5de6\u53f3\u5b50\u6811\u5e73\u8861\uff0c\u800c\u201d15\u201c\u8282\u70b9\u6ca1\u6709\u5b50\u6811\uff0c\u5de6\u53f3\u4e5f\u5e73\u8861\u4e86\u3002\u5982\u4e0b\u56fe\uff1a \u56fef 4\u3001\u64cd\u4f5c\uff1a\u67e5\u8be2\u3001\u63d2\u5165\u3001\u5220\u9664 **\u67e5\u8be2\uff1a**\u7c7b\u4f3c\u4e8c\u5206\u67e5\u627e \u63d2\u5165\uff1a**\u7531\u4e8e\u5728\u6784\u5efa\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u65f6\u5019\uff0c\u5f53\u6709**\u65b0\u8282\u70b9\u63d2\u5165**\u65f6\uff0c\u90fd\u4f1a\u5224\u65ad\u63d2\u5165\u540e\u662f\u5426\u5e73\u8861\uff0c\u8fd9\u8bf4\u660e\u4e86\u63d2\u5165\u65b0\u8282\u70b9\u524d\uff0c\u90fd\u662f\u5e73\u8861\u7684\uff0c\u4e5f\u5373\u9ad8\u5ea6\u5dee\u7edd\u5bf9\u503c\u4e0d\u4f1a\u8d85\u8fc71\u3002\u5f53\u65b0\u8282\u70b9\u63d2\u5165\u540e\uff0c\u6709\u53ef\u80fd\u4f1a\u6709\u5bfc\u81f4\u6811\u4e0d\u5e73\u8861\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u8fdb\u884c\u8c03\u6574\uff0c\u800c\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\u5c31\u67094\u79cd\uff0c\u5206\u522b\u79f0\u4f5c**\u5de6\u5de6\uff0c\u5de6\u53f3\uff0c\u53f3\u5de6\uff0c\u53f3\u53f3 \u3002 \uff081\uff09\u5de6\u5de6\u5373\u4e3a\u5728\u539f\u6765\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e0a\uff0c\u5728\u8282\u70b9\u7684\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u4e0b\uff0c\u6709\u65b0\u8282\u70b9\u63d2\u5165\uff1b \u200b \uff082\uff09\u5de6\u53f3\u5373\u4e3a\u5728\u539f\u6765\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e0a\uff0c\u5728\u8282\u70b9\u7684\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u4e0b\uff0c\u6709\u65b0\u8282\u70b9\u63d2\u5165\uff1b \uff083\uff09\u53f3\u5de6\u5373\u4e3a\u5728\u539f\u6765\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e0a\uff0c\u5728\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u4e0b\uff0c\u6709\u65b0\u8282\u70b9\u63d2\u5165\uff1b \uff084\uff09\u53f3\u53f3\u5373\u4e3a\u5728\u539f\u6765\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e0a\uff0c\u5728\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u4e0b\uff0c\u6709\u65b0\u8282\u70b9\u63d2\u5165\u3002 \u63d2\u5165\u540e\u5982\u4f55\u8c03\u6574\u6811\u7684\u5e73\u8861\uff1a \u200b \u5de6\u5de6\u8c03\u6574\u5176\u5b9e\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5bf9\u8282\u70b9\u8fdb\u884c\u53f3\u65cb\uff1b \u53f3\u53f3\u8ddf\u5de6\u5de6\u4e00\u6837\uff0c\u53ea\u9700\u8981\u65cb\u8f6c\u4e00\u6b21\u5c31\u80fd\u628a\u6811\u8c03\u6574\u5e73\u8861\uff0c\u5de6\u65cb\uff1b \u800c\u5de6\u53f3\u8ddf\u53f3\u5de6\u4e5f\u4e00\u6837\uff0c\u90fd\u8981\u8fdb\u884c\u65cb\u8f6c\u4e24\u6b21\u624d\u80fd\u628a\u6811\u8c03\u6574\u5e73\u8861\u3002 \u5de6\u5de6 \uff1a \u56feg **\u5de6\u5de6\uff1a**\u5373\u4e3a\u5728\u539f\u6765\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e0a\uff0c\u5728\u8282\u70b9\u7684\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u4e0b\uff0c\u6709\u65b0\u8282\u70b9\u63d2\u5165\uff0c\u5bfc\u81f4\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e3a2\uff0c\u5982\u4e0a\u5373\u4e3a\u201d10\u201c\u8282\u70b9\u7684\u5de6\u5b50\u6811\u201d7\u201c\uff0c\u7684\u5de6\u5b50\u6811\u201d4\u201c\uff0c\u63d2\u5165\u4e86\u8282\u70b9\u201d5\u201c\u6216\u201d3\u201c\u5bfc\u81f4\u5931\u8861\u3002 **\u5de6\u5de6\u8c03\u6574\uff1a**\u5176\u5b9e\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5bf9\u8282\u70b9\u8fdb\u884c\u53f3\u65cb\u5373\u53ef\uff0c\u5982\u4e0b\u56fe\uff0c\u5bf9\u8282\u70b9\u201d10\u201c\u8fdb\u884c\u53f3\u65cb\uff1a \u56feh \u5de6\u53f3 \uff1a \u56fei **\u5de6\u53f3\uff1a**\u5373\u4e3a\u5728\u539f\u6765\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e0a\uff0c\u5728\u8282\u70b9\u7684\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u4e0b\uff0c\u6709\u65b0\u8282\u70b9\u63d2\u5165\uff0c\u5bfc\u81f4\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e3a2\uff0c\u5982\u4e0a\u5373\u4e3a\u201d11\u201c\u8282\u70b9\u7684\u5de6\u5b50\u6811\u201d7\u201c\uff0c\u7684\u53f3\u5b50\u6811\u201d9\u201c\uff0c\u63d2\u5165\u4e86\u8282\u70b9\u201d10\u201c\u6216\u201d8\u201c\u5bfc\u81f4\u5931\u8861\u3002 **\u5de6\u53f3\u8c03\u6574\uff1a**\u5c31\u4e0d\u80fd\u50cf\u5de6\u5de6\u4e00\u6837\uff0c\u8fdb\u884c\u4e00\u6b21\u65cb\u8f6c\u5c31\u5b8c\u6210\u8c03\u6574\u3002\u6211\u4eec\u4e0d\u59a8\u5148\u8bd5\u7740\u8ba9\u5de6\u53f3\u50cf\u5de6\u5de6\u4e00\u6837\u5bf9\u201d11\u201c\u8282\u70b9\u8fdb\u884c\u53f3\u65cb\uff0c\u7ed3\u679c\u56fe\u5982\u4e0b\uff0c\u53f3\u56fe\u7684\u4e8c\u53c9\u6811\u4f9d\u7136\u4e0d\u5e73\u8861\uff0c\u800c\u53f3\u56fe\u5c31\u662f\u63a5\u4e0b\u6765\u8981\u8bb2\u7684\u53f3\u5de6\uff0c\u5373\u5de6\u53f3\u8ddf\u53f3\u5de6\u4e92\u4e3a\u955c\u50cf\uff0c\u5de6\u5de6\u8ddf\u53f3\u53f3\u4e5f\u4e92\u4e3a\u955c\u50cf\u3002 \u56fej \u53f3\u53f3\u8ddf\u5de6\u5de6\u4e00\u6837\uff0c\u53ea\u9700\u8981\u65cb\u8f6c\u4e00\u6b21\u5c31\u80fd\u628a\u6811\u8c03\u6574\u5e73\u8861\uff0c\u800c\u5de6\u53f3\u8ddf\u53f3\u5de6\u4e5f\u4e00\u6837\uff0c\u90fd\u8981\u8fdb\u884c\u65cb\u8f6c\u4e24\u6b21\u624d\u80fd\u628a\u6811\u8c03\u6574\u5e73\u8861 \uff0c\u6240\u4ee5\uff0c\u9996\u5148\u4e0a\u56fe\u7684\u8fd9\u79cd\u8c03\u6574\u662f\u9519\u8bef\u7684\uff0c\u6b63\u786e\u7684\u8c03\u6574\u65b9\u5f0f\u662f\uff0c\u5c06\u5de6\u53f3\u8fdb\u884c\u7b2c\u4e00\u6b21\u65cb\u8f6c\uff0c\u5c06\u5de6\u53f3\u5148\u8c03\u6574\u6210\u5de6\u5de6\uff0c\u7136\u540e\u518d\u5bf9\u5de6\u5de6\u8fdb\u884c\u8c03\u6574\uff0c\u4ece\u800c\u4f7f\u5f97\u4e8c\u53c9\u6811\u5e73\u8861\u3002 \u5373\u5148\u5bf9\u4e0a\u56fe\u7684\u8282\u70b9\u201d7\u201c\u8fdb\u884c\u5de6\u65cb\uff0c\u4f7f\u5f97\u4e8c\u53c9\u6811\u53d8\u6210\u4e86\u5de6\u5de6\uff0c\u4e4b\u540e\u518d\u5bf9\u201d11\u201c\u8282\u70b9\u8fdb\u884c\u53f3\u65cb\uff0c\u6b64\u65f6\u4e8c\u53c9\u6811\u5c31\u8c03\u6574\u5b8c\u6210\uff0c\u5982\u4e0b\u56fe\uff1a \u56fek \u53f3\u5de6 \uff1a \u56fel **\u53f3\u5de6\uff1a**\u5373\u4e3a\u5728\u539f\u6765\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e0a\uff0c\u5728\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u4e0b\uff0c\u6709\u65b0\u8282\u70b9\u63d2\u5165\uff0c\u5bfc\u81f4\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e3a2\uff0c\u5982\u4e0a\u5373\u4e3a\u201d11\u201c\u8282\u70b9\u7684\u53f3\u5b50\u6811\u201d15\u201c\uff0c\u7684\u5de6\u5b50\u6811\u201d13\u201c\uff0c\u63d2\u5165\u4e86\u8282\u70b9\u201d12\u201c\u6216\u201d14\u201c\u5bfc\u81f4\u5931\u8861\u3002 **\u53f3\u5de6\u8c03\u6574\uff1a**\u53f3\u5de6\u8ddf\u5de6\u53f3\u5176\u5b9e\u4e92\u4e3a\u955c\u50cf\uff0c\u6240\u4ee5\u8c03\u6574\u8fc7\u7a0b\u5c31\u53cd\u8fc7\u6765\uff0c\u5148\u5bf9\u8282\u70b9\u201d15\u201c\u8fdb\u884c\u53f3\u65cb\uff0c\u4f7f\u5f97\u4e8c\u53c9\u6811\u53d8\u6210\u53f3\u53f3\uff0c\u4e4b\u540e\u518d\u5bf9\u201d11\u201c\u8282\u70b9\u8fdb\u884c\u5de6\u65cb\uff0c\u6b64\u65f6\u4e8c\u53c9\u6811\u5c31\u8c03\u6574\u5b8c\u6210\uff0c\u5982\u4e0b\u56fe: \u56fem \u53f3\u53f3 \uff1a \u56fen **\u53f3\u53f3\uff1a**\u5373\u4e3a\u5728\u539f\u6765\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u4e0a\uff0c\u5728\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u4e0b\uff0c\u6709\u65b0\u8282\u70b9\u63d2\u5165\uff0c\u5bfc\u81f4\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e3a2\uff0c\u5982\u4e0a\u5373\u4e3a\u201d11\u201c\u8282\u70b9\u7684\u53f3\u5b50\u6811\u201d13\u201c\uff0c\u7684\u5de6\u5b50\u6811\u201d15\u201c\uff0c\u63d2\u5165\u4e86\u8282\u70b9\u201d14\u201c\u6216\u201d19\u201c\u5bfc\u81f4\u5931\u8861\u3002 **\u53f3\u53f3\u8c03\u6574\uff1a**\u53f3\u53f3\u53ea\u9700\u5bf9\u8282\u70b9\u8fdb\u884c\u4e00\u6b21\u5de6\u65cb\u5373\u53ef\u8c03\u6574\u5e73\u8861\uff0c\u5982\u4e0b\u56fe\uff0c\u5bf9\u201d11\u201c\u8282\u70b9\u8fdb\u884c\u5de6\u65cb\u3002 \u56feo **\u5220\u9664\uff1a**\u5220\u9664\u4e8c\u53c9\u6811\u8282\u70b9\u603b\u7ed3\u8d77\u6765\u5c31\u4e24\u4e2a\u5224\u65ad\uff1a \u2460.\u5220\u9664\u7684\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u8282\u70b9\uff1f \u2461.\u5220\u9664\u4e86\u8282\u70b9\u4e4b\u540e\u662f\u5426\u5bfc\u81f4\u5931\u8861\uff1f \u200b \u8282\u70b9\u7684\u7c7b\u578b\u6709\u4e09\u79cd\uff1a \u2460.\u53f6\u5b50\u8282\u70b9\uff1b \u2461.\u53ea\u6709\u5de6\u5b50\u6811\u6216\u53ea\u6709\u53f3\u5b50\u6811\uff1b \u2462.\u65e2\u6709\u5de6\u5b50\u6811\u53c8\u6709\u53f3\u5b50\u6811\u3002 \u5220\u9664\u540e\u8c03\u6574\uff1a \u200b \u9488\u5bf9\u8fd9\u4e09\u79cd\u8282\u70b9\u7c7b\u578b\uff0c\u518d\u5f15\u5165\u5224\u65ad2\uff09\uff0c\u6240\u4ee5**\u5904\u7406**\u601d\u8def\u5206\u522b\u662f\uff1a \u200b \uff081\uff09\u5f53\u5220\u9664\u7684\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u5c06\u8282\u70b9\u5220\u9664\uff0c\u7136\u540e\u4ece\u7236\u8282\u70b9\u5f00\u59cb\uff0c\u5224\u65ad\u662f\u5426\u5931\u8861\uff0c\u5982\u679c\u6ca1\u6709\u5931\u8861\uff0c\u5219\u518d\u5224\u65ad\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u662f\u5426\u5931\u8861\uff0c\u76f4\u5230\u6839\u8282\u70b9\uff0c\u6b64\u65f6\u5230\u6839\u8282\u70b9\u8fd8\u53d1\u73b0\u6ca1\u6709\u5931\u8861\uff0c\u5219\u8bf4\u6b64\u65f6\u6811\u662f\u5e73\u8861\u7684\uff1b\u5982\u679c\u4e2d\u95f4\u8fc7\u7a0b\u53d1\u73b0\u5931\u8861\uff0c\u5219\u5224\u65ad\u5c5e\u4e8e\u54ea\u79cd\u7c7b\u578b \u7684\u5931\u8861\uff08\u5de6\u5de6\uff0c\u5de6\u53f3\uff0c\u53f3\u5de6\uff0c\u53f3\u53f3\uff09\uff0c\u7136\u540e\u8fdb\u884c\u8c03\u6574\u3002 \u200b \uff082\uff09\u5220\u9664\u7684\u8282\u70b9\u53ea\u6709\u5de6\u5b50\u6811\u6216\u53ea\u6709\u53f3\u5b50\u6811\uff0c\u8fd9\u79cd\u60c5\u51b5\u5176\u5b9e\u5c31\u6bd4\u5220\u9664\u53f6\u5b50\u8282\u70b9\u7684\u6b65\u9aa4\u591a\u4e00\u6b65\uff0c\u5c31\u662f\u5c06\u8282\u70b9\u5220\u9664\uff0c\u7136\u540e\u628a\u4ec5\u6709\u4e00\u652f\u7684\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u66ff\u4ee3\u539f\u6709\u7ed3\u70b9\u7684\u4f4d\u7f6e\uff0c\u540e\u9762\u7684\u6b65\u9aa4\u5c31\u4e00\u6837\u4e86\uff0c\u4ece\u7236\u8282\u70b9\u5f00\u59cb\uff0c\u5224\u65ad\u662f\u5426\u5931\u8861\uff0c\u5982\u679c\u6ca1\u6709\u5931\u8861\uff0c\u5219\u518d\u5224\u65ad\u7236\u8282 \u70b9\u7684\u7236\u8282\u70b9\u662f\u5426\u5931\u8861\uff0c\u76f4\u5230\u6839\u8282\u70b9\uff0c\u5982\u679c\u4e2d\u95f4\u8fc7\u7a0b\u53d1\u73b0\u5931\u8861\uff0c\u5219\u6839\u636e\u5931\u8861\u7684\u7c7b\u578b\u8fdb\u884c\u8c03\u6574\u3002 \u200b \uff083\uff09\u5220\u9664\u7684\u8282\u70b9\u65e2\u6709\u5de6\u5b50\u6811\u53c8\u6709\u53f3\u5b50\u6811\uff0c\u8fd9\u79cd\u60c5\u51b5\u53c8\u6bd4\u4e0a\u9762\u8fd9\u79cd\u591a\u4e00\u6b65\uff0c\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u627e\u5230\u5f85\u5220\u9664\u8282\u70b9\u7684\u524d\u9a71\u6216\u8005\u540e\u9a71\u90fd\u884c\uff0c\u7136\u540e\u4e0e\u5f85\u5220\u9664\u8282\u70b9\u4e92\u6362\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u5f85\u5220\u9664\u7684\u8282\u70b9\u5220\u6389\uff0c\u540e\u9762\u7684\u6b65\u9aa4\u4e5f\u662f\u4e00\u6837\uff0c\u5224\u65ad\u662f\u5426\u5931\u8861\uff0c\u7136\u540e\u6839\u636e\u5931\u8861\u7c7b\u578b\u8fdb\u884c\u8c03\u6574\u3002 \u3010\u5c0f\u7ed3\u3011 \u6700\u540e\u603b\u7ed3\u4e00\u4e0b\uff0c\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(logN) \u3002\u63d2\u5165\u7684\u8bdd\u4e0a\u9762\u4e5f\u8bf4\uff0c\u5931\u8861\u7684\u60c5\u51b5\u67094\u79cd\uff0c\u5de6\u5de6\uff0c\u5de6\u53f3\uff0c\u53f3\u5de6\uff0c\u53f3\u53f3\uff0c\u5373\u4e00\u65e6\u63d2\u5165\u65b0\u8282\u70b9\u5bfc\u81f4\u5931\u8861\u9700\u8981\u8c03\u6574\uff0c\u6700\u591a\u4e5f\u53ea\u8981\u65cb\u8f6c2\u6b21\uff0c\u6240\u4ee5\uff0c\u63d2\u5165\u590d\u6742\u5ea6\u662f O(1) \uff0c\u4f46\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u4e5f\u4e0d\u662f\u5b8c\u7f8e\u7684\uff0c\u4e5f\u6709\u7f3a\u70b9\uff0c\u4ece\u4e0a\u9762\u5220\u9664\u5904\u7406\u601d\u8def\u4e2d\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u5c31\u662f\u5220\u9664\u8282\u70b9\u65f6\u6709\u53ef\u80fd\u56e0\u4e3a\u5931\u8861\uff0c\u5bfc\u81f4\u9700\u8981\u4ece\u5220\u9664\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\uff0c\u4e0d\u65ad\u7684\u56de\u6eaf\u5230\u6839\u8282\u70b9\uff0c\u5982\u679c\u8fd9\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u5f88\u9ad8\u7684\u8bdd\uff0c\u90a3\u4e2d\u95f4\u5c31\u8981\u5224\u65ad\u5f88\u591a\u4e2a\u8282\u70b9\u3002","title":"Binary search tree"},{"location":"datastructure/tree/partition%20tree/%E5%88%92%E5%88%86%E6%A0%91/","text":"\u5212\u5206\u6811 \u00b6 \u5212\u5206\u6811\u662f\u4e00\u79cd\u57fa\u4e8e\u7ebf\u6bb5\u6811\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e5f\u5229\u7528\u4e86\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u5374\u6bd4\u7ebf\u6bb5\u6811\u9ad8\u6548\u5f88\u591a\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5212\u5206\u6811\u53c8\u591a\u4e86\u4e00\u4e2a\u6027\u8d28\uff1a\u5728\u5212\u5206\u65f6\u4e0d\u662f\u968f\u610f\u5212\u5206\uff0c\u4e5f\u4e0d\u662f\u6392\u5e8f\u540e\u76f4\u63a5\u5212\u5206\uff08\u56e0\u4e3a\u8fd9\u6837\u4f1a\u7834\u574f\u539f\u6709\u7ed3\u6784\uff09\uff0c\u800c\u662f\u6392\u5e8f\u540e\u4ecd\u4fdd\u6301\u539f\u6765\u7684\u76f8\u5bf9\u987a\u5e8f\u518d\u5206\u5230\u5de6\u53f3\u5b50\u6811\u3002 \u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff1a \u6574\u4e2a\u8fc7\u7a0b\u5206\u4e3a\u5efa\u6811\u548c\u67e5\u8be2\u4e24\u4e2a\u9636\u6bb5\uff1a 1\uff09 \u5efa\u6811 \uff1a\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4tree[30] [1000]\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u8868\u793a\u5c42\u6570\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u8868\u793a\u8fd9\u4e00\u5c42\u7b2ci\u4e2a\u6570\u7684\u503c\uff0c\u7528\u6765\u8868\u793a\u8fd9\u68f5\u5212\u5206\u6811\uff0c\u7136\u540e\u5b9a\u4e49sorted[1000]\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6392\u5e8f\u597d\u7684\u539f\u5e8f\u5217\uff0c\u7136\u540e\u8bb0\u5f55\u6bcf\u4e00\u5c42\u524di\u4e2a\u6570\u6709\u591a\u5c11\u8fdb\u5165\u4e86\u4e0b\u4e00\u5c42\u7684\u5de6\u5b50\u6811\uff0c\u5b58\u5728toleft[30] [1000]\u6570\u7ec4\u4e2d\uff0c\u5728\u5efa\u6811\u4e2d\u6ca1\u7528\uff0c\u4f46\u8bb0\u5f55\u4e0b\u6765\u5bf9\u67e5\u627e\u65f6\u6709\u7528\uff0c\u7528\u5206\u6cbb\u7684\u601d\u60f3\u5206\u914d\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5c06\u4e0d\u5927\u4e8e\u4e2d\u95f4\u503cmid\u7684\u6570\u5206\u914d\u5230\u5de6\u5b50\u6811\u4e2d\u53bb\uff0c\u5927\u4e8e\u4e2d\u95f4\u503c\u7684\u5206\u914d\u5230\u53f3\u5b50\u6811\u4e2d\u53bb\uff0c\u4f46\u6709\u65f6\u4e3a\u4e86\u5de6\u53f3\u5c3d\u53ef\u80fd\u4e2a\u6570\u76f8\u7b49\uff0c\u8981\u628a\u7b49\u4e8e\u4e2d\u95f4\u503c\u7684\u6570\u4e24\u8fb9\u90fd\u5206\u914d\uff0c\u4e8e\u662f\u5b9a\u4e49same\u6765\u5b58\u50a8\u591a\u5c11\u7b49\u4e8e\u4e2d\u95f4\u503c\u7684\u6570\u8fdb\u5165\u5de6\u5b50\u6811\uff0c\u5206\u914d\u5b8c\u6bd5\u540e\u518d\u9012\u5f52\u5206\u914d\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002\u8eab\u4e3a\u9012\u5f52\uff0c\u600e\u4e48\u4e5f\u8981\u6709\u4e2a\u51fa\u53e3\u5427\uff0c\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\u65f6\u5c31\u8fd4\u56de\uff0c\u5373if\uff08l==r\uff09 return\uff1b 2\uff09 \u67e5\u8be2 \uff1a\u6309\u7167\u4e4b\u524d\u5b58\u50a8\u4e0b\u7684\u8fdb\u5165\u4e0b\u4e00\u5c42\u5de6\u5b50\u6811\u4e2a\u6570\u7684\u6570\u7ec4toleft\uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa\u533a\u95f4\u5185\u7b2ck\u5927\u7684\u6570\u5728\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\uff0c\u5e76\u8ba1\u7b97\u51fa\u4e0b\u4e00\u5c42\u76f8\u5e94\u5b50\u6811\u7684\u5de6\u53f3\u8fb9\u754c\uff0c\u7136\u540e\u9012\u5f52\u76f8\u5e94\u5b50\u6811\uff0c\u540c\u4e0a\uff0c\u9012\u5f52\u51fa\u53e3\u4e5f\u662f\u5230\u8fbe\u53f6\u5b50\u8282\u70b9\u65f6\u8fd4\u56de\u3002\u8be6\u89c1\u6ce8\u91ca\u2026\u2026 \u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4ee3\u7801\u5448\u4e0a\uff1a #include <iostream> #include <algorithm> using namespace std ; int tree [ 30 ][ 1000 ], sorted [ 1000 ], toleft [ 30 ][ 1000 ], n , m , ans ; //tree\u548ctoleft\u7684\u4e24\u4e2a\u7ef4\u5ea6\u5206\u522b\u5b58\u50a8\u6df1\u5ea6\u548c\u5e8f\u5217\uff0csorted\u5b58\u50a8\u7684\u662f\u6392\u5e8f\u597d\u7684\u5e8f\u5217 void buildtree ( int l , int r , int dep ) //\u6784\u5efa\u5212\u5206\u6811 { if ( l == r ) return ; //\u9047\u89c1\u53f6\u5b50\u8282\u70b9\u5c31\u8fd4\u56de int mid = ( l + r ) / 2 ; //\u4e8c\u5206 int same = mid - l + 1 ; //same\u6700\u7ec8\u4fdd\u5b58\u7684\u662f\u548c\u4e2d\u95f4\u503c\u76f8\u540c\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u4ee5\u4fbf\u786e\u5b9a\u5206\u5230\u54ea\u4e00\u533a\u95f4 for ( int i = l ; i <= r ; i ++ ) if ( tree [ dep ][ i ] < sorted [ mid ]) same -- ; int lpos = l ; int rpos = mid + 1 ; //\u5de6\u6307\u9488\u548c\u53f3\u6307\u9488\uff0c\u5e76\u975e\u5e38\u7528\u7684\u6307\u9488\uff0c\u662f\u7528\u6765\u4fdd\u5b58\u73b0\u5728\u5404\u533a\u95f4\u5185\u5143\u7d20\u4e2a\u6570 for ( int i = l ; i <= r ; i ++ ) { if ( tree [ dep ][ i ] < sorted [ mid ]) //\u5c0f\u4e8e\u4e2d\u95f4\u503c tree [ dep + 1 ][ lpos ++ ] = tree [ dep ][ i ]; //\u5206\u914d\u5230\u5de6\u5b50\u533a\u95f4 else if ( tree [ dep ][ i ] == sorted [ mid ] && same > 0 ) //\u7b49\u4e8e\u4e2d\u95f4\u503c\u4e14\u76f8\u540c\u4e2a\u6570\u5927\u4e8e0 { same -- ; tree [ dep + 1 ][ lpos ++ ] = tree [ dep ][ i ]; //\u5206\u914d\u5230\u53f3\u5b50\u533a\u95f4 } else tree [ dep + 1 ][ rpos ++ ] = tree [ dep ][ i ]; //\u5269\u4e0b\u7684\u5206\u914d\u5230\u53f3\u5b50\u533a\u95f4 toleft [ dep ][ i ] = toleft [ dep ][ l - 1 ] + lpos - l ; //toleft\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e00\u5c42\u524di\u4e2a\u6570\u6709\u591a\u5c11\u4e2a\u8fdb\u5165\u4e0b\u4e00\u5c42\u7684\u5de6\u5b50\u533a\u95f4\uff0c\u67e5\u8be2\u65f6\u6709\u7528 } buildtree ( l , mid , dep + 1 ); //\u6784\u5efa\u5de6\u5b50\u533a\u95f4\uff08\u5de6\u5b50\u6811\uff09 buildtree ( mid + 1 , r , dep + 1 ); //\u6784\u5efa\u53f3\u5b50\u533a\u95f4\uff08\u53f3\u5b50\u6811\uff09 } int search ( int L , int R , int l , int r , int dep , int k ) //\u67e5\u8be2\u7b2ck\u5927\u7684\u6570 { if ( l == r ) return tree [ dep ][ l ]; //\u67e5\u8be2\u5230\u7b26\u5408\u8981\u6c42\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u8fd4\u56de\u76f8\u5e94\u7684\u503c int mid = ( L + R ) / 2 ; //L,R\u4e3a\u5927\u533a\u95f4\uff08\u4e3b\u8981\u662f\u6bcf\u4e2a\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u7684\u8fb9\u754c\uff09 int cnt = toleft [ dep ][ r ] - toleft [ dep ][ l - 1 ]; //\u6c42\u51fa[l,r]\u533a\u95f4\u5185\u6709\u591a\u5c11\u6570\u8fdb\u5165\u4e0b\u4e00\u5c42\u5de6\u5b50\u533a\u95f4 if ( cnt >= k ) //\u7b2ck\u5927\u7684\u6570\u5bf9\u5e94\u8282\u70b9\u5728\u5de6\u5b50\u6811 { int newl = L + toleft [ dep ][ l - 1 ] - toleft [ dep ][ L - 1 ]; //\u6c42\u51fa\u4e0b\u4e00\u5c42\u7b2ck\u5927\u7684\u6570\u6240\u5728\u533a\u95f4\u8fb9\u754c int newr = newl + cnt - 1 ; return search ( L , mid , newl , newr , dep + 1 , k ); } else //\u5728\u53f3\u5b50\u6811 { int newr = r + toleft [ dep ][ R ] - toleft [ dep ][ r ]; //\u6c42\u51fa\u4e0b\u4e00\u5c42\u7b2ck\u5927\u7684\u6570\u6240\u5728\u533a\u95f4\u8fb9\u754c int newl = newr - ( r - l - cnt ); return search ( mid + 1 , R , newl , newr , dep + 1 , k - cnt ); } } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> tree [ 0 ][ i ]; sorted [ i ] = tree [ 0 ][ i ]; } sort ( sorted + 1 , sorted + n + 1 ); //\u4e3asorted\u6570\u7ec4\u6392\u5e8f buildtree ( 1 , n , 0 ); //\u5efa\u6811 int a , b , c ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> a >> b >> c ; //\u8f93\u5165\u8be2\u95ee cout << search ( 1 , n , a , b , 0 , c ) << endl ; //\u67e5\u8be2\u7b2ck\u5927\u7684\u6570 } return 0 ; }","title":"\u5212\u5206\u6811"},{"location":"datastructure/tree/partition%20tree/%E5%88%92%E5%88%86%E6%A0%91/#_1","text":"\u5212\u5206\u6811\u662f\u4e00\u79cd\u57fa\u4e8e\u7ebf\u6bb5\u6811\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e5f\u5229\u7528\u4e86\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u5374\u6bd4\u7ebf\u6bb5\u6811\u9ad8\u6548\u5f88\u591a\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u5212\u5206\u6811\u53c8\u591a\u4e86\u4e00\u4e2a\u6027\u8d28\uff1a\u5728\u5212\u5206\u65f6\u4e0d\u662f\u968f\u610f\u5212\u5206\uff0c\u4e5f\u4e0d\u662f\u6392\u5e8f\u540e\u76f4\u63a5\u5212\u5206\uff08\u56e0\u4e3a\u8fd9\u6837\u4f1a\u7834\u574f\u539f\u6709\u7ed3\u6784\uff09\uff0c\u800c\u662f\u6392\u5e8f\u540e\u4ecd\u4fdd\u6301\u539f\u6765\u7684\u76f8\u5bf9\u987a\u5e8f\u518d\u5206\u5230\u5de6\u53f3\u5b50\u6811\u3002 \u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\uff1a \u6574\u4e2a\u8fc7\u7a0b\u5206\u4e3a\u5efa\u6811\u548c\u67e5\u8be2\u4e24\u4e2a\u9636\u6bb5\uff1a 1\uff09 \u5efa\u6811 \uff1a\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4tree[30] [1000]\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u8868\u793a\u5c42\u6570\uff0c\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u8868\u793a\u8fd9\u4e00\u5c42\u7b2ci\u4e2a\u6570\u7684\u503c\uff0c\u7528\u6765\u8868\u793a\u8fd9\u68f5\u5212\u5206\u6811\uff0c\u7136\u540e\u5b9a\u4e49sorted[1000]\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u6392\u5e8f\u597d\u7684\u539f\u5e8f\u5217\uff0c\u7136\u540e\u8bb0\u5f55\u6bcf\u4e00\u5c42\u524di\u4e2a\u6570\u6709\u591a\u5c11\u8fdb\u5165\u4e86\u4e0b\u4e00\u5c42\u7684\u5de6\u5b50\u6811\uff0c\u5b58\u5728toleft[30] [1000]\u6570\u7ec4\u4e2d\uff0c\u5728\u5efa\u6811\u4e2d\u6ca1\u7528\uff0c\u4f46\u8bb0\u5f55\u4e0b\u6765\u5bf9\u67e5\u627e\u65f6\u6709\u7528\uff0c\u7528\u5206\u6cbb\u7684\u601d\u60f3\u5206\u914d\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5c06\u4e0d\u5927\u4e8e\u4e2d\u95f4\u503cmid\u7684\u6570\u5206\u914d\u5230\u5de6\u5b50\u6811\u4e2d\u53bb\uff0c\u5927\u4e8e\u4e2d\u95f4\u503c\u7684\u5206\u914d\u5230\u53f3\u5b50\u6811\u4e2d\u53bb\uff0c\u4f46\u6709\u65f6\u4e3a\u4e86\u5de6\u53f3\u5c3d\u53ef\u80fd\u4e2a\u6570\u76f8\u7b49\uff0c\u8981\u628a\u7b49\u4e8e\u4e2d\u95f4\u503c\u7684\u6570\u4e24\u8fb9\u90fd\u5206\u914d\uff0c\u4e8e\u662f\u5b9a\u4e49same\u6765\u5b58\u50a8\u591a\u5c11\u7b49\u4e8e\u4e2d\u95f4\u503c\u7684\u6570\u8fdb\u5165\u5de6\u5b50\u6811\uff0c\u5206\u914d\u5b8c\u6bd5\u540e\u518d\u9012\u5f52\u5206\u914d\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002\u8eab\u4e3a\u9012\u5f52\uff0c\u600e\u4e48\u4e5f\u8981\u6709\u4e2a\u51fa\u53e3\u5427\uff0c\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\u65f6\u5c31\u8fd4\u56de\uff0c\u5373if\uff08l==r\uff09 return\uff1b 2\uff09 \u67e5\u8be2 \uff1a\u6309\u7167\u4e4b\u524d\u5b58\u50a8\u4e0b\u7684\u8fdb\u5165\u4e0b\u4e00\u5c42\u5de6\u5b50\u6811\u4e2a\u6570\u7684\u6570\u7ec4toleft\uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa\u533a\u95f4\u5185\u7b2ck\u5927\u7684\u6570\u5728\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u6811\u8fd8\u662f\u53f3\u5b50\u6811\uff0c\u5e76\u8ba1\u7b97\u51fa\u4e0b\u4e00\u5c42\u76f8\u5e94\u5b50\u6811\u7684\u5de6\u53f3\u8fb9\u754c\uff0c\u7136\u540e\u9012\u5f52\u76f8\u5e94\u5b50\u6811\uff0c\u540c\u4e0a\uff0c\u9012\u5f52\u51fa\u53e3\u4e5f\u662f\u5230\u8fbe\u53f6\u5b50\u8282\u70b9\u65f6\u8fd4\u56de\u3002\u8be6\u89c1\u6ce8\u91ca\u2026\u2026 \u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4ee3\u7801\u5448\u4e0a\uff1a #include <iostream> #include <algorithm> using namespace std ; int tree [ 30 ][ 1000 ], sorted [ 1000 ], toleft [ 30 ][ 1000 ], n , m , ans ; //tree\u548ctoleft\u7684\u4e24\u4e2a\u7ef4\u5ea6\u5206\u522b\u5b58\u50a8\u6df1\u5ea6\u548c\u5e8f\u5217\uff0csorted\u5b58\u50a8\u7684\u662f\u6392\u5e8f\u597d\u7684\u5e8f\u5217 void buildtree ( int l , int r , int dep ) //\u6784\u5efa\u5212\u5206\u6811 { if ( l == r ) return ; //\u9047\u89c1\u53f6\u5b50\u8282\u70b9\u5c31\u8fd4\u56de int mid = ( l + r ) / 2 ; //\u4e8c\u5206 int same = mid - l + 1 ; //same\u6700\u7ec8\u4fdd\u5b58\u7684\u662f\u548c\u4e2d\u95f4\u503c\u76f8\u540c\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u4ee5\u4fbf\u786e\u5b9a\u5206\u5230\u54ea\u4e00\u533a\u95f4 for ( int i = l ; i <= r ; i ++ ) if ( tree [ dep ][ i ] < sorted [ mid ]) same -- ; int lpos = l ; int rpos = mid + 1 ; //\u5de6\u6307\u9488\u548c\u53f3\u6307\u9488\uff0c\u5e76\u975e\u5e38\u7528\u7684\u6307\u9488\uff0c\u662f\u7528\u6765\u4fdd\u5b58\u73b0\u5728\u5404\u533a\u95f4\u5185\u5143\u7d20\u4e2a\u6570 for ( int i = l ; i <= r ; i ++ ) { if ( tree [ dep ][ i ] < sorted [ mid ]) //\u5c0f\u4e8e\u4e2d\u95f4\u503c tree [ dep + 1 ][ lpos ++ ] = tree [ dep ][ i ]; //\u5206\u914d\u5230\u5de6\u5b50\u533a\u95f4 else if ( tree [ dep ][ i ] == sorted [ mid ] && same > 0 ) //\u7b49\u4e8e\u4e2d\u95f4\u503c\u4e14\u76f8\u540c\u4e2a\u6570\u5927\u4e8e0 { same -- ; tree [ dep + 1 ][ lpos ++ ] = tree [ dep ][ i ]; //\u5206\u914d\u5230\u53f3\u5b50\u533a\u95f4 } else tree [ dep + 1 ][ rpos ++ ] = tree [ dep ][ i ]; //\u5269\u4e0b\u7684\u5206\u914d\u5230\u53f3\u5b50\u533a\u95f4 toleft [ dep ][ i ] = toleft [ dep ][ l - 1 ] + lpos - l ; //toleft\u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e00\u5c42\u524di\u4e2a\u6570\u6709\u591a\u5c11\u4e2a\u8fdb\u5165\u4e0b\u4e00\u5c42\u7684\u5de6\u5b50\u533a\u95f4\uff0c\u67e5\u8be2\u65f6\u6709\u7528 } buildtree ( l , mid , dep + 1 ); //\u6784\u5efa\u5de6\u5b50\u533a\u95f4\uff08\u5de6\u5b50\u6811\uff09 buildtree ( mid + 1 , r , dep + 1 ); //\u6784\u5efa\u53f3\u5b50\u533a\u95f4\uff08\u53f3\u5b50\u6811\uff09 } int search ( int L , int R , int l , int r , int dep , int k ) //\u67e5\u8be2\u7b2ck\u5927\u7684\u6570 { if ( l == r ) return tree [ dep ][ l ]; //\u67e5\u8be2\u5230\u7b26\u5408\u8981\u6c42\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u8fd4\u56de\u76f8\u5e94\u7684\u503c int mid = ( L + R ) / 2 ; //L,R\u4e3a\u5927\u533a\u95f4\uff08\u4e3b\u8981\u662f\u6bcf\u4e2a\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\u7684\u8fb9\u754c\uff09 int cnt = toleft [ dep ][ r ] - toleft [ dep ][ l - 1 ]; //\u6c42\u51fa[l,r]\u533a\u95f4\u5185\u6709\u591a\u5c11\u6570\u8fdb\u5165\u4e0b\u4e00\u5c42\u5de6\u5b50\u533a\u95f4 if ( cnt >= k ) //\u7b2ck\u5927\u7684\u6570\u5bf9\u5e94\u8282\u70b9\u5728\u5de6\u5b50\u6811 { int newl = L + toleft [ dep ][ l - 1 ] - toleft [ dep ][ L - 1 ]; //\u6c42\u51fa\u4e0b\u4e00\u5c42\u7b2ck\u5927\u7684\u6570\u6240\u5728\u533a\u95f4\u8fb9\u754c int newr = newl + cnt - 1 ; return search ( L , mid , newl , newr , dep + 1 , k ); } else //\u5728\u53f3\u5b50\u6811 { int newr = r + toleft [ dep ][ R ] - toleft [ dep ][ r ]; //\u6c42\u51fa\u4e0b\u4e00\u5c42\u7b2ck\u5927\u7684\u6570\u6240\u5728\u533a\u95f4\u8fb9\u754c int newl = newr - ( r - l - cnt ); return search ( mid + 1 , R , newl , newr , dep + 1 , k - cnt ); } } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> tree [ 0 ][ i ]; sorted [ i ] = tree [ 0 ][ i ]; } sort ( sorted + 1 , sorted + n + 1 ); //\u4e3asorted\u6570\u7ec4\u6392\u5e8f buildtree ( 1 , n , 0 ); //\u5efa\u6811 int a , b , c ; for ( int i = 1 ; i <= m ; i ++ ) { cin >> a >> b >> c ; //\u8f93\u5165\u8be2\u95ee cout << search ( 1 , n , a , b , 0 , c ) << endl ; //\u67e5\u8be2\u7b2ck\u5927\u7684\u6570 } return 0 ; }","title":"\u5212\u5206\u6811"},{"location":"datastructure/tree/segment%20tree/segement_tree/","text":"\u57fa\u672c\u6982\u5ff5 \u00b6 \u7ebf\u6bb5\u6811(segment tree)\u4e5f\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u533a\u95f4 \uff0c\u53f6\u5b50\u8282\u70b9\u5219\u662f\u4e00\u4e2a\u5355\u70b9\u533a\u95f4\uff0c\u4e5f\u5373 \u3002\u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u5176\u5de6\u5b50\u8282\u70b9\u7684\u533a\u95f4\u4e3a \uff0c\u53f3\u5b50\u8282\u70b9\u7684\u533a\u95f4\u4e3a \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u662f\u5176\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\u7684\u533a\u95f4\uff0c\u533a\u95f4\u5927\u5c0f\u4e0e\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u5927\u5c0f\u65e0\u5173 \u3002 \u6839\u636e\u4e0a\u8ff0\u5b9a\u4e49\uff0c\u7ebf\u6bb5\u6811\u4efb\u4e00\u975e\u6839\uff0c\u975e\u53f6\u5b50\u8282\u70b9\u7684\u533a\u95f4\u957f\u5ea6\u90fd\u662f\u5176\u7236\u8282\u70b9\u7684\u533a\u95f4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u6240\u4ee5\uff0c\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u4ed6\u7684\u53f6\u5b50\u8282\u70b9\u7684\u6570\u76ee\u4e3aN\uff0c\u5373\u6574\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\u3002 \u7ebf\u6bb5\u6811\u7684\u7528\u9014\u5f88\u5e7f\uff0c\u4e3b\u8981\u7528\u4e8e\u8fdb\u884c\u66f4\u65b0\u548c\u67e5\u8be2\u64cd\u4f5c\uff0c\u8fd9\u91cc\u7684\u66f4\u65b0\u6216\u8005\u67e5\u8be2\u4e00\u822c\u81f3\u5c11\u6709\u4e00\u4e2a\u6307\u7684\u662f\u533a\u95f4\u7684\u66f4\u65b0\u6216\u8005\u67e5\u8be2\u3002 \u4e00\u68f5\u666e\u666e\u901a\u901a\u7684\u7ebf\u6bb5\u6811 #### \u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u5b9a\u4e49 struct Node { int l , r , mx ; } tr [ MAXN * 4 ]; //\u4e60\u60ef\u4e0a\u5c06\u7ebf\u6bb5\u6811\u7684\u5927\u5c0f\u5f00\u5230\u539f\u59cb\u6570\u7ec4\u76844\u500d /* l : \u533a\u95f4\u5de6\u7aef\u70b9 r : \u533a\u95f4\u53f3\u7aef\u70b9 mx : \u4ee5l, r\u4e3a\u4e0b\u6807\u533a\u95f4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u503c \u5b9e\u9645\u4e0a\uff0c\u7ebf\u6bb5\u6811\u6570\u7ec4\u8db3\u591f\u7684\u7a7a\u95f4==\u539f\u59cb\u6570\u7ec4n\u53ef\u5411\u4e0a\u53d6\u5230\u7684\u6700\u8fd1\u76842\u7684\u67d0\u4e2a\u6b21\u65b9\u7684\u4e24\u500d */ \u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6570\u7ec4\u6765\u8bf4\uff0c\u67d0\u4e00\u8282\u70b9(\u7f16\u53f7\u4e3ad)\u7684\u5de6\u5b69\u5b50\u5b58\u50a8\u57282 * d\uff0c \u53f3\u5b69\u5b50\u5b58\u50a8\u57282 * d + 1 \u5728c/c++\u4e2d\uff0c\u5c06\u4e00\u4e2a\u6570\u4e58\u4ee52\u7684x\u6b21\u65b9\u53ef\u4ee5\u5199\u6210\uff1a2 << x\uff0c\u6545\u4e0a\u9762\u7684 \" MAXN * 4 \" \u53ef\u4ee5\u5199\u6210MAXN << 2\uff0c\u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e \"<<\" \u548c \">>\" \u8fd0\u7b97\u7b26\uff0c\u5176\u5b9e\u9645\u542b\u4e49\u662f\u5c06\u5de6\u64cd\u4f5c\u6570\u7684\u4e8c\u8fdb\u5236\u6570\u5411\u5de6\u6216\u5411\u53f3\u79fb\u52a8\u6307\u5b9a\u7684\u4f4d\u6570\uff08\u6bd4\u5982A == 15\uff0c\u5728\u4e8c\u8fdb\u5236\u4e2dA\u7684\u503c\u4e3a\uff1a0000 1111\uff0cA << 2\u4e3a\uff1a0011 1100\uff09\uff0c\u8868\u73b0\u5728\u5341\u8fdb\u5236\u4e2d\u5c31\u662f\u5c06\u64cd\u4f5c\u6570\u4e58\u6216\u96642^x\u3002 #### \u5efa\u6811 void build ( int d , int l , int r ) { tr [ d ]. l = l , tr [ d ]. r = r ; if ( l == r ) { tr [ d ]. mx = arr [ l ]; return ; } int mid = ( l + r ) / 2 , lc = d * 2 , rc = d * 2 + 1 ; build ( lc , l , mid ); build ( rc , mid + 1 , r ); tr [ d ]. mx = max ( tr [ lc ]. mx , tr [ rc ]. mx ); } \u4e00\u822c\u4f1a\u5c06\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\u7684\u64cd\u4f5c\u79f0\u4e3aPush\u6216PushUp\uff0c\u5728\u4e0a\u8ff0\u5efa\u6811\u4f8b\u5b50\u4e2d\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\u7684\u64cd\u4f5c\u662f\uff1atr[d].mx = max(tr[lc].mx, tr[rc].mx); \u4e00\u822c\u4f1a\u5c06\u8fd9\u4e00\u53e5\u62bd\u79bb\u51fa\u6765\u5199\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u51fd\u6570\uff1a void Push ( int d ) { td [ d ]. mx = max ( tr [ d << 1 ]. mx , tr [ d << 1 | 1 ]. mx ); } #### \u67e5\u8be2 int query ( int d , int l , int r ) { //\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u6700\u5927\u503c if ( tr [ d ]. l == l && tr [ d ]. r == r ) return tr [ d ]. mx ; int mid = ( tr [ d ]. l + tr [ d ]. r ) / 2 , lc = d * 2 , rc = d * 2 + 1 ; if ( r <= mid ) return query ( lc , l , mid ); else if ( l > mid ) return query ( rc , mid , r ); else return max ( query ( lc , l , mid ), query ( rc , mid + 1 , r )); } \u7ebf\u6bb5\u6811\u67e5\u8be2\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230O(logn)\uff0c\u6709\u5982\u4e0b\u5b9a\u7406\uff1a Thm \uff1a\u5f53n >= 3\u65f6\uff0c\u4e00\u4e2a \u7684\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5c06 \u7684\u4efb\u610f\u5b50\u533a\u95f4 \u5206\u89e3\u4e3a\u4e0d\u8d85\u8fc7 \u4e2a\u5b50\u533a\u95f4\u3002 #### \u66f4\u65b0\u53ca\u300c\u6175\u61d2\u66f4\u65b0\u300d void modify ( int d , int pos , int v ) { //\u5c06\u4f4d\u7f6e\u4e3apos\u7684\u5143\u7d20\u66f4\u6539\u4e3av if ( tr [ d ]. l == tr [ d ]. r && tr [ d ]. mx == pos ){ tr [ d ]. mx = v ; return ; } int mid = ( tr [ d ]. l + tr [ d ]. r ) / 2 , lc = d * 2 , rc = d * 2 + 1 ; if ( pos <= mid ) modify ( lc , pos , v ); else modify ( rc , pos , v ); tr [ d ]. mx = max ( tr [ lc ]. mx , tr [ rc ]. mx ); } \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0\u8fd8\u6709\u4e00\u79cd\u300c\u6175\u61d2\u66f4\u65b0\u300d\u65b9\u5f0f\uff0c\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u5982\u679c\u66f4\u65b0\u7684\u533a\u95f4\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u533a\u95f4\u5b8c\u5168\u91cd\u53e0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u53ea\u5bf9\u8fd9\u4e2a\u8282\u70b9\u66f4\u65b0\uff0c\u5e76\u5bf9\u8fd9\u4e2a\u8282\u70b9\u505a\u6807\u8bb0\uff0c\u5bf9\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5c31\u65e0\u9700\u518d\u66f4\u65b0\u3002\u82e5\u540e\u7eed\u64cd\u4f5c\u4e2d\u5b58\u5728\u5173\u4e8e\u8fd9\u4e2a\u533a\u95f4\uff0c\u6216\u5176\u5b50\u533a\u95f4\u7684\u67e5\u8be2\uff0c\u90a3\u4e48**\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u8fd9\u4e2a\u533a\u95f4**\uff0c\u5f53\u518d\u6b21\u7ecf\u8fc7\u8fd9\u4e2a\u533a\u95f4\u7684\u65f6\u5019\u5c31\u66f4\u65b0\u8d77\u5b50\u533a\u95f4\u7684\u6807\u8bb0\uff0c\u7136\u540e\u7f6e\u8fd9\u4e2a\u533a\u95f4\u7684\u6807\u8bb0\u4e3a\"false\"\u5373\u53ef\u3002 #### \u6175\u61d2\u66f4\u65b0 void update ( int L , int R , int val , int d ){ if ( Tr [ d ]. l == L && Tr [ d ]. r == R ){ //\u533a\u95f4\u5b8c\u5168\u8986\u76d6 Tr [ d ]. lazy = val ; return ; } int mid = Tr [ d ]. l + Tr [ d ]. r >> 1 ; if ( Tr [ d ]. lazy != 0 ){ //\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u6807\u8bb0\u4e86\u5c31\u66f4\u65b0\u5176\u5b50\u8282\u70b9 Tr [ d << 1 ]. lazy = Tr [ d << 1 | 1 ]. lazy = Tr [ d ]. lazy ; Tr [ d ]. lazy = 0 ; } if ( mid < L ) update ( L , R , val , d << 1 | 1 ); //\u66f4\u65b0\u53f3\u5b50\u6811 else if ( R <= mid ) update ( L , R , val , d << 1 ); //\u66f4\u65b0\u5de6\u5b50\u6811 else update ( L , mid , val , d << 1 ), update ( mid + 1 , R , val , d << 1 | 1 ); }","title":"Segement tree"},{"location":"datastructure/tree/segment%20tree/segement_tree/#_1","text":"\u7ebf\u6bb5\u6811(segment tree)\u4e5f\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u533a\u95f4 \uff0c\u53f6\u5b50\u8282\u70b9\u5219\u662f\u4e00\u4e2a\u5355\u70b9\u533a\u95f4\uff0c\u4e5f\u5373 \u3002\u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u5176\u5de6\u5b50\u8282\u70b9\u7684\u533a\u95f4\u4e3a \uff0c\u53f3\u5b50\u8282\u70b9\u7684\u533a\u95f4\u4e3a \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u662f\u5176\u6570\u7ec4\u5143\u7d20\u4e0b\u6807\u7684\u533a\u95f4\uff0c\u533a\u95f4\u5927\u5c0f\u4e0e\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u5927\u5c0f\u65e0\u5173 \u3002 \u6839\u636e\u4e0a\u8ff0\u5b9a\u4e49\uff0c\u7ebf\u6bb5\u6811\u4efb\u4e00\u975e\u6839\uff0c\u975e\u53f6\u5b50\u8282\u70b9\u7684\u533a\u95f4\u957f\u5ea6\u90fd\u662f\u5176\u7236\u8282\u70b9\u7684\u533a\u95f4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u6240\u4ee5\uff0c\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u4ed6\u7684\u53f6\u5b50\u8282\u70b9\u7684\u6570\u76ee\u4e3aN\uff0c\u5373\u6574\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\u3002 \u7ebf\u6bb5\u6811\u7684\u7528\u9014\u5f88\u5e7f\uff0c\u4e3b\u8981\u7528\u4e8e\u8fdb\u884c\u66f4\u65b0\u548c\u67e5\u8be2\u64cd\u4f5c\uff0c\u8fd9\u91cc\u7684\u66f4\u65b0\u6216\u8005\u67e5\u8be2\u4e00\u822c\u81f3\u5c11\u6709\u4e00\u4e2a\u6307\u7684\u662f\u533a\u95f4\u7684\u66f4\u65b0\u6216\u8005\u67e5\u8be2\u3002 \u4e00\u68f5\u666e\u666e\u901a\u901a\u7684\u7ebf\u6bb5\u6811 #### \u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u5b9a\u4e49 struct Node { int l , r , mx ; } tr [ MAXN * 4 ]; //\u4e60\u60ef\u4e0a\u5c06\u7ebf\u6bb5\u6811\u7684\u5927\u5c0f\u5f00\u5230\u539f\u59cb\u6570\u7ec4\u76844\u500d /* l : \u533a\u95f4\u5de6\u7aef\u70b9 r : \u533a\u95f4\u53f3\u7aef\u70b9 mx : \u4ee5l, r\u4e3a\u4e0b\u6807\u533a\u95f4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u503c \u5b9e\u9645\u4e0a\uff0c\u7ebf\u6bb5\u6811\u6570\u7ec4\u8db3\u591f\u7684\u7a7a\u95f4==\u539f\u59cb\u6570\u7ec4n\u53ef\u5411\u4e0a\u53d6\u5230\u7684\u6700\u8fd1\u76842\u7684\u67d0\u4e2a\u6b21\u65b9\u7684\u4e24\u500d */ \u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6570\u7ec4\u6765\u8bf4\uff0c\u67d0\u4e00\u8282\u70b9(\u7f16\u53f7\u4e3ad)\u7684\u5de6\u5b69\u5b50\u5b58\u50a8\u57282 * d\uff0c \u53f3\u5b69\u5b50\u5b58\u50a8\u57282 * d + 1 \u5728c/c++\u4e2d\uff0c\u5c06\u4e00\u4e2a\u6570\u4e58\u4ee52\u7684x\u6b21\u65b9\u53ef\u4ee5\u5199\u6210\uff1a2 << x\uff0c\u6545\u4e0a\u9762\u7684 \" MAXN * 4 \" \u53ef\u4ee5\u5199\u6210MAXN << 2\uff0c\u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e \"<<\" \u548c \">>\" \u8fd0\u7b97\u7b26\uff0c\u5176\u5b9e\u9645\u542b\u4e49\u662f\u5c06\u5de6\u64cd\u4f5c\u6570\u7684\u4e8c\u8fdb\u5236\u6570\u5411\u5de6\u6216\u5411\u53f3\u79fb\u52a8\u6307\u5b9a\u7684\u4f4d\u6570\uff08\u6bd4\u5982A == 15\uff0c\u5728\u4e8c\u8fdb\u5236\u4e2dA\u7684\u503c\u4e3a\uff1a0000 1111\uff0cA << 2\u4e3a\uff1a0011 1100\uff09\uff0c\u8868\u73b0\u5728\u5341\u8fdb\u5236\u4e2d\u5c31\u662f\u5c06\u64cd\u4f5c\u6570\u4e58\u6216\u96642^x\u3002 #### \u5efa\u6811 void build ( int d , int l , int r ) { tr [ d ]. l = l , tr [ d ]. r = r ; if ( l == r ) { tr [ d ]. mx = arr [ l ]; return ; } int mid = ( l + r ) / 2 , lc = d * 2 , rc = d * 2 + 1 ; build ( lc , l , mid ); build ( rc , mid + 1 , r ); tr [ d ]. mx = max ( tr [ lc ]. mx , tr [ rc ]. mx ); } \u4e00\u822c\u4f1a\u5c06\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\u7684\u64cd\u4f5c\u79f0\u4e3aPush\u6216PushUp\uff0c\u5728\u4e0a\u8ff0\u5efa\u6811\u4f8b\u5b50\u4e2d\u66f4\u65b0\u8282\u70b9\u4fe1\u606f\u7684\u64cd\u4f5c\u662f\uff1atr[d].mx = max(tr[lc].mx, tr[rc].mx); \u4e00\u822c\u4f1a\u5c06\u8fd9\u4e00\u53e5\u62bd\u79bb\u51fa\u6765\u5199\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u51fd\u6570\uff1a void Push ( int d ) { td [ d ]. mx = max ( tr [ d << 1 ]. mx , tr [ d << 1 | 1 ]. mx ); } #### \u67e5\u8be2 int query ( int d , int l , int r ) { //\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u6700\u5927\u503c if ( tr [ d ]. l == l && tr [ d ]. r == r ) return tr [ d ]. mx ; int mid = ( tr [ d ]. l + tr [ d ]. r ) / 2 , lc = d * 2 , rc = d * 2 + 1 ; if ( r <= mid ) return query ( lc , l , mid ); else if ( l > mid ) return query ( rc , mid , r ); else return max ( query ( lc , l , mid ), query ( rc , mid + 1 , r )); } \u7ebf\u6bb5\u6811\u67e5\u8be2\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230O(logn)\uff0c\u6709\u5982\u4e0b\u5b9a\u7406\uff1a Thm \uff1a\u5f53n >= 3\u65f6\uff0c\u4e00\u4e2a \u7684\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5c06 \u7684\u4efb\u610f\u5b50\u533a\u95f4 \u5206\u89e3\u4e3a\u4e0d\u8d85\u8fc7 \u4e2a\u5b50\u533a\u95f4\u3002 #### \u66f4\u65b0\u53ca\u300c\u6175\u61d2\u66f4\u65b0\u300d void modify ( int d , int pos , int v ) { //\u5c06\u4f4d\u7f6e\u4e3apos\u7684\u5143\u7d20\u66f4\u6539\u4e3av if ( tr [ d ]. l == tr [ d ]. r && tr [ d ]. mx == pos ){ tr [ d ]. mx = v ; return ; } int mid = ( tr [ d ]. l + tr [ d ]. r ) / 2 , lc = d * 2 , rc = d * 2 + 1 ; if ( pos <= mid ) modify ( lc , pos , v ); else modify ( rc , pos , v ); tr [ d ]. mx = max ( tr [ lc ]. mx , tr [ rc ]. mx ); } \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0\u8fd8\u6709\u4e00\u79cd\u300c\u6175\u61d2\u66f4\u65b0\u300d\u65b9\u5f0f\uff0c\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u5982\u679c\u66f4\u65b0\u7684\u533a\u95f4\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u533a\u95f4\u5b8c\u5168\u91cd\u53e0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u53ea\u5bf9\u8fd9\u4e2a\u8282\u70b9\u66f4\u65b0\uff0c\u5e76\u5bf9\u8fd9\u4e2a\u8282\u70b9\u505a\u6807\u8bb0\uff0c\u5bf9\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5c31\u65e0\u9700\u518d\u66f4\u65b0\u3002\u82e5\u540e\u7eed\u64cd\u4f5c\u4e2d\u5b58\u5728\u5173\u4e8e\u8fd9\u4e2a\u533a\u95f4\uff0c\u6216\u5176\u5b50\u533a\u95f4\u7684\u67e5\u8be2\uff0c\u90a3\u4e48**\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u8fd9\u4e2a\u533a\u95f4**\uff0c\u5f53\u518d\u6b21\u7ecf\u8fc7\u8fd9\u4e2a\u533a\u95f4\u7684\u65f6\u5019\u5c31\u66f4\u65b0\u8d77\u5b50\u533a\u95f4\u7684\u6807\u8bb0\uff0c\u7136\u540e\u7f6e\u8fd9\u4e2a\u533a\u95f4\u7684\u6807\u8bb0\u4e3a\"false\"\u5373\u53ef\u3002 #### \u6175\u61d2\u66f4\u65b0 void update ( int L , int R , int val , int d ){ if ( Tr [ d ]. l == L && Tr [ d ]. r == R ){ //\u533a\u95f4\u5b8c\u5168\u8986\u76d6 Tr [ d ]. lazy = val ; return ; } int mid = Tr [ d ]. l + Tr [ d ]. r >> 1 ; if ( Tr [ d ]. lazy != 0 ){ //\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u88ab\u6807\u8bb0\u4e86\u5c31\u66f4\u65b0\u5176\u5b50\u8282\u70b9 Tr [ d << 1 ]. lazy = Tr [ d << 1 | 1 ]. lazy = Tr [ d ]. lazy ; Tr [ d ]. lazy = 0 ; } if ( mid < L ) update ( L , R , val , d << 1 | 1 ); //\u66f4\u65b0\u53f3\u5b50\u6811 else if ( R <= mid ) update ( L , R , val , d << 1 ); //\u66f4\u65b0\u5de6\u5b50\u6811 else update ( L , mid , val , d << 1 ), update ( mid + 1 , R , val , d << 1 | 1 ); }","title":"\u57fa\u672c\u6982\u5ff5"}]}